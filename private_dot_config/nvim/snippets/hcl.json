{
  "aws-data-acm_certificate": {
    "description": "Defines acm_certificate",
    "prefix": "tf-aws-data-acm_certificate",
    "body": [
      "# Find a certificate that is issued",
      "data \"aws_acm_certificate\" \"issued\" {",
      "  domain   = \"tf.example.com\"",
      "  statuses = [\"ISSUED\"]",
      "}",
      "",
      "# Find a certificate issued by (not imported into) ACM",
      "data \"aws_acm_certificate\" \"amazon_issued\" {",
      "  domain      = \"tf.example.com\"",
      "  types       = [\"AMAZON_ISSUED\"]",
      "  most_recent = true",
      "}",
      "",
      "# Find a RSA 4096 bit certificate",
      "data \"aws_acm_certificate\" \"rsa_4096\" {",
      "  domain    = \"tf.example.com\"",
      "  key_types = [\"RSA_4096\"]",
      "}"
    ]
  },
  "aws-data-acmpca_certificate_authority": {
    "description": "Defines acmpca_certificate_authority",
    "prefix": "tf-aws-data-acmpca_certificate_authority",
    "body": [
      "data \"aws_acmpca_certificate_authority\" \"example\" {",
      "  arn = \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\"",
      "}"
    ]
  },
  "aws-data-ami": {
    "description": "Defines ami",
    "prefix": "tf-aws-data-ami",
    "body": [
      "data \"aws_ami\" \"example\" {",
      "  executable_users = [\"self\"]",
      "  most_recent      = true",
      "  name_regex       = \"^myami-\\\\d{3}\"",
      "  owners           = [\"self\"]",
      "",
      "  filter {",
      "    name   = \"name\"",
      "    values = [\"myami-*\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"root-device-type\"",
      "    values = [\"ebs\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"virtualization-type\"",
      "    values = [\"hvm\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-ami_ids": {
    "description": "Defines ami_ids",
    "prefix": "tf-aws-data-ami_ids",
    "body": [
      "data \"aws_ami_ids\" \"ubuntu\" {",
      "  owners = [\"099720109477\"]",
      "",
      "  filter {",
      "    name   = \"name\"",
      "    values = [\"ubuntu/images/ubuntu-*-*-amd64-server-*\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-api_gateway_api_key": {
    "description": "Defines api_gateway_api_key",
    "prefix": "tf-aws-data-api_gateway_api_key",
    "body": [
      "data \"aws_api_gateway_api_key\" \"my_api_key\" {",
      "  id = \"ru3mpjgse6\"",
      "}"
    ]
  },
  "aws-data-api_gateway_domain_name": {
    "description": "Defines api_gateway_domain_name",
    "prefix": "tf-aws-data-api_gateway_domain_name",
    "body": [
      "data \"aws_api_gateway_domain_name\" \"example\" {",
      "  domain_name = \"api.example.com\"",
      "}"
    ]
  },
  "aws-data-api_gateway_resource": {
    "description": "Defines api_gateway_resource",
    "prefix": "tf-aws-data-api_gateway_resource",
    "body": [
      "data \"aws_api_gateway_rest_api\" \"my_rest_api\" {",
      "  name = \"my-rest-api\"",
      "}",
      "",
      "data \"aws_api_gateway_resource\" \"my_resource\" {",
      "  rest_api_id = data.aws_api_gateway_rest_api.my_rest_api.id",
      "  path        = \"/endpoint/path\"",
      "}"
    ]
  },
  "aws-data-api_gateway_rest_api": {
    "description": "Defines api_gateway_rest_api",
    "prefix": "tf-aws-data-api_gateway_rest_api",
    "body": [
      "data \"aws_api_gateway_rest_api\" \"my_rest_api\" {",
      "  name = \"my-rest-api\"",
      "}"
    ]
  },
  "aws-data-api_gateway_vpc_link": {
    "description": "Defines api_gateway_vpc_link",
    "prefix": "tf-aws-data-api_gateway_vpc_link",
    "body": [
      "data \"aws_api_gateway_vpc_link\" \"my_api_gateway_vpc_link\" {",
      "  name = \"my-vpc-link\"",
      "}"
    ]
  },
  "aws-data-apigatewayv2_api": {
    "description": "Defines apigatewayv2_api",
    "prefix": "tf-aws-data-apigatewayv2_api",
    "body": [
      "data \"aws_apigatewayv2_api\" \"example\" {",
      "  api_id = \"aabbccddee\"",
      "}"
    ]
  },
  "aws-data-apigatewayv2_apis": {
    "description": "Defines apigatewayv2_apis",
    "prefix": "tf-aws-data-apigatewayv2_apis",
    "body": [
      "data \"aws_apigatewayv2_apis\" \"example\" {",
      "  protocol_type = \"HTTP\"",
      "}"
    ]
  },
  "aws-data-arn": {
    "description": "Defines arn",
    "prefix": "tf-aws-data-arn",
    "body": [
      "data \"aws_arn\" \"db_instance\" {",
      "  arn = \"arn:aws:rds:eu-west-1:123456789012:db:mysql-db\"",
      "}"
    ]
  },
  "aws-data-autoscaling_group": {
    "description": "Defines autoscaling_group",
    "prefix": "tf-aws-data-autoscaling_group",
    "body": [
      "data \"aws_autoscaling_group\" \"foo\" {",
      "  name = \"foo\"",
      "}"
    ]
  },
  "aws-data-autoscaling_groups": {
    "description": "Defines autoscaling_groups",
    "prefix": "tf-aws-data-autoscaling_groups",
    "body": [
      "data \"aws_autoscaling_groups\" \"groups\" {",
      "  filter {",
      "    name   = \"key\"",
      "    values = [\"Team\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"value\"",
      "    values = [\"Pets\"]",
      "  }",
      "}",
      "",
      "resource \"aws_autoscaling_notification\" \"slack_notifications\" {",
      "  group_names = data.aws_autoscaling_groups.groups.names",
      "",
      "  notifications = [",
      "    \"autoscaling:EC2_INSTANCE_LAUNCH\",",
      "    \"autoscaling:EC2_INSTANCE_TERMINATE\",",
      "    \"autoscaling:EC2_INSTANCE_LAUNCH_ERROR\",",
      "    \"autoscaling:EC2_INSTANCE_TERMINATE_ERROR\",",
      "  ]",
      "",
      "  topic_arn = \"TOPIC ARN\"",
      "}"
    ]
  },
  "aws-data-availability_zone": {
    "description": "Defines availability_zone",
    "prefix": "tf-aws-data-availability_zone",
    "body": [
      "variable \"region_number\" {",
      "  # Arbitrary mapping of region name to number to use in",
      "  # a VPC's CIDR prefix.",
      "  default = {",
      "    us-east-1      = 1",
      "    us-west-1      = 2",
      "    us-west-2      = 3",
      "    eu-central-1   = 4",
      "    ap-northeast-1 = 5",
      "  }",
      "}",
      "",
      "variable \"az_number\" {",
      "  # Assign a number to each AZ letter used in our configuration",
      "  default = {",
      "    a = 1",
      "    b = 2",
      "    c = 3",
      "    d = 4",
      "    e = 5",
      "    f = 6",
      "  }",
      "}",
      "",
      "# Retrieve the AZ where we want to create network resources",
      "# This must be in the region selected on the AWS provider.",
      "data \"aws_availability_zone\" \"example\" {",
      "  name = \"eu-central-1a\"",
      "}",
      "",
      "# Create a VPC for the region associated with the AZ",
      "resource \"aws_vpc\" \"example\" {",
      "  cidr_block = cidrsubnet(\"10.0.0.0/8\", 4, var.region_number[data.aws_availability_zone.example.region])",
      "}",
      "",
      "# Create a subnet for the AZ within the regional VPC",
      "resource \"aws_subnet\" \"example\" {",
      "  vpc_id     = aws_vpc.example.id",
      "  cidr_block = cidrsubnet(aws_vpc.example.cidr_block, 4, var.az_number[data.aws_availability_zone.example.name_suffix])",
      "}"
    ]
  },
  "aws-data-availability_zones": {
    "description": "Defines availability_zones",
    "prefix": "tf-aws-data-availability_zones",
    "body": [
      "# Declare the data source",
      "data \"aws_availability_zones\" \"available\" {",
      "  state = \"available\"",
      "}",
      "",
      "# e.g. Create subnets in the first two available availability zones",
      "",
      "resource \"aws_subnet\" \"primary\" {",
      "  availability_zone = data.aws_availability_zones.available.names[0]",
      "",
      "  # ...",
      "}",
      "",
      "resource \"aws_subnet\" \"secondary\" {",
      "  availability_zone = data.aws_availability_zones.available.names[1]",
      "",
      "  # ...",
      "}"
    ]
  },
  "aws-data-backup_plan": {
    "description": "Defines backup_plan",
    "prefix": "tf-aws-data-backup_plan",
    "body": [
      "data \"aws_backup_plan\" \"example\" {",
      "  plan_id = \"tf_example_backup_plan_id\"",
      "}"
    ]
  },
  "aws-data-backup_selection": {
    "description": "Defines backup_selection",
    "prefix": "tf-aws-data-backup_selection",
    "body": [
      "data \"aws_backup_selection\" \"example\" {",
      "  plan_id      = data.aws_backup_plan.example.id",
      "  selection_id = \"selection-id-example\"",
      "}"
    ]
  },
  "aws-data-backup_vault": {
    "description": "Defines backup_vault",
    "prefix": "tf-aws-data-backup_vault",
    "body": [
      "data \"aws_backup_vault\" \"example\" {",
      "  name = \"example_backup_vault\"",
      "}"
    ]
  },
  "aws-data-batch_compute_environment": {
    "description": "Defines batch_compute_environment",
    "prefix": "tf-aws-data-batch_compute_environment",
    "body": [
      "data \"aws_batch_compute_environment\" \"batch-mongo\" {",
      "  compute_environment_name = \"batch-mongo-production\"",
      "}"
    ]
  },
  "aws-data-batch_job_queue": {
    "description": "Defines batch_job_queue",
    "prefix": "tf-aws-data-batch_job_queue",
    "body": [
      "data \"aws_batch_job_queue\" \"test-queue\" {",
      "  name = \"tf-test-batch-job-queue\"",
      "}"
    ]
  },
  "aws-data-billing_service_account": {
    "description": "Defines billing_service_account",
    "prefix": "tf-aws-data-billing_service_account",
    "body": [
      "data \"aws_billing_service_account\" \"main\" {}",
      "",
      "resource \"aws_s3_bucket\" \"billing_logs\" {",
      "  bucket = \"my-billing-tf-test-bucket\"",
      "  acl    = \"private\"",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Id\": \"Policy\",",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"s3:GetBucketAcl\", \"s3:GetBucketPolicy\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"arn:aws:s3:::my-billing-tf-test-bucket\",",
      "      \"Principal\": {",
      "        \"AWS\": [",
      "          \"${data.aws_billing_service_account.main.arn}\"",
      "        ]",
      "      }",
      "    },",
      "    {",
      "      \"Action\": [",
      "        \"s3:PutObject\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"arn:aws:s3:::my-billing-tf-test-bucket/*\",",
      "      \"Principal\": {",
      "        \"AWS\": [",
      "          \"${data.aws_billing_service_account.main.arn}\"",
      "        ]",
      "      }",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-data-caller_identity": {
    "description": "Defines caller_identity",
    "prefix": "tf-aws-data-caller_identity",
    "body": [
      "data \"aws_caller_identity\" \"current\" {}",
      "",
      "output \"account_id\" {",
      "  value = data.aws_caller_identity.current.account_id",
      "}",
      "",
      "output \"caller_arn\" {",
      "  value = data.aws_caller_identity.current.arn",
      "}",
      "",
      "output \"caller_user\" {",
      "  value = data.aws_caller_identity.current.user_id",
      "}"
    ]
  },
  "aws-data-canonical_user_id": {
    "description": "Defines canonical_user_id",
    "prefix": "tf-aws-data-canonical_user_id",
    "body": [
      "data \"aws_canonical_user_id\" \"current\" {}",
      "",
      "output \"canonical_user_id\" {",
      "  value = data.aws_canonical_user_id.current.id",
      "}"
    ]
  },
  "aws-data-cloudformation_export": {
    "description": "Defines cloudformation_export",
    "prefix": "tf-aws-data-cloudformation_export",
    "body": [
      "data \"aws_cloudformation_export\" \"subnet_id\" {",
      "  name = \"mySubnetIdExportName\"",
      "}",
      "",
      "resource \"aws_instance\" \"web\" {",
      "  ami           = \"ami-abb07bcb\"",
      "  instance_type = \"t2.micro\"",
      "  subnet_id     = data.aws_cloudformation_export.subnet_id.value",
      "}"
    ]
  },
  "aws-data-cloudformation_stack": {
    "description": "Defines cloudformation_stack",
    "prefix": "tf-aws-data-cloudformation_stack",
    "body": [
      "data \"aws_cloudformation_stack\" \"network\" {",
      "  name = \"my-network-stack\"",
      "}",
      "",
      "resource \"aws_instance\" \"web\" {",
      "  ami           = \"ami-abb07bcb\"",
      "  instance_type = \"t2.micro\"",
      "  subnet_id     = data.aws_cloudformation_stack.network.outputs[\"SubnetId\"]",
      "",
      "  tags = {",
      "    Name = \"HelloWorld\"",
      "  }",
      "}"
    ]
  },
  "aws-data-cloudfront_cache_policy": {
    "description": "Defines cloudfront_cache_policy",
    "prefix": "tf-aws-data-cloudfront_cache_policy",
    "body": [
      "data \"aws_cloudfront_cache_policy\" \"example\" {",
      "  name = \"example-policy\"",
      "}"
    ]
  },
  "aws-data-cloudfront_distribution": {
    "description": "Defines cloudfront_distribution",
    "prefix": "tf-aws-data-cloudfront_distribution",
    "body": [
      "data \"aws_cloudfront_distribution\" \"test\" {",
      "  id = \"EDFDVBD632BHDS5\"",
      "}"
    ]
  },
  "aws-data-cloudfront_origin_request_policy": {
    "description": "Defines cloudfront_origin_request_policy",
    "prefix": "tf-aws-data-cloudfront_origin_request_policy",
    "body": [
      "data \"aws_cloudfront_origin_request_policy\" \"example\" {",
      "  name = \"example-policy\"",
      "}",
      ""
    ]
  },
  "aws-data-cloudhsm_v2_cluster": {
    "description": "Defines cloudhsm_v2_cluster",
    "prefix": "tf-aws-data-cloudhsm_v2_cluster",
    "body": [
      "data \"aws_cloudhsm_v2_cluster\" \"cluster\" {",
      "  cluster_id = \"cluster-testclusterid\"",
      "}"
    ]
  },
  "aws-data-cloudtrail_service_account": {
    "description": "Defines cloudtrail_service_account",
    "prefix": "tf-aws-data-cloudtrail_service_account",
    "body": [
      "data \"aws_cloudtrail_service_account\" \"main\" {}",
      "",
      "resource \"aws_s3_bucket\" \"bucket\" {",
      "  bucket        = \"tf-cloudtrail-logging-test-bucket\"",
      "  force_destroy = true",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2008-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"Put bucket policy needed for trails\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"AWS\": \"${data.aws_cloudtrail_service_account.main.arn}\"",
      "      },",
      "      \"Action\": \"s3:PutObject\",",
      "      \"Resource\": \"arn:aws:s3:::tf-cloudtrail-logging-test-bucket/*\"",
      "    },",
      "    {",
      "      \"Sid\": \"Get bucket policy needed for trails\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"AWS\": \"${data.aws_cloudtrail_service_account.main.arn}\"",
      "      },",
      "      \"Action\": \"s3:GetBucketAcl\",",
      "      \"Resource\": \"arn:aws:s3:::tf-cloudtrail-logging-test-bucket\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-data-cloudwatch_log_group": {
    "description": "Defines cloudwatch_log_group",
    "prefix": "tf-aws-data-cloudwatch_log_group",
    "body": [
      "data \"aws_cloudwatch_log_group\" \"example\" {",
      "  name = \"MyImportantLogs\"",
      "}"
    ]
  },
  "aws-data-codeartifact_authorization_token": {
    "description": "Defines codeartifact_authorization_token",
    "prefix": "tf-aws-data-codeartifact_authorization_token",
    "body": [
      "data \"aws_codeartifact_authorization_token\" \"test\" {",
      "  domain = aws_codeartifact_domain.test.domain",
      "}"
    ]
  },
  "aws-data-codeartifact_repository_endpoint": {
    "description": "Defines codeartifact_repository_endpoint",
    "prefix": "tf-aws-data-codeartifact_repository_endpoint",
    "body": [
      "data \"aws_codeartifact_repository_endpoint\" \"test\" {",
      "  domain     = aws_codeartifact_domain.test.domain",
      "  repository = aws_codeartifact_repository.test.repository",
      "  format     = \"npm\"",
      "}"
    ]
  },
  "aws-data-codecommit_repository": {
    "description": "Defines codecommit_repository",
    "prefix": "tf-aws-data-codecommit_repository",
    "body": [
      "data \"aws_codecommit_repository\" \"test\" {",
      "  repository_name = \"MyTestRepository\"",
      "}"
    ]
  },
  "aws-data-cognito_user_pools": {
    "description": "Defines cognito_user_pools",
    "prefix": "tf-aws-data-cognito_user_pools",
    "body": [
      "data \"aws_api_gateway_rest_api\" \"selected\" {",
      "  name = var.api_gateway_name",
      "}",
      "",
      "data \"aws_cognito_user_pools\" \"selected\" {",
      "  name = var.cognito_user_pool_name",
      "}",
      "",
      "resource \"aws_api_gateway_authorizer\" \"cognito\" {",
      "  name          = \"cognito\"",
      "  type          = \"COGNITO_USER_POOLS\"",
      "  rest_api_id   = data.aws_api_gateway_rest_api.selected.id",
      "  provider_arns = data.aws_cognito_user_pools.selected.arns",
      "}"
    ]
  },
  "aws-data-cur_report_definition": {
    "description": "Defines cur_report_definition",
    "prefix": "tf-aws-data-cur_report_definition",
    "body": [
      "data \"aws_cur_report_definition\" \"report_definition\" {",
      "  report_name = \"example\"",
      "}"
    ]
  },
  "aws-data-customer_gateway": {
    "description": "Defines customer_gateway",
    "prefix": "tf-aws-data-customer_gateway",
    "body": [
      "data \"aws_customer_gateway\" \"foo\" {",
      "  filter {",
      "    name   = \"tag:Name\"",
      "    values = [\"foo-prod\"]",
      "  }",
      "}",
      "",
      "resource \"aws_vpn_gateway\" \"main\" {",
      "  vpc_id          = aws_vpc.main.id",
      "  amazon_side_asn = 7224",
      "}",
      "",
      "resource \"aws_vpn_connection\" \"transit\" {",
      "  vpn_gateway_id      = aws_vpn_gateway.main.id",
      "  customer_gateway_id = data.aws_customer_gateway.foo.id",
      "  type                = data.aws_customer_gateway.foo.type",
      "  static_routes_only  = false",
      "}"
    ]
  },
  "aws-data-db_cluster_snapshot": {
    "description": "Defines db_cluster_snapshot",
    "prefix": "tf-aws-data-db_cluster_snapshot",
    "body": [
      "data \"aws_db_cluster_snapshot\" \"development_final_snapshot\" {",
      "  db_cluster_identifier = \"development_cluster\"",
      "  most_recent           = true",
      "}",
      "",
      "# Use the last snapshot of the dev database before it was destroyed to create",
      "# a new dev database.",
      "resource \"aws_rds_cluster\" \"aurora\" {",
      "  cluster_identifier   = \"development_cluster\"",
      "  snapshot_identifier  = data.aws_db_cluster_snapshot.development_final_snapshot.id",
      "  db_subnet_group_name = \"my_db_subnet_group\"",
      "",
      "  lifecycle {",
      "    ignore_changes = [snapshot_identifier]",
      "  }",
      "}",
      "",
      "resource \"aws_rds_cluster_instance\" \"aurora\" {",
      "  cluster_identifier   = aws_rds_cluster.aurora.id",
      "  instance_class       = \"db.t2.small\"",
      "  db_subnet_group_name = \"my_db_subnet_group\"",
      "}"
    ]
  },
  "aws-data-db_event_categories": {
    "description": "Defines db_event_categories",
    "prefix": "tf-aws-data-db_event_categories",
    "body": [
      "data \"aws_db_event_categories\" \"example\" {}",
      "",
      "output \"example\" {",
      "  value = data.aws_db_event_categories.example.event_categories",
      "}"
    ]
  },
  "aws-data-db_instance": {
    "description": "Defines db_instance",
    "prefix": "tf-aws-data-db_instance",
    "body": [
      "data \"aws_db_instance\" \"database\" {",
      "  db_instance_identifier = \"my-test-database\"",
      "}"
    ]
  },
  "aws-data-db_snapshot": {
    "description": "Defines db_snapshot",
    "prefix": "tf-aws-data-db_snapshot",
    "body": [
      "resource \"aws_db_instance\" \"prod\" {",
      "  allocated_storage    = 10",
      "  engine               = \"mysql\"",
      "  engine_version       = \"5.6.17\"",
      "  instance_class       = \"db.t2.micro\"",
      "  name                 = \"mydb\"",
      "  username             = \"foo\"",
      "  password             = \"bar\"",
      "  db_subnet_group_name = \"my_database_subnet_group\"",
      "  parameter_group_name = \"default.mysql5.6\"",
      "}",
      "",
      "data \"aws_db_snapshot\" \"latest_prod_snapshot\" {",
      "  db_instance_identifier = aws_db_instance.prod.id",
      "  most_recent            = true",
      "}",
      "",
      "# Use the latest production snapshot to create a dev instance.",
      "resource \"aws_db_instance\" \"dev\" {",
      "  instance_class      = \"db.t2.micro\"",
      "  name                = \"mydbdev\"",
      "  snapshot_identifier = data.aws_db_snapshot.latest_prod_snapshot.id",
      "",
      "  lifecycle {",
      "    ignore_changes = [snapshot_identifier]",
      "  }",
      "}"
    ]
  },
  "aws-data-db_subnet_group": {
    "description": "Defines db_subnet_group",
    "prefix": "tf-aws-data-db_subnet_group",
    "body": [
      "data \"aws_db_subnet_group\" \"database\" {",
      "  name = \"my-test-database-subnet-group\"",
      "}"
    ]
  },
  "aws-data-directory_service_directory": {
    "description": "Defines directory_service_directory",
    "prefix": "tf-aws-data-directory_service_directory",
    "body": [
      "data \"aws_directory_service_directory\" \"example\" {",
      "  directory_id = aws_directory_service_directory.main.id",
      "}"
    ]
  },
  "aws-data-docdb_engine_version": {
    "description": "Defines docdb_engine_version",
    "prefix": "tf-aws-data-docdb_engine_version",
    "body": [
      "data \"aws_docdb_engine_version\" \"test\" {",
      "  version = \"3.6.0\"",
      "}"
    ]
  },
  "aws-data-docdb_orderable_db_instance": {
    "description": "Defines docdb_orderable_db_instance",
    "prefix": "tf-aws-data-docdb_orderable_db_instance",
    "body": [
      "data \"aws_docdb_orderable_db_instance\" \"test\" {",
      "  engine         = \"docdb\"",
      "  engine_version = \"3.6.0\"",
      "  license_model  = \"na\"",
      "",
      "  preferred_instance_classes = [\"db.r5.large\", \"db.r4.large\", \"db.t3.medium\"]",
      "}"
    ]
  },
  "aws-data-dx_gateway": {
    "description": "Defines dx_gateway",
    "prefix": "tf-aws-data-dx_gateway",
    "body": [
      "data \"aws_dx_gateway\" \"example\" {",
      "  name = \"example\"",
      "}"
    ]
  },
  "aws-data-dynamodb_table": {
    "description": "Defines dynamodb_table",
    "prefix": "tf-aws-data-dynamodb_table",
    "body": [
      "data \"aws_dynamodb_table\" \"tableName\" {",
      "  name = \"tableName\"",
      "}"
    ]
  },
  "aws-data-ebs_default_kms_key": {
    "description": "Defines ebs_default_kms_key",
    "prefix": "tf-aws-data-ebs_default_kms_key",
    "body": [
      "data \"aws_ebs_default_kms_key\" \"current\" {}",
      "",
      "resource \"aws_ebs_volume\" \"example\" {",
      "  availability_zone = \"us-west-2a\"",
      "",
      "  encrypted  = true",
      "  kms_key_id = data.aws_ebs_default_kms_key.current.key_arn",
      "}"
    ]
  },
  "aws-data-ebs_encryption_by_default": {
    "description": "Defines ebs_encryption_by_default",
    "prefix": "tf-aws-data-ebs_encryption_by_default",
    "body": [
      "data \"aws_ebs_encryption_by_default\" \"current\" {}"
    ]
  },
  "aws-data-ebs_snapshot": {
    "description": "Defines ebs_snapshot",
    "prefix": "tf-aws-data-ebs_snapshot",
    "body": [
      "data \"aws_ebs_snapshot\" \"ebs_volume\" {",
      "  most_recent = true",
      "  owners      = [\"self\"]",
      "",
      "  filter {",
      "    name   = \"volume-size\"",
      "    values = [\"40\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"tag:Name\"",
      "    values = [\"Example\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-ebs_snapshot_ids": {
    "description": "Defines ebs_snapshot_ids",
    "prefix": "tf-aws-data-ebs_snapshot_ids",
    "body": [
      "data \"aws_ebs_snapshot_ids\" \"ebs_volumes\" {",
      "  owners = [\"self\"]",
      "",
      "  filter {",
      "    name   = \"volume-size\"",
      "    values = [\"40\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"tag:Name\"",
      "    values = [\"Example\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-ebs_volume": {
    "description": "Defines ebs_volume",
    "prefix": "tf-aws-data-ebs_volume",
    "body": [
      "data \"aws_ebs_volume\" \"ebs_volume\" {",
      "  most_recent = true",
      "",
      "  filter {",
      "    name   = \"volume-type\"",
      "    values = [\"gp2\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"tag:Name\"",
      "    values = [\"Example\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-ebs_volumes": {
    "description": "Defines ebs_volumes",
    "prefix": "tf-aws-data-ebs_volumes",
    "body": [
      "data \"aws_ebs_volumes\" \"example\" {",
      "  tags = {",
      "    VolumeSet = \"TestVolumeSet\"",
      "  }",
      "}",
      "",
      "data \"aws_ebs_volume\" \"example\" {",
      "  for_each = data.aws_ebs_volumes.example.ids",
      "  filter {",
      "    name   = \"volume-id\"",
      "    values = [each.value]",
      "  }",
      "}",
      "",
      "output \"availability_zone_to_volume_id\" {",
      "  value = { for s in data.aws_ebs_volume.example : s.id => s.availability_zone }",
      "}"
    ]
  },
  "aws-data-ec2_coip_pool": {
    "description": "Defines ec2_coip_pool",
    "prefix": "tf-aws-data-ec2_coip_pool",
    "body": [
      "variable \"coip_pool_id\" {}",
      "",
      "data \"aws_ec2_coip_pool\" \"selected\" {",
      "  id = var.coip_pool_id",
      "}"
    ]
  },
  "aws-data-ec2_coip_pools": {
    "description": "Defines ec2_coip_pools",
    "prefix": "tf-aws-data-ec2_coip_pools",
    "body": [
      "data \"aws_ec2_coip_pools\" \"foo\" {}",
      "",
      "output \"foo\" {",
      "  value = data.aws_ec2_coip_pools.foo.ids",
      "}"
    ]
  },
  "aws-data-ec2_instance_type": {
    "description": "Defines ec2_instance_type",
    "prefix": "tf-aws-data-ec2_instance_type",
    "body": [
      "data \"aws_ec2_instance_type\" \"example\" {",
      "  instance_type = \"t2.micro\"",
      "}",
      ""
    ]
  },
  "aws-data-ec2_instance_type_offering": {
    "description": "Defines ec2_instance_type_offering",
    "prefix": "tf-aws-data-ec2_instance_type_offering",
    "body": [
      "data \"aws_ec2_instance_type_offering\" \"example\" {",
      "  filter {",
      "    name   = \"instance-type\"",
      "    values = [\"t2.micro\", \"t3.micro\"]",
      "  }",
      "",
      "  preferred_instance_types = [\"t3.micro\", \"t2.micro\"]",
      "}"
    ]
  },
  "aws-data-ec2_instance_type_offerings": {
    "description": "Defines ec2_instance_type_offerings",
    "prefix": "tf-aws-data-ec2_instance_type_offerings",
    "body": [
      "data \"aws_ec2_instance_type_offerings\" \"example\" {",
      "  filter {",
      "    name   = \"instance-type\"",
      "    values = [\"t2.micro\", \"t3.micro\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"location\"",
      "    values = [\"usw2-az4\"]",
      "  }",
      "",
      "  location_type = \"availability-zone-id\"",
      "}"
    ]
  },
  "aws-data-ec2_local_gateway": {
    "description": "Defines ec2_local_gateway",
    "prefix": "tf-aws-data-ec2_local_gateway",
    "body": [
      "variable \"local_gateway_id\" {}",
      "",
      "data \"aws_ec2_local_gateway\" \"selected\" {",
      "  id = var.local_gateway_id",
      "}"
    ]
  },
  "aws-data-ec2_local_gateway_route_table": {
    "description": "Defines ec2_local_gateway_route_table",
    "prefix": "tf-aws-data-ec2_local_gateway_route_table",
    "body": [
      "variable \"aws_ec2_local_gateway_route_table\" {}",
      "",
      "data \"aws_ec2_local_gateway_route_table\" \"selected\" {",
      "  local_gateway_route_table_id = var.aws_ec2_local_gateway_route_table",
      "}"
    ]
  },
  "aws-data-ec2_local_gateway_route_tables": {
    "description": "Defines ec2_local_gateway_route_tables",
    "prefix": "tf-aws-data-ec2_local_gateway_route_tables",
    "body": [
      "data \"aws_ec2_local_gateway_route_table\" \"foo\" {}",
      "",
      "output \"foo\" {",
      "  value = data.aws_ec2_local_gateway_route_table.foo.ids",
      "}"
    ]
  },
  "aws-data-ec2_local_gateway_virtual_interface": {
    "description": "Defines ec2_local_gateway_virtual_interface",
    "prefix": "tf-aws-data-ec2_local_gateway_virtual_interface",
    "body": [
      "data \"aws_ec2_local_gateway_virtual_interface\" \"example\" {",
      "  for_each = data.aws_ec2_local_gateway_virtual_interface_group.example.local_gateway_virtual_interface_ids",
      "",
      "  id = each.value",
      "}"
    ]
  },
  "aws-data-ec2_local_gateway_virtual_interface_group": {
    "description": "Defines ec2_local_gateway_virtual_interface_group",
    "prefix": "tf-aws-data-ec2_local_gateway_virtual_interface_group",
    "body": [
      "data \"aws_ec2_local_gateway_virtual_interface_group\" \"example\" {",
      "  local_gateway_id = data.aws_ec2_local_gateway.example.id",
      "}"
    ]
  },
  "aws-data-ec2_local_gateway_virtual_interface_groups": {
    "description": "Defines ec2_local_gateway_virtual_interface_groups",
    "prefix": "tf-aws-data-ec2_local_gateway_virtual_interface_groups",
    "body": [
      "data \"aws_ec2_local_gateway_virtual_interface_groups\" \"all\" {}"
    ]
  },
  "aws-data-ec2_local_gateways": {
    "description": "Defines ec2_local_gateways",
    "prefix": "tf-aws-data-ec2_local_gateways",
    "body": [
      "data \"aws_ec2_local_gateways\" \"foo\" {",
      "  tags = {",
      "    service = \"production\"",
      "  }",
      "}",
      "",
      "output \"foo\" {",
      "  value = data.aws_ec2_local_gateways.foo.ids",
      "}"
    ]
  },
  "aws-data-ec2_managed_prefix_list": {
    "description": "Defines ec2_managed_prefix_list",
    "prefix": "tf-aws-data-ec2_managed_prefix_list",
    "body": [
      "data \"aws_region\" \"current\" {}",
      "",
      "data \"aws_ec2_managed_prefix_list\" \"example\" {",
      "  name = \"com.amazonaws.${data.aws_region.current.name}.dynamodb\"",
      "}"
    ]
  },
  "aws-data-ec2_spot_price": {
    "description": "Defines ec2_spot_price",
    "prefix": "tf-aws-data-ec2_spot_price",
    "body": [
      "data \"aws_ec2_spot_price\" \"example\" {",
      "  instance_type     = \"t3.medium\"",
      "  availability_zone = \"us-west-2a\"",
      "",
      "  filter {",
      "    name   = \"product-description\"",
      "    values = [\"Linux/UNIX\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-ec2_transit_gateway": {
    "description": "Defines ec2_transit_gateway",
    "prefix": "tf-aws-data-ec2_transit_gateway",
    "body": [
      "data \"aws_ec2_transit_gateway\" \"example\" {",
      "  filter {",
      "    name   = \"options.amazon-side-asn\"",
      "    values = [\"64512\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-ec2_transit_gateway_dx_gateway_attachment": {
    "description": "Defines ec2_transit_gateway_dx_gateway_attachment",
    "prefix": "tf-aws-data-ec2_transit_gateway_dx_gateway_attachment",
    "body": [
      "data \"aws_ec2_transit_gateway_dx_gateway_attachment\" \"example\" {",
      "  transit_gateway_id = aws_ec2_transit_gateway.example.id",
      "  dx_gateway_id      = aws_dx_gateway.example.id",
      "}"
    ]
  },
  "aws-data-ec2_transit_gateway_peering_attachment": {
    "description": "Defines ec2_transit_gateway_peering_attachment",
    "prefix": "tf-aws-data-ec2_transit_gateway_peering_attachment",
    "body": [
      "data \"aws_ec2_transit_gateway_peering_attachment\" \"example\" {",
      "  filter {",
      "    name   = \"transit-gateway-attachment-id\"",
      "    values = [\"tgw-attach-12345678\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-ec2_transit_gateway_route_table": {
    "description": "Defines ec2_transit_gateway_route_table",
    "prefix": "tf-aws-data-ec2_transit_gateway_route_table",
    "body": [
      "data \"aws_ec2_transit_gateway_route_table\" \"example\" {",
      "  filter {",
      "    name   = \"default-association-route-table\"",
      "    values = [\"true\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"transit-gateway-id\"",
      "    values = [\"tgw-12345678\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-ec2_transit_gateway_vpc_attachment": {
    "description": "Defines ec2_transit_gateway_vpc_attachment",
    "prefix": "tf-aws-data-ec2_transit_gateway_vpc_attachment",
    "body": [
      "data \"aws_ec2_transit_gateway_vpc_attachment\" \"example\" {",
      "  filter {",
      "    name   = \"vpc-id\"",
      "    values = [\"vpc-12345678\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-ec2_transit_gateway_vpn_attachment": {
    "description": "Defines ec2_transit_gateway_vpn_attachment",
    "prefix": "tf-aws-data-ec2_transit_gateway_vpn_attachment",
    "body": [
      "data \"aws_ec2_transit_gateway_vpn_attachment\" \"example\" {",
      "  transit_gateway_id = aws_ec2_transit_gateway.example.id",
      "  vpn_connection_id  = aws_vpn_connection.example.id",
      "}"
    ]
  },
  "aws-data-ecr_authorization_token": {
    "description": "Defines ecr_authorization_token",
    "prefix": "tf-aws-data-ecr_authorization_token",
    "body": [
      "data \"aws_ecr_authorization_token\" \"token\" {",
      "}"
    ]
  },
  "aws-data-ecr_image": {
    "description": "Defines ecr_image",
    "prefix": "tf-aws-data-ecr_image",
    "body": [
      "data \"aws_ecr_image\" \"service_image\" {",
      "  repository_name = \"my/service\"",
      "  image_tag       = \"latest\"",
      "}"
    ]
  },
  "aws-data-ecr_repository": {
    "description": "Defines ecr_repository",
    "prefix": "tf-aws-data-ecr_repository",
    "body": [
      "data \"aws_ecr_repository\" \"service\" {",
      "  name = \"ecr-repository\"",
      "}"
    ]
  },
  "aws-data-ecs_cluster": {
    "description": "Defines ecs_cluster",
    "prefix": "tf-aws-data-ecs_cluster",
    "body": [
      "data \"aws_ecs_cluster\" \"ecs-mongo\" {",
      "  cluster_name = \"ecs-mongo-production\"",
      "}"
    ]
  },
  "aws-data-ecs_container_definition": {
    "description": "Defines ecs_container_definition",
    "prefix": "tf-aws-data-ecs_container_definition",
    "body": [
      "data \"aws_ecs_container_definition\" \"ecs-mongo\" {",
      "  task_definition = aws_ecs_task_definition.mongo.id",
      "  container_name  = \"mongodb\"",
      "}"
    ]
  },
  "aws-data-ecs_service": {
    "description": "Defines ecs_service",
    "prefix": "tf-aws-data-ecs_service",
    "body": [
      "data \"aws_ecs_service\" \"example\" {",
      "  service_name = \"example\"",
      "  cluster_arn  = data.aws_ecs_cluster.example.arn",
      "}"
    ]
  },
  "aws-data-ecs_task_definition": {
    "description": "Defines ecs_task_definition",
    "prefix": "tf-aws-data-ecs_task_definition",
    "body": [
      "# Simply specify the family to find the latest ACTIVE revision in that family.",
      "data \"aws_ecs_task_definition\" \"mongo\" {",
      "  task_definition = aws_ecs_task_definition.mongo.family",
      "}",
      "",
      "resource \"aws_ecs_cluster\" \"foo\" {",
      "  name = \"foo\"",
      "}",
      "",
      "resource \"aws_ecs_task_definition\" \"mongo\" {",
      "  family = \"mongodb\"",
      "",
      "  container_definitions = <<DEFINITION",
      "[",
      "  {",
      "    \"cpu\": 128,",
      "    \"environment\": [{",
      "      \"name\": \"SECRET\",",
      "      \"value\": \"KEY\"",
      "    }],",
      "    \"essential\": true,",
      "    \"image\": \"mongo:latest\",",
      "    \"memory\": 128,",
      "    \"memoryReservation\": 64,",
      "    \"name\": \"mongodb\"",
      "  }",
      "]",
      "DEFINITION",
      "}",
      "",
      "resource \"aws_ecs_service\" \"mongo\" {",
      "  name          = \"mongo\"",
      "  cluster       = aws_ecs_cluster.foo.id",
      "  desired_count = 2",
      "",
      "  # Track the latest ACTIVE revision",
      "  task_definition = \"${aws_ecs_task_definition.mongo.family}:${max(aws_ecs_task_definition.mongo.revision, data.aws_ecs_task_definition.mongo.revision)}\"",
      "}"
    ]
  },
  "aws-data-efs_access_point": {
    "description": "Defines efs_access_point",
    "prefix": "tf-aws-data-efs_access_point",
    "body": [
      "data \"aws_efs_access_point\" \"test\" {",
      "  access_point_id = \"fsap-12345678\"",
      "}"
    ]
  },
  "aws-data-efs_access_points": {
    "description": "Defines efs_access_points",
    "prefix": "tf-aws-data-efs_access_points",
    "body": [
      "data \"aws_efs_access_points\" \"test\" {",
      "  file_system_id = \"fs-12345678\"",
      "}"
    ]
  },
  "aws-data-efs_file_system": {
    "description": "Defines efs_file_system",
    "prefix": "tf-aws-data-efs_file_system",
    "body": [
      "variable \"file_system_id\" {",
      "  type    = string",
      "  default = \"\"",
      "}",
      "",
      "data \"aws_efs_file_system\" \"by_id\" {",
      "  file_system_id = var.file_system_id",
      "}"
    ]
  },
  "aws-data-efs_mount_target": {
    "description": "Defines efs_mount_target",
    "prefix": "tf-aws-data-efs_mount_target",
    "body": [
      "variable \"mount_target_id\" {",
      "  type    = string",
      "  default = \"\"",
      "}",
      "",
      "data \"aws_efs_mount_target\" \"by_id\" {",
      "  mount_target_id = var.mount_target_id",
      "}"
    ]
  },
  "aws-data-eip": {
    "description": "Defines eip",
    "prefix": "tf-aws-data-eip",
    "body": [
      "data \"aws_eip\" \"by_allocation_id\" {",
      "  id = \"eipalloc-12345678\"",
      "}"
    ]
  },
  "aws-data-eks_cluster": {
    "description": "Defines eks_cluster",
    "prefix": "tf-aws-data-eks_cluster",
    "body": [
      "data \"aws_eks_cluster\" \"example\" {",
      "  name = \"example\"",
      "}",
      "",
      "output \"endpoint\" {",
      "  value = data.aws_eks_cluster.example.endpoint",
      "}",
      "",
      "output \"kubeconfig-certificate-authority-data\" {",
      "  value = data.aws_eks_cluster.example.certificate_authority[0].data",
      "}",
      "",
      "# Only available on Kubernetes version 1.13 and 1.14 clusters created or upgraded on or after September 3, 2019.",
      "output \"identity-oidc-issuer\" {",
      "  value = data.aws_eks_cluster.example.identity[0].oidc[0].issuer",
      "}"
    ]
  },
  "aws-data-eks_cluster_auth": {
    "description": "Defines eks_cluster_auth",
    "prefix": "tf-aws-data-eks_cluster_auth",
    "body": [
      "data \"aws_eks_cluster\" \"example\" {",
      "  name = \"example\"",
      "}",
      "",
      "data \"aws_eks_cluster_auth\" \"example\" {",
      "  name = \"example\"",
      "}",
      "",
      "provider \"kubernetes\" {",
      "  host                   = data.aws_eks_cluster.example.endpoint",
      "  cluster_ca_certificate = base64decode(data.aws_eks_cluster.example.certificate_authority[0].data)",
      "  token                  = data.aws_eks_cluster_auth.example.token",
      "  load_config_file       = false",
      "}"
    ]
  },
  "aws-data-elastic_beanstalk_application": {
    "description": "Defines elastic_beanstalk_application",
    "prefix": "tf-aws-data-elastic_beanstalk_application",
    "body": [
      "data \"aws_elastic_beanstalk_application\" \"example\" {",
      "  name = \"example\"",
      "}",
      "",
      "output \"arn\" {",
      "  value = data.aws_elastic_beanstalk_application.example.arn",
      "}",
      "",
      "output \"description\" {",
      "  value = data.aws_elastic_beanstalk_application.example.description",
      "}"
    ]
  },
  "aws-data-elastic_beanstalk_hosted_zone": {
    "description": "Defines elastic_beanstalk_hosted_zone",
    "prefix": "tf-aws-data-elastic_beanstalk_hosted_zone",
    "body": [
      "data \"aws_elastic_beanstalk_hosted_zone\" \"current\" {}"
    ]
  },
  "aws-data-elastic_beanstalk_solution_stack": {
    "description": "Defines elastic_beanstalk_solution_stack",
    "prefix": "tf-aws-data-elastic_beanstalk_solution_stack",
    "body": [
      "data \"aws_elastic_beanstalk_solution_stack\" \"multi_docker\" {",
      "  most_recent = true",
      "",
      "  name_regex = \"^64bit Amazon Linux (.*) Multi-container Docker (.*)$\"",
      "}"
    ]
  },
  "aws-data-elasticache_cluster": {
    "description": "Defines elasticache_cluster",
    "prefix": "tf-aws-data-elasticache_cluster",
    "body": [
      "data \"aws_elasticache_cluster\" \"my_cluster\" {",
      "  cluster_id = \"my-cluster-id\"",
      "}"
    ]
  },
  "aws-data-elasticache_replication_group": {
    "description": "Defines elasticache_replication_group",
    "prefix": "tf-aws-data-elasticache_replication_group",
    "body": [
      "data \"aws_elasticache_replication_group\" \"bar\" {",
      "  replication_group_id = \"example\"",
      "}"
    ]
  },
  "aws-data-elasticsearch_domain": {
    "description": "Defines elasticsearch_domain",
    "prefix": "tf-aws-data-elasticsearch_domain",
    "body": [
      "data \"aws_elasticsearch_domain\" \"my_domain\" {",
      "  domain_name = \"my-domain-name\"",
      "}"
    ]
  },
  "aws-data-elb": {
    "description": "Defines elb",
    "prefix": "tf-aws-data-elb",
    "body": [
      "variable \"lb_name\" {",
      "  type    = string",
      "  default = \"\"",
      "}",
      "",
      "data \"aws_elb\" \"test\" {",
      "  name = var.lb_name",
      "}"
    ]
  },
  "aws-data-elb_hosted_zone_id": {
    "description": "Defines elb_hosted_zone_id",
    "prefix": "tf-aws-data-elb_hosted_zone_id",
    "body": [
      "data \"aws_elb_hosted_zone_id\" \"main\" {}",
      "",
      "resource \"aws_route53_record\" \"www\" {",
      "  zone_id = aws_route53_zone.primary.zone_id",
      "  name    = \"example.com\"",
      "  type    = \"A\"",
      "",
      "  alias {",
      "    name                   = aws_elb.main.dns_name",
      "    zone_id                = data.aws_elb_hosted_zone_id.main.id",
      "    evaluate_target_health = true",
      "  }",
      "}"
    ]
  },
  "aws-data-elb_service_account": {
    "description": "Defines elb_service_account",
    "prefix": "tf-aws-data-elb_service_account",
    "body": [
      "data \"aws_elb_service_account\" \"main\" {}",
      "",
      "resource \"aws_s3_bucket\" \"elb_logs\" {",
      "  bucket = \"my-elb-tf-test-bucket\"",
      "  acl    = \"private\"",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Id\": \"Policy\",",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"s3:PutObject\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"arn:aws:s3:::my-elb-tf-test-bucket/AWSLogs/*\",",
      "      \"Principal\": {",
      "        \"AWS\": [",
      "          \"${data.aws_elb_service_account.main.arn}\"",
      "        ]",
      "      }",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_elb\" \"bar\" {",
      "  name               = \"my-foobar-terraform-elb\"",
      "  availability_zones = [\"us-west-2a\"]",
      "",
      "  access_logs {",
      "    bucket   = aws_s3_bucket.elb_logs.bucket",
      "    interval = 5",
      "  }",
      "",
      "  listener {",
      "    instance_port     = 8000",
      "    instance_protocol = \"http\"",
      "    lb_port           = 80",
      "    lb_protocol       = \"http\"",
      "  }",
      "}"
    ]
  },
  "aws-data-glue_script": {
    "description": "Defines glue_script",
    "prefix": "tf-aws-data-glue_script",
    "body": [
      "data \"aws_glue_script\" \"example\" {",
      "  language = \"PYTHON\"",
      "",
      "  dag_edge {",
      "    source = \"datasource0\"",
      "    target = \"applymapping1\"",
      "  }",
      "",
      "  dag_edge {",
      "    source = \"applymapping1\"",
      "    target = \"selectfields2\"",
      "  }",
      "",
      "  dag_edge {",
      "    source = \"selectfields2\"",
      "    target = \"resolvechoice3\"",
      "  }",
      "",
      "  dag_edge {",
      "    source = \"resolvechoice3\"",
      "    target = \"datasink4\"",
      "  }",
      "",
      "  dag_node {",
      "    id        = \"datasource0\"",
      "    node_type = \"DataSource\"",
      "",
      "    args {",
      "      name  = \"database\"",
      "      value = \"\\\"${aws_glue_catalog_database.source.name}\\\"\"",
      "    }",
      "",
      "    args {",
      "      name  = \"table_name\"",
      "      value = \"\\\"${aws_glue_catalog_table.source.name}\\\"\"",
      "    }",
      "  }",
      "",
      "  dag_node {",
      "    id        = \"applymapping1\"",
      "    node_type = \"ApplyMapping\"",
      "",
      "    args {",
      "      name  = \"mapping\"",
      "      value = \"[(\\\"column1\\\", \\\"string\\\", \\\"column1\\\", \\\"string\\\")]\"",
      "    }",
      "  }",
      "",
      "  dag_node {",
      "    id        = \"selectfields2\"",
      "    node_type = \"SelectFields\"",
      "",
      "    args {",
      "      name  = \"paths\"",
      "      value = \"[\\\"column1\\\"]\"",
      "    }",
      "  }",
      "",
      "  dag_node {",
      "    id        = \"resolvechoice3\"",
      "    node_type = \"ResolveChoice\"",
      "",
      "    args {",
      "      name  = \"choice\"",
      "      value = \"\\\"MATCH_CATALOG\\\"\"",
      "    }",
      "",
      "    args {",
      "      name  = \"database\"",
      "      value = \"\\\"${aws_glue_catalog_database.destination.name}\\\"\"",
      "    }",
      "",
      "    args {",
      "      name  = \"table_name\"",
      "      value = \"\\\"${aws_glue_catalog_table.destination.name}\\\"\"",
      "    }",
      "  }",
      "",
      "  dag_node {",
      "    id        = \"datasink4\"",
      "    node_type = \"DataSink\"",
      "",
      "    args {",
      "      name  = \"database\"",
      "      value = \"\\\"${aws_glue_catalog_database.destination.name}\\\"\"",
      "    }",
      "",
      "    args {",
      "      name  = \"table_name\"",
      "      value = \"\\\"${aws_glue_catalog_table.destination.name}\\\"\"",
      "    }",
      "  }",
      "}",
      "",
      "output \"python_script\" {",
      "  value = data.aws_glue_script.example.python_script",
      "}"
    ]
  },
  "aws-data-guardduty_detector": {
    "description": "Defines guardduty_detector",
    "prefix": "tf-aws-data-guardduty_detector",
    "body": [
      "data \"aws_guardduty_detector\" \"example\" {}"
    ]
  },
  "aws-data-iam_account_alias": {
    "description": "Defines iam_account_alias",
    "prefix": "tf-aws-data-iam_account_alias",
    "body": [
      "data \"aws_iam_account_alias\" \"current\" {}",
      "",
      "output \"account_id\" {",
      "  value = data.aws_iam_account_alias.current.account_alias",
      "}"
    ]
  },
  "aws-data-iam_group": {
    "description": "Defines iam_group",
    "prefix": "tf-aws-data-iam_group",
    "body": [
      "data \"aws_iam_group\" \"example\" {",
      "  group_name = \"an_example_group_name\"",
      "}"
    ]
  },
  "aws-data-iam_instance_profile": {
    "description": "Defines iam_instance_profile",
    "prefix": "tf-aws-data-iam_instance_profile",
    "body": [
      "data \"aws_iam_instance_profile\" \"example\" {",
      "  name = \"an_example_instance_profile_name\"",
      "}"
    ]
  },
  "aws-data-iam_policy": {
    "description": "Defines iam_policy",
    "prefix": "tf-aws-data-iam_policy",
    "body": [
      "data \"aws_iam_policy\" \"example\" {",
      "  arn = \"arn:aws:iam::123456789012:policy/UsersManageOwnCredentials\"",
      "}"
    ]
  },
  "aws-data-iam_policy_document": {
    "description": "Defines iam_policy_document",
    "prefix": "tf-aws-data-iam_policy_document",
    "body": [
      "data \"aws_iam_policy_document\" \"example\" {",
      "  statement {",
      "    sid = \"1\"",
      "",
      "    actions = [",
      "      \"s3:ListAllMyBuckets\",",
      "      \"s3:GetBucketLocation\",",
      "    ]",
      "",
      "    resources = [",
      "      \"arn:aws:s3:::*\",",
      "    ]",
      "  }",
      "",
      "  statement {",
      "    actions = [",
      "      \"s3:ListBucket\",",
      "    ]",
      "",
      "    resources = [",
      "      \"arn:aws:s3:::${var.s3_bucket_name}\",",
      "    ]",
      "",
      "    condition {",
      "      test     = \"StringLike\"",
      "      variable = \"s3:prefix\"",
      "",
      "      values = [",
      "        \"\",",
      "        \"home/\",",
      "        \"home/&{aws:username}/\",",
      "      ]",
      "    }",
      "  }",
      "",
      "  statement {",
      "    actions = [",
      "      \"s3:*\",",
      "    ]",
      "",
      "    resources = [",
      "      \"arn:aws:s3:::${var.s3_bucket_name}/home/&{aws:username}\",",
      "      \"arn:aws:s3:::${var.s3_bucket_name}/home/&{aws:username}/*\",",
      "    ]",
      "  }",
      "}",
      "",
      "resource \"aws_iam_policy\" \"example\" {",
      "  name   = \"example_policy\"",
      "  path   = \"/\"",
      "  policy = data.aws_iam_policy_document.example.json",
      "}"
    ]
  },
  "aws-data-iam_role": {
    "description": "Defines iam_role",
    "prefix": "tf-aws-data-iam_role",
    "body": [
      "data \"aws_iam_role\" \"example\" {",
      "  name = \"an_example_role_name\"",
      "}"
    ]
  },
  "aws-data-iam_server_certificate": {
    "description": "Defines iam_server_certificate",
    "prefix": "tf-aws-data-iam_server_certificate",
    "body": [
      "data \"aws_iam_server_certificate\" \"my-domain\" {",
      "  name_prefix = \"my-domain.org\"",
      "  latest      = true",
      "}",
      "",
      "resource \"aws_elb\" \"elb\" {",
      "  name = \"my-domain-elb\"",
      "",
      "  listener {",
      "    instance_port      = 8000",
      "    instance_protocol  = \"https\"",
      "    lb_port            = 443",
      "    lb_protocol        = \"https\"",
      "    ssl_certificate_id = data.aws_iam_server_certificate.my-domain.arn",
      "  }",
      "}"
    ]
  },
  "aws-data-iam_user": {
    "description": "Defines iam_user",
    "prefix": "tf-aws-data-iam_user",
    "body": [
      "data \"aws_iam_user\" \"example\" {",
      "  user_name = \"an_example_user_name\"",
      "}"
    ]
  },
  "aws-data-identitystore_group": {
    "description": "Defines identitystore_group",
    "prefix": "tf-aws-data-identitystore_group",
    "body": [
      "data \"aws_ssoadmin_instances\" \"example\" {}",
      "",
      "data \"aws_identitystore_group\" \"example\" {",
      "  identity_store_id = tolist(data.aws_ssoadmin_instances.example.identity_store_ids)[0]",
      "",
      "  filter {",
      "    attribute_path  = \"DisplayName\"",
      "    attribute_value = \"ExampleGroup\"",
      "  }",
      "}",
      "",
      "output \"group_id\" {",
      "  value = data.aws_identitystore_group.example.group_id",
      "}"
    ]
  },
  "aws-data-identitystore_user": {
    "description": "Defines identitystore_user",
    "prefix": "tf-aws-data-identitystore_user",
    "body": [
      "data \"aws_ssoadmin_instances\" \"example\" {}",
      "",
      "data \"aws_identitystore_user\" \"example\" {",
      "  identity_store_id = tolist(data.aws_ssoadmin_instances.example.identity_store_ids)[0]",
      "",
      "  filter {",
      "    attribute_path  = \"UserName\"",
      "    attribute_value = \"ExampleUser\"",
      "  }",
      "}",
      "",
      "output \"user_id\" {",
      "  value = data.aws_identitystore_user.example.user_id",
      "}"
    ]
  },
  "aws-data-imagebuilder_component": {
    "description": "Defines imagebuilder_component",
    "prefix": "tf-aws-data-imagebuilder_component",
    "body": [
      "data \"aws_imagebuilder_component\" \"example\" {",
      "  arn = \"arn:aws:imagebuilder:us-west-2:aws:component/amazon-cloudwatch-agent-linux/1.0.0\"",
      "}"
    ]
  },
  "aws-data-imagebuilder_distribution_configuration": {
    "description": "Defines imagebuilder_distribution_configuration",
    "prefix": "tf-aws-data-imagebuilder_distribution_configuration",
    "body": [
      "data \"aws_imagebuilder_distribution_configuration\" \"example\" {",
      "  arn = \"arn:aws:imagebuilder:us-west-2:aws:distribution-configuration/example\"",
      "}"
    ]
  },
  "aws-data-imagebuilder_image": {
    "description": "Defines imagebuilder_image",
    "prefix": "tf-aws-data-imagebuilder_image",
    "body": [
      "data \"aws_imagebuilder_image\" \"example\" {",
      "  arn = \"arn:aws:imagebuilder:us-west-2:aws:image/amazon-linux-2-x86/x.x.x\"",
      "}"
    ]
  },
  "aws-data-imagebuilder_image_pipeline": {
    "description": "Defines imagebuilder_image_pipeline",
    "prefix": "tf-aws-data-imagebuilder_image_pipeline",
    "body": [
      "data \"aws_imagebuilder_image_pipeline\" \"example\" {",
      "  arn = \"arn:aws:imagebuilder:us-west-2:aws:image-pipeline/example\"",
      "}"
    ]
  },
  "aws-data-imagebuilder_image_recipe": {
    "description": "Defines imagebuilder_image_recipe",
    "prefix": "tf-aws-data-imagebuilder_image_recipe",
    "body": [
      "data \"aws_imagebuilder_image_recipe\" \"example\" {",
      "  arn = \"arn:aws:imagebuilder:us-east-1:aws:image-recipe/example/1.0.0\"",
      "}"
    ]
  },
  "aws-data-imagebuilder_infrastructure_configuration": {
    "description": "Defines imagebuilder_infrastructure_configuration",
    "prefix": "tf-aws-data-imagebuilder_infrastructure_configuration",
    "body": [
      "data \"aws_imagebuilder_infrastructure_configuration\" \"example\" {",
      "  arn = \"arn:aws:imagebuilder:us-west-2:aws:infrastructure-configuration/example\"",
      "}"
    ]
  },
  "aws-data-inspector_rules_packages": {
    "description": "Defines inspector_rules_packages",
    "prefix": "tf-aws-data-inspector_rules_packages",
    "body": [
      "# Declare the data source",
      "data \"aws_inspector_rules_packages\" \"rules\" {}",
      "",
      "# e.g. Use in aws_inspector_assessment_template",
      "resource \"aws_inspector_resource_group\" \"group\" {",
      "  tags = {",
      "    test = \"test\"",
      "  }",
      "}",
      "",
      "resource \"aws_inspector_assessment_target\" \"assessment\" {",
      "  name               = \"test\"",
      "  resource_group_arn = aws_inspector_resource_group.group.arn",
      "}",
      "",
      "resource \"aws_inspector_assessment_template\" \"assessment\" {",
      "  name       = \"Test\"",
      "  target_arn = aws_inspector_assessment_target.assessment.arn",
      "  duration   = \"60\"",
      "",
      "  rules_package_arns = data.aws_inspector_rules_packages.rules.arns",
      "}"
    ]
  },
  "aws-data-instance": {
    "description": "Defines instance",
    "prefix": "tf-aws-data-instance",
    "body": [
      "data \"aws_instance\" \"foo\" {",
      "  instance_id = \"i-instanceid\"",
      "",
      "  filter {",
      "    name   = \"image-id\"",
      "    values = [\"ami-xxxxxxxx\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"tag:Name\"",
      "    values = [\"instance-name-tag\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-instances": {
    "description": "Defines instances",
    "prefix": "tf-aws-data-instances",
    "body": [
      "data \"aws_instances\" \"test\" {",
      "  instance_tags = {",
      "    Role = \"HardWorker\"",
      "  }",
      "",
      "  filter {",
      "    name   = \"instance.group-id\"",
      "    values = [\"sg-12345678\"]",
      "  }",
      "",
      "  instance_state_names = [\"running\", \"stopped\"]",
      "}",
      "",
      "resource \"aws_eip\" \"test\" {",
      "  count    = length(data.aws_instances.test.ids)",
      "  instance = data.aws_instances.test.ids[count.index]",
      "}"
    ]
  },
  "aws-data-internet_gateway": {
    "description": "Defines internet_gateway",
    "prefix": "tf-aws-data-internet_gateway",
    "body": [
      "variable \"vpc_id\" {}",
      "",
      "data \"aws_internet_gateway\" \"default\" {",
      "  filter {",
      "    name   = \"attachment.vpc-id\"",
      "    values = [var.vpc_id]",
      "  }",
      "}"
    ]
  },
  "aws-data-iot_endpoint": {
    "description": "Defines iot_endpoint",
    "prefix": "tf-aws-data-iot_endpoint",
    "body": [
      "data \"aws_iot_endpoint\" \"example\" {}",
      "",
      "resource \"kubernetes_pod\" \"agent\" {",
      "  metadata {",
      "    name = \"my-device\"",
      "  }",
      "",
      "  spec {",
      "    container {",
      "      image = \"gcr.io/my-project/image-name\"",
      "      name  = \"image-name\"",
      "",
      "      env {",
      "        name  = \"IOT_ENDPOINT\"",
      "        value = data.aws_iot_endpoint.example.endpoint_address",
      "      }",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-data-ip_ranges": {
    "description": "Defines ip_ranges",
    "prefix": "tf-aws-data-ip_ranges",
    "body": [
      "data \"aws_ip_ranges\" \"european_ec2\" {",
      "  regions  = [\"eu-west-1\", \"eu-central-1\"]",
      "  services = [\"ec2\"]",
      "}",
      "",
      "resource \"aws_security_group\" \"from_europe\" {",
      "  name = \"from_europe\"",
      "",
      "  ingress {",
      "    from_port        = \"443\"",
      "    to_port          = \"443\"",
      "    protocol         = \"tcp\"",
      "    cidr_blocks      = data.aws_ip_ranges.european_ec2.cidr_blocks",
      "    ipv6_cidr_blocks = data.aws_ip_ranges.european_ec2.ipv6_cidr_blocks",
      "  }",
      "",
      "  tags = {",
      "    CreateDate = data.aws_ip_ranges.european_ec2.create_date",
      "    SyncToken  = data.aws_ip_ranges.european_ec2.sync_token",
      "  }",
      "}"
    ]
  },
  "aws-data-kinesis_stream": {
    "description": "Defines kinesis_stream",
    "prefix": "tf-aws-data-kinesis_stream",
    "body": [
      "data \"aws_kinesis_stream\" \"stream\" {",
      "  name = \"stream-name\"",
      "}"
    ]
  },
  "aws-data-kms_alias": {
    "description": "Defines kms_alias",
    "prefix": "tf-aws-data-kms_alias",
    "body": [
      "data \"aws_kms_alias\" \"s3\" {",
      "  name = \"alias/aws/s3\"",
      "}"
    ]
  },
  "aws-data-kms_ciphertext": {
    "description": "Defines kms_ciphertext",
    "prefix": "tf-aws-data-kms_ciphertext",
    "body": [
      "resource \"aws_kms_key\" \"oauth_config\" {",
      "  description = \"oauth config\"",
      "  is_enabled  = true",
      "}",
      "",
      "data \"aws_kms_ciphertext\" \"oauth\" {",
      "  key_id = aws_kms_key.oauth_config.key_id",
      "",
      "  plaintext = <<EOF",
      "{",
      "  \"client_id\": \"e587dbae22222f55da22\",",
      "  \"client_secret\": \"8289575d00000ace55e1815ec13673955721b8a5\"",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-data-kms_key": {
    "description": "Defines kms_key",
    "prefix": "tf-aws-data-kms_key",
    "body": [
      "data \"aws_kms_key\" \"by_alias\" {",
      "  key_id = \"alias/my-key\"",
      "}",
      "",
      "data \"aws_kms_key\" \"by_id\" {",
      "  key_id = \"1234abcd-12ab-34cd-56ef-1234567890ab\"",
      "}",
      "",
      "data \"aws_kms_key\" \"by_alias_arn\" {",
      "  key_id = \"arn:aws:kms:us-east-1:111122223333:alias/my-key\"",
      "}",
      "",
      "data \"aws_kms_key\" \"by_key_arn\" {",
      "  key_id = \"arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"",
      "}"
    ]
  },
  "aws-data-kms_secret": {
    "description": "Defines kms_secret",
    "prefix": "tf-aws-data-kms_secret",
    "body": [
      "# XXX: no example found in the provider docs",
      ""
    ]
  },
  "aws-data-kms_secrets": {
    "description": "Defines kms_secrets",
    "prefix": "tf-aws-data-kms_secrets",
    "body": [
      "$ echo -n 'master-password' > plaintext-password",
      "$ aws kms encrypt --key-id ab123456-c012-4567-890a-deadbeef123 --plaintext fileb://plaintext-password --encryption-context foo=bar --output text --query CiphertextBlob",
      "AQECAHgaPa0J8WadplGCqqVAr4HNvDaFSQ+NaiwIBhmm6qDSFwAAAGIwYAYJKoZIhvcNAQcGoFMwUQIBADBMBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDI+LoLdvYv8l41OhAAIBEIAfx49FFJCLeYrkfMfAw6XlnxP23MmDBdqP8dPp28OoAQ=="
    ]
  },
  "aws-data-lakeformation_data_lake_settings": {
    "description": "Defines lakeformation_data_lake_settings",
    "prefix": "tf-aws-data-lakeformation_data_lake_settings",
    "body": [
      "data \"aws_lakeformation_data_lake_settings\" \"example\" {",
      "  catalog_id = \"14916253649\"",
      "}"
    ]
  },
  "aws-data-lakeformation_permissions": {
    "description": "Defines lakeformation_permissions",
    "prefix": "tf-aws-data-lakeformation_permissions",
    "body": [
      "data \"aws_lakeformation_permissions\" \"test\" {",
      "  principal = aws_iam_role.workflow_role.arn",
      "",
      "  data_location {",
      "    arn = aws_lakeformation_resource.test.arn",
      "  }",
      "}"
    ]
  },
  "aws-data-lakeformation_resource": {
    "description": "Defines lakeformation_resource",
    "prefix": "tf-aws-data-lakeformation_resource",
    "body": [
      "data \"aws_lakeformation_resource\" \"example\" {",
      "  arn = \"arn:aws:s3:::tf-acc-test-9151654063908211878\"",
      "}"
    ]
  },
  "aws-data-lambda_alias": {
    "description": "Defines lambda_alias",
    "prefix": "tf-aws-data-lambda_alias",
    "body": [
      "data \"aws_lambda_alias\" \"production\" {",
      "  function_name = \"my-lambda-func\"",
      "  name          = \"production\"",
      "}"
    ]
  },
  "aws-data-lambda_code_signing_config": {
    "description": "Defines lambda_code_signing_config",
    "prefix": "tf-aws-data-lambda_code_signing_config",
    "body": [
      "data \"aws_lambda_code_signing_config\" \"existing_csc\" {",
      "  arn = \"arn:aws:lambda:${var.aws_region}:${var.aws_account}:code-signing-config:csc-0f6c334abcdea4d8b\"",
      "}"
    ]
  },
  "aws-data-lambda_function": {
    "description": "Defines lambda_function",
    "prefix": "tf-aws-data-lambda_function",
    "body": [
      "variable \"function_name\" {",
      "  type = string",
      "}",
      "",
      "data \"aws_lambda_function\" \"existing\" {",
      "  function_name = var.function_name",
      "}"
    ]
  },
  "aws-data-lambda_invocation": {
    "description": "Defines lambda_invocation",
    "prefix": "tf-aws-data-lambda_invocation",
    "body": [
      "data \"aws_lambda_invocation\" \"example\" {",
      "  function_name = aws_lambda_function.lambda_function_test.function_name",
      "",
      "  input = <<JSON",
      "{",
      "  \"key1\": \"value1\",",
      "  \"key2\": \"value2\"",
      "}",
      "JSON",
      "}",
      "",
      "output \"result_entry\" {",
      "  value = jsondecode(data.aws_lambda_invocation.example.result)[\"key1\"]",
      "}"
    ]
  },
  "aws-data-lambda_layer_version": {
    "description": "Defines lambda_layer_version",
    "prefix": "tf-aws-data-lambda_layer_version",
    "body": [
      "variable \"layer_name\" {",
      "  type = string",
      "}",
      "",
      "data \"aws_lambda_layer_version\" \"existing\" {",
      "  layer_name = var.layer_name",
      "}"
    ]
  },
  "aws-data-launch_configuration": {
    "description": "Defines launch_configuration",
    "prefix": "tf-aws-data-launch_configuration",
    "body": [
      "data \"aws_launch_configuration\" \"ubuntu\" {",
      "  name = \"test-launch-config\"",
      "}"
    ]
  },
  "aws-data-launch_template": {
    "description": "Defines launch_template",
    "prefix": "tf-aws-data-launch_template",
    "body": [
      "data \"aws_launch_template\" \"default\" {",
      "  name = \"my-launch-template\"",
      "}"
    ]
  },
  "aws-data-lb": {
    "description": "Defines lb",
    "prefix": "tf-aws-data-lb",
    "body": [
      "variable \"lb_arn\" {",
      "  type    = string",
      "  default = \"\"",
      "}",
      "",
      "variable \"lb_name\" {",
      "  type    = string",
      "  default = \"\"",
      "}",
      "",
      "data \"aws_lb\" \"test\" {",
      "  arn  = var.lb_arn",
      "  name = var.lb_name",
      "}"
    ]
  },
  "aws-data-lb_listener": {
    "description": "Defines lb_listener",
    "prefix": "tf-aws-data-lb_listener",
    "body": [
      "# get listener from listener arn",
      "",
      "variable \"listener_arn\" {",
      "  type = string",
      "}",
      "",
      "data \"aws_lb_listener\" \"listener\" {",
      "  arn = var.listener_arn",
      "}",
      "",
      "# get listener from load_balancer_arn and port",
      "",
      "data \"aws_lb\" \"selected\" {",
      "  name = \"default-public\"",
      "}",
      "",
      "data \"aws_lb_listener\" \"selected443\" {",
      "  load_balancer_arn = data.aws_lb.selected.arn",
      "  port              = 443",
      "}"
    ]
  },
  "aws-data-lb_target_group": {
    "description": "Defines lb_target_group",
    "prefix": "tf-aws-data-lb_target_group",
    "body": [
      "variable \"lb_tg_arn\" {",
      "  type    = string",
      "  default = \"\"",
      "}",
      "",
      "variable \"lb_tg_name\" {",
      "  type    = string",
      "  default = \"\"",
      "}",
      "",
      "data \"aws_lb_target_group\" \"test\" {",
      "  arn  = var.lb_tg_arn",
      "  name = var.lb_tg_name",
      "}"
    ]
  },
  "aws-data-lex_bot": {
    "description": "Defines lex_bot",
    "prefix": "tf-aws-data-lex_bot",
    "body": [
      "data \"aws_lex_bot\" \"order_flowers_bot\" {",
      "  name    = \"OrderFlowers\"",
      "  version = \"$LATEST\"",
      "}"
    ]
  },
  "aws-data-lex_bot_alias": {
    "description": "Defines lex_bot_alias",
    "prefix": "tf-aws-data-lex_bot_alias",
    "body": [
      "data \"aws_lex_bot_alias\" \"order_flowers_prod\" {",
      "  bot_name = \"OrderFlowers\"",
      "  name     = \"OrderFlowersProd\"",
      "}"
    ]
  },
  "aws-data-lex_intent": {
    "description": "Defines lex_intent",
    "prefix": "tf-aws-data-lex_intent",
    "body": [
      "data \"aws_lex_intent\" \"order_flowers\" {",
      "  name    = \"OrderFlowers\"",
      "  version = \"$LATEST\"",
      "}"
    ]
  },
  "aws-data-lex_slot_type": {
    "description": "Defines lex_slot_type",
    "prefix": "tf-aws-data-lex_slot_type",
    "body": [
      "data \"aws_lex_slot_type\" \"flower_types\" {",
      "  name    = \"FlowerTypes\"",
      "  version = \"1\"",
      "}"
    ]
  },
  "aws-data-mq_broker": {
    "description": "Defines mq_broker",
    "prefix": "tf-aws-data-mq_broker",
    "body": [
      "variable \"broker_id\" {",
      "  type    = string",
      "  default = \"\"",
      "}",
      "",
      "variable \"broker_name\" {",
      "  type    = string",
      "  default = \"\"",
      "}",
      "",
      "data \"aws_mq_broker\" \"by_id\" {",
      "  broker_id = var.broker_id",
      "}",
      "",
      "data \"aws_mq_broker\" \"by_name\" {",
      "  broker_name = var.broker_name",
      "}"
    ]
  },
  "aws-data-msk_cluster": {
    "description": "Defines msk_cluster",
    "prefix": "tf-aws-data-msk_cluster",
    "body": [
      "data \"aws_msk_cluster\" \"example\" {",
      "  cluster_name = \"example\"",
      "}"
    ]
  },
  "aws-data-msk_configuration": {
    "description": "Defines msk_configuration",
    "prefix": "tf-aws-data-msk_configuration",
    "body": [
      "data \"aws_msk_configuration\" \"example\" {",
      "  name = \"example\"",
      "}"
    ]
  },
  "aws-data-nat_gateway": {
    "description": "Defines nat_gateway",
    "prefix": "tf-aws-data-nat_gateway",
    "body": [
      "variable \"subnet_id\" {}",
      "",
      "data \"aws_nat_gateway\" \"default\" {",
      "  subnet_id = aws_subnet.public.id",
      "}"
    ]
  },
  "aws-data-neptune_engine_version": {
    "description": "Defines neptune_engine_version",
    "prefix": "tf-aws-data-neptune_engine_version",
    "body": [
      "data \"aws_neptune_engine_version\" \"test\" {",
      "  preferred_versions = [\"1.0.3.0\", \"1.0.2.2\", \"1.0.2.1\"]",
      "}"
    ]
  },
  "aws-data-neptune_orderable_db_instance": {
    "description": "Defines neptune_orderable_db_instance",
    "prefix": "tf-aws-data-neptune_orderable_db_instance",
    "body": [
      "data \"aws_neptune_orderable_db_instance\" \"test\" {",
      "  engine_version             = \"1.0.3.0\"",
      "  preferred_instance_classes = [\"db.r5.large\", \"db.r4.large\", \"db.t3.medium\"]",
      "}"
    ]
  },
  "aws-data-network_acls": {
    "description": "Defines network_acls",
    "prefix": "tf-aws-data-network_acls",
    "body": [
      "data \"aws_network_acls\" \"example\" {",
      "  vpc_id = var.vpc_id",
      "}",
      "",
      "output \"example\" {",
      "  value = data.aws_network_acls.example.ids",
      "}"
    ]
  },
  "aws-data-network_interface": {
    "description": "Defines network_interface",
    "prefix": "tf-aws-data-network_interface",
    "body": [
      "data \"aws_network_interface\" \"bar\" {",
      "  id = \"eni-01234567\"",
      "}"
    ]
  },
  "aws-data-network_interfaces": {
    "description": "Defines network_interfaces",
    "prefix": "tf-aws-data-network_interfaces",
    "body": [
      "data \"aws_network_interfaces\" \"example\" {}",
      "",
      "output \"example\" {",
      "  value = data.aws_network_interfaces.example.ids",
      "}"
    ]
  },
  "aws-data-organizations_organization": {
    "description": "Defines organizations_organization",
    "prefix": "tf-aws-data-organizations_organization",
    "body": [
      "data \"aws_organizations_organization\" \"example\" {}",
      "",
      "output \"account_ids\" {",
      "  value = data.aws_organizations_organization.example.accounts[*].id",
      "}"
    ]
  },
  "aws-data-organizations_organizational_units": {
    "description": "Defines organizations_organizational_units",
    "prefix": "tf-aws-data-organizations_organizational_units",
    "body": [
      "data \"aws_organizations_organization\" \"org\" {}",
      "",
      "data \"aws_organizations_organizational_units\" \"ou\" {",
      "  parent_id = data.aws_organizations_organization.org.roots[0].id",
      "}"
    ]
  },
  "aws-data-outposts_outpost": {
    "description": "Defines outposts_outpost",
    "prefix": "tf-aws-data-outposts_outpost",
    "body": [
      "data \"aws_outposts_outpost\" \"example\" {",
      "  name = \"example\"",
      "}"
    ]
  },
  "aws-data-outposts_outpost_instance_type": {
    "description": "Defines outposts_outpost_instance_type",
    "prefix": "tf-aws-data-outposts_outpost_instance_type",
    "body": [
      "data \"aws_outposts_outpost_instance_type\" \"example\" {",
      "  arn                      = data.aws_outposts_outpost.example.arn",
      "  preferred_instance_types = [\"m5.large\", \"m5.4xlarge\"]",
      "}",
      "",
      "resource \"aws_ec2_instance\" \"example\" {",
      "  # ... other configuration ...",
      "",
      "  instance_type = data.aws_outposts_outpost_instance_type.example.instance_type",
      "}"
    ]
  },
  "aws-data-outposts_outpost_instance_types": {
    "description": "Defines outposts_outpost_instance_types",
    "prefix": "tf-aws-data-outposts_outpost_instance_types",
    "body": [
      "data \"aws_outposts_outpost_instance_types\" \"example\" {",
      "  arn = data.aws_outposts_outpost.example.arn",
      "}"
    ]
  },
  "aws-data-outposts_outposts": {
    "description": "Defines outposts_outposts",
    "prefix": "tf-aws-data-outposts_outposts",
    "body": [
      "data \"aws_outposts_outposts\" \"example\" {",
      "  site_id = data.aws_outposts_site.id",
      "}"
    ]
  },
  "aws-data-outposts_site": {
    "description": "Defines outposts_site",
    "prefix": "tf-aws-data-outposts_site",
    "body": [
      "data \"aws_outposts_site\" \"example\" {",
      "  name = \"example\"",
      "}"
    ]
  },
  "aws-data-outposts_sites": {
    "description": "Defines outposts_sites",
    "prefix": "tf-aws-data-outposts_sites",
    "body": [
      "data \"aws_outposts_sites\" \"all\" {}"
    ]
  },
  "aws-data-partition": {
    "description": "Defines partition",
    "prefix": "tf-aws-data-partition",
    "body": [
      "data \"aws_partition\" \"current\" {}",
      "",
      "data \"aws_iam_policy_document\" \"s3_policy\" {",
      "  statement {",
      "    sid = \"1\"",
      "",
      "    actions = [",
      "      \"s3:ListBucket\",",
      "    ]",
      "",
      "    resources = [",
      "      \"arn:${data.aws_partition.current.partition}:s3:::my-bucket\",",
      "    ]",
      "  }",
      "}"
    ]
  },
  "aws-data-prefix_list": {
    "description": "Defines prefix_list",
    "prefix": "tf-aws-data-prefix_list",
    "body": [
      "resource \"aws_vpc_endpoint\" \"private_s3\" {",
      "  vpc_id       = aws_vpc.foo.id",
      "  service_name = \"com.amazonaws.us-west-2.s3\"",
      "}",
      "",
      "data \"aws_prefix_list\" \"private_s3\" {",
      "  prefix_list_id = aws_vpc_endpoint.private_s3.prefix_list_id",
      "}",
      "",
      "resource \"aws_network_acl\" \"bar\" {",
      "  vpc_id = aws_vpc.foo.id",
      "}",
      "",
      "resource \"aws_network_acl_rule\" \"private_s3\" {",
      "  network_acl_id = aws_network_acl.bar.id",
      "  rule_number    = 200",
      "  egress         = false",
      "  protocol       = \"tcp\"",
      "  rule_action    = \"allow\"",
      "  cidr_block     = data.aws_prefix_list.private_s3.cidr_blocks[0]",
      "  from_port      = 443",
      "  to_port        = 443",
      "}"
    ]
  },
  "aws-data-pricing_product": {
    "description": "Defines pricing_product",
    "prefix": "tf-aws-data-pricing_product",
    "body": [
      "data \"aws_pricing_product\" \"example\" {",
      "  service_code = \"AmazonEC2\"",
      "",
      "  filters {",
      "    field = \"instanceType\"",
      "    value = \"c5.xlarge\"",
      "  }",
      "",
      "  filters {",
      "    field = \"operatingSystem\"",
      "    value = \"Linux\"",
      "  }",
      "",
      "  filters {",
      "    field = \"location\"",
      "    value = \"US East (N. Virginia)\"",
      "  }",
      "",
      "  filters {",
      "    field = \"preInstalledSw\"",
      "    value = \"NA\"",
      "  }",
      "",
      "  filters {",
      "    field = \"licenseModel\"",
      "    value = \"No License required\"",
      "  }",
      "",
      "  filters {",
      "    field = \"tenancy\"",
      "    value = \"Shared\"",
      "  }",
      "",
      "  filters {",
      "    field = \"capacitystatus\"",
      "    value = \"Used\"",
      "  }",
      "}"
    ]
  },
  "aws-data-qldb_ledger": {
    "description": "Defines qldb_ledger",
    "prefix": "tf-aws-data-qldb_ledger",
    "body": [
      "data \"aws_qldb_ledger\" \"example\" {",
      "  name = \"an_example_ledger\"",
      "}"
    ]
  },
  "aws-data-ram_resource_share": {
    "description": "Defines ram_resource_share",
    "prefix": "tf-aws-data-ram_resource_share",
    "body": [
      "data \"aws_ram_resource_share\" \"example\" {",
      "  name           = \"example\"",
      "  resource_owner = \"SELF\"",
      "}"
    ]
  },
  "aws-data-rds_certificate": {
    "description": "Defines rds_certificate",
    "prefix": "tf-aws-data-rds_certificate",
    "body": [
      "data \"aws_rds_certificate\" \"example\" {",
      "  latest_valid_till = true",
      "}"
    ]
  },
  "aws-data-rds_cluster": {
    "description": "Defines rds_cluster",
    "prefix": "tf-aws-data-rds_cluster",
    "body": [
      "data \"aws_rds_cluster\" \"clusterName\" {",
      "  cluster_identifier = \"clusterName\"",
      "}"
    ]
  },
  "aws-data-rds_engine_version": {
    "description": "Defines rds_engine_version",
    "prefix": "tf-aws-data-rds_engine_version",
    "body": [
      "data \"aws_rds_engine_version\" \"test\" {",
      "  engine             = \"mysql\"",
      "  preferred_versions = [\"5.7.42\", \"5.7.19\", \"5.7.17\"]",
      "}"
    ]
  },
  "aws-data-rds_orderable_db_instance": {
    "description": "Defines rds_orderable_db_instance",
    "prefix": "tf-aws-data-rds_orderable_db_instance",
    "body": [
      "data \"aws_rds_orderable_db_instance\" \"test\" {",
      "  engine         = \"mysql\"",
      "  engine_version = \"5.7.22\"",
      "  license_model  = \"general-public-license\"",
      "  storage_type   = \"standard\"",
      "",
      "  preferred_instance_classes = [\"db.r6.xlarge\", \"db.m4.large\", \"db.t3.small\"]",
      "}"
    ]
  },
  "aws-data-redshift_cluster": {
    "description": "Defines redshift_cluster",
    "prefix": "tf-aws-data-redshift_cluster",
    "body": [
      "data \"aws_redshift_cluster\" \"test_cluster\" {",
      "  cluster_identifier = \"test-cluster\"",
      "}",
      "",
      "resource \"aws_kinesis_firehose_delivery_stream\" \"test_stream\" {",
      "  name        = \"terraform-kinesis-firehose-test-stream\"",
      "  destination = \"redshift\"",
      "",
      "  s3_configuration {",
      "    role_arn           = aws_iam_role.firehose_role.arn",
      "    bucket_arn         = aws_s3_bucket.bucket.arn",
      "    buffer_size        = 10",
      "    buffer_interval    = 400",
      "    compression_format = \"GZIP\"",
      "  }",
      "",
      "  redshift_configuration {",
      "    role_arn           = aws_iam_role.firehose_role.arn",
      "    cluster_jdbcurl    = \"jdbc:redshift://${data.aws_redshift_cluster.test_cluster.endpoint}/${data.aws_redshift_cluster.test_cluster.database_name}\"",
      "    username           = \"testuser\"",
      "    password           = \"T3stPass\"",
      "    data_table_name    = \"test-table\"",
      "    copy_options       = \"delimiter '|'\" # the default delimiter",
      "    data_table_columns = \"test-col\"",
      "  }",
      "}"
    ]
  },
  "aws-data-redshift_orderable_cluster": {
    "description": "Defines redshift_orderable_cluster",
    "prefix": "tf-aws-data-redshift_orderable_cluster",
    "body": [
      "data \"aws_redshift_orderable_cluster\" \"test\" {",
      "  cluster_type         = \"multi-node\"",
      "  preferred_node_types = [\"dc2.large\", \"ds2.xlarge\"]",
      "}"
    ]
  },
  "aws-data-redshift_service_account": {
    "description": "Defines redshift_service_account",
    "prefix": "tf-aws-data-redshift_service_account",
    "body": [
      "data \"aws_redshift_service_account\" \"main\" {}",
      "",
      "resource \"aws_s3_bucket\" \"bucket\" {",
      "  bucket        = \"tf-redshift-logging-test-bucket\"",
      "  force_destroy = true",
      "",
      "  policy = <<EOF",
      "{",
      "\t\"Version\": \"2008-10-17\",",
      "\t\"Statement\": [",
      "\t\t{",
      "            \"Sid\": \"Put bucket policy needed for audit logging\",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": {",
      "\t\t        \"AWS\": \"${data.aws_redshift_service_account.main.arn}\"",
      "            },",
      "            \"Action\": \"s3:PutObject\",",
      "            \"Resource\": \"arn:aws:s3:::tf-redshift-logging-test-bucket/*\"",
      "        },",
      "        {",
      "            \"Sid\": \"Get bucket policy needed for audit logging \",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": {",
      "\t\t        \"AWS\": \"${data.aws_redshift_service_account.main.arn}\"",
      "            },",
      "            \"Action\": \"s3:GetBucketAcl\",",
      "            \"Resource\": \"arn:aws:s3:::tf-redshift-logging-test-bucket\"",
      "        }",
      "\t]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-data-region": {
    "description": "Defines region",
    "prefix": "tf-aws-data-region",
    "body": [
      "data \"aws_region\" \"current\" {}"
    ]
  },
  "aws-data-regions": {
    "description": "Defines regions",
    "prefix": "tf-aws-data-regions",
    "body": [
      "data \"aws_regions\" \"current\" {}"
    ]
  },
  "aws-data-route": {
    "description": "Defines route",
    "prefix": "tf-aws-data-route",
    "body": [
      "variable \"subnet_id\" {}",
      "",
      "data \"aws_route_table\" \"selected\" {",
      "  subnet_id = var.subnet_id",
      "}",
      "",
      "data \"aws_route\" \"route\" {",
      "  route_table_id         = aws_route_table.selected.id",
      "  destination_cidr_block = \"10.0.1.0/24\"",
      "}",
      "",
      "data \"aws_network_interface\" \"interface\" {",
      "  id = data.aws_route.route.network_interface_id",
      "}"
    ]
  },
  "aws-data-route53_delegation_set": {
    "description": "Defines route53_delegation_set",
    "prefix": "tf-aws-data-route53_delegation_set",
    "body": [
      "data \"aws_route53_delegation_set\" \"dset\" {",
      "  id = \"MQWGHCBFAKEID\"",
      "}"
    ]
  },
  "aws-data-route53_resolver_endpoint": {
    "description": "Defines route53_resolver_endpoint",
    "prefix": "tf-aws-data-route53_resolver_endpoint",
    "body": [
      "data \"aws_route53_resolver_endpoint\" \"example\" {",
      "  resolver_endpoint_id = \"rslvr-in-1abc2345ef678g91h\"",
      "}"
    ]
  },
  "aws-data-route53_resolver_rule": {
    "description": "Defines route53_resolver_rule",
    "prefix": "tf-aws-data-route53_resolver_rule",
    "body": [
      "data \"aws_route53_resolver_rule\" \"example\" {",
      "  domain_name = \"subdomain.example.com\"",
      "  rule_type   = \"SYSTEM\"",
      "}"
    ]
  },
  "aws-data-route53_resolver_rules": {
    "description": "Defines route53_resolver_rules",
    "prefix": "tf-aws-data-route53_resolver_rules",
    "body": [
      "data \"aws_route53_resolver_rules\" \"example\" {",
      "  owner_id     = \"Route 53 Resolver\"",
      "  rule_type    = \"RECURSIVE\"",
      "  share_status = \"NOT_SHARED\"",
      "}"
    ]
  },
  "aws-data-route53_zone": {
    "description": "Defines route53_zone",
    "prefix": "tf-aws-data-route53_zone",
    "body": [
      "data \"aws_route53_zone\" \"selected\" {",
      "  name         = \"test.com.\"",
      "  private_zone = true",
      "}",
      "",
      "resource \"aws_route53_record\" \"www\" {",
      "  zone_id = data.aws_route53_zone.selected.zone_id",
      "  name    = \"www.${data.aws_route53_zone.selected.name}\"",
      "  type    = \"A\"",
      "  ttl     = \"300\"",
      "  records = [\"10.0.0.1\"]",
      "}"
    ]
  },
  "aws-data-route_table": {
    "description": "Defines route_table",
    "prefix": "tf-aws-data-route_table",
    "body": [
      "variable \"subnet_id\" {}",
      "",
      "data \"aws_route_table\" \"selected\" {",
      "  subnet_id = var.subnet_id",
      "}",
      "",
      "resource \"aws_route\" \"route\" {",
      "  route_table_id            = data.aws_route_table.selected.id",
      "  destination_cidr_block    = \"10.0.1.0/22\"",
      "  vpc_peering_connection_id = \"pcx-45ff3dc1\"",
      "}"
    ]
  },
  "aws-data-route_tables": {
    "description": "Defines route_tables",
    "prefix": "tf-aws-data-route_tables",
    "body": [
      "data \"aws_route_tables\" \"rts\" {",
      "  vpc_id = var.vpc_id",
      "",
      "  filter {",
      "    name   = \"tag:kubernetes.io/kops/role\"",
      "    values = [\"private*\"]",
      "  }",
      "}",
      "",
      "resource \"aws_route\" \"r\" {",
      "  count                     = length(data.aws_route_tables.rts.ids)",
      "  route_table_id            = data.aws_route_tables.rts.ids[count.index]",
      "  destination_cidr_block    = \"10.0.1.0/22\"",
      "  vpc_peering_connection_id = \"pcx-0e9a7a9ecd137dc54\"",
      "}"
    ]
  },
  "aws-data-s3_bucket": {
    "description": "Defines s3_bucket",
    "prefix": "tf-aws-data-s3_bucket",
    "body": [
      "data \"aws_s3_bucket\" \"selected\" {",
      "  bucket = \"bucket.test.com\"",
      "}",
      "",
      "data \"aws_route53_zone\" \"test_zone\" {",
      "  name = \"test.com.\"",
      "}",
      "",
      "resource \"aws_route53_record\" \"example\" {",
      "  zone_id = data.aws_route53_zone.test_zone.id",
      "  name    = \"bucket\"",
      "  type    = \"A\"",
      "",
      "  alias {",
      "    name    = data.aws_s3_bucket.selected.website_domain",
      "    zone_id = data.aws_s3_bucket.selected.hosted_zone_id",
      "  }",
      "}"
    ]
  },
  "aws-data-s3_bucket_object": {
    "description": "Defines s3_bucket_object",
    "prefix": "tf-aws-data-s3_bucket_object",
    "body": [
      "data \"aws_s3_bucket_object\" \"bootstrap_script\" {",
      "  bucket = \"ourcorp-deploy-config\"",
      "  key    = \"ec2-bootstrap-script.sh\"",
      "}",
      "",
      "resource \"aws_instance\" \"example\" {",
      "  instance_type = \"t2.micro\"",
      "  ami           = \"ami-2757f631\"",
      "  user_data     = data.aws_s3_bucket_object.bootstrap_script.body",
      "}"
    ]
  },
  "aws-data-s3_bucket_objects": {
    "description": "Defines s3_bucket_objects",
    "prefix": "tf-aws-data-s3_bucket_objects",
    "body": [
      "data \"aws_s3_bucket_objects\" \"my_objects\" {",
      "  bucket = \"ourcorp\"",
      "}",
      "",
      "data \"aws_s3_bucket_object\" \"object_info\" {",
      "  count  = length(data.aws_s3_bucket_objects.my_objects.keys)",
      "  key    = element(data.aws_s3_bucket_objects.my_objects.keys, count.index)",
      "  bucket = data.aws_s3_bucket_objects.my_objects.bucket",
      "}"
    ]
  },
  "aws-data-sagemaker_prebuilt_ecr_image": {
    "description": "Defines sagemaker_prebuilt_ecr_image",
    "prefix": "tf-aws-data-sagemaker_prebuilt_ecr_image",
    "body": [
      "data \"aws_sagemaker_prebuilt_ecr_image\" \"test\" {",
      "  repository_name = \"sagemaker-scikit-learn\"",
      "  image_tag       = \"2.2-1.0.11.0\"",
      "}"
    ]
  },
  "aws-data-secretsmanager_secret": {
    "description": "Defines secretsmanager_secret",
    "prefix": "tf-aws-data-secretsmanager_secret",
    "body": [
      "data \"aws_secretsmanager_secret\" \"by-arn\" {",
      "  arn = \"arn:aws:secretsmanager:us-east-1:123456789012:secret:example-123456\"",
      "}"
    ]
  },
  "aws-data-secretsmanager_secret_rotation": {
    "description": "Defines secretsmanager_secret_rotation",
    "prefix": "tf-aws-data-secretsmanager_secret_rotation",
    "body": [
      "data \"aws_secretsmanager_secret_rotation\" \"example\" {",
      "  secret_id = data.aws_secretsmanager_secret.example.id",
      "}"
    ]
  },
  "aws-data-secretsmanager_secret_version": {
    "description": "Defines secretsmanager_secret_version",
    "prefix": "tf-aws-data-secretsmanager_secret_version",
    "body": [
      "data \"aws_secretsmanager_secret_version\" \"example\" {",
      "  secret_id = data.aws_secretsmanager_secret.example.id",
      "}"
    ]
  },
  "aws-data-security_group": {
    "description": "Defines security_group",
    "prefix": "tf-aws-data-security_group",
    "body": [
      "variable \"security_group_id\" {}",
      "",
      "data \"aws_security_group\" \"selected\" {",
      "  id = var.security_group_id",
      "}",
      "",
      "resource \"aws_subnet\" \"subnet\" {",
      "  vpc_id     = data.aws_security_group.selected.vpc_id",
      "  cidr_block = \"10.0.1.0/24\"",
      "}"
    ]
  },
  "aws-data-security_groups": {
    "description": "Defines security_groups",
    "prefix": "tf-aws-data-security_groups",
    "body": [
      "data \"aws_security_groups\" \"test\" {",
      "  tags = {",
      "    Application = \"k8s\"",
      "    Environment = \"dev\"",
      "  }",
      "}"
    ]
  },
  "aws-data-serverlessapplicationrepository_application": {
    "description": "Defines serverlessapplicationrepository_application",
    "prefix": "tf-aws-data-serverlessapplicationrepository_application",
    "body": [
      "data \"aws_serverlessapplicationrepository_application\" \"example\" {",
      "  application_id = \"arn:aws:serverlessrepo:us-east-1:123456789012:applications/ExampleApplication\"",
      "}",
      "",
      "resource \"aws_serverlessapplicationrepository_cloudformation_stack\" \"example\" {",
      "  name             = \"Example\"",
      "  application_id   = data.aws_serverlessapplicationrepository_application.example.application_id",
      "  semantic_version = data.aws_serverlessapplicationrepository_application.example.semantic_version",
      "  capabilities     = data.aws_serverlessapplicationrepository_application.example.required_capabilities",
      "}"
    ]
  },
  "aws-data-servicequotas_service": {
    "description": "Defines servicequotas_service",
    "prefix": "tf-aws-data-servicequotas_service",
    "body": [
      "data \"aws_servicequotas_service\" \"example\" {",
      "  service_name = \"Amazon Virtual Private Cloud (Amazon VPC)\"",
      "}"
    ]
  },
  "aws-data-servicequotas_service_quota": {
    "description": "Defines servicequotas_service_quota",
    "prefix": "tf-aws-data-servicequotas_service_quota",
    "body": [
      "data \"aws_servicequotas_service_quota\" \"by_quota_code\" {",
      "  quota_code   = \"L-F678F1CE\"",
      "  service_code = \"vpc\"",
      "}",
      "",
      "data \"aws_servicequotas_service_quota\" \"by_quota_name\" {",
      "  quota_name   = \"VPCs per Region\"",
      "  service_code = \"vpc\"",
      "}"
    ]
  },
  "aws-data-sfn_activity": {
    "description": "Defines sfn_activity",
    "prefix": "tf-aws-data-sfn_activity",
    "body": [
      "data \"aws_sfn_activity\" \"sfn_activity\" {",
      "  name = \"my-activity\"",
      "}"
    ]
  },
  "aws-data-sfn_state_machine": {
    "description": "Defines sfn_state_machine",
    "prefix": "tf-aws-data-sfn_state_machine",
    "body": [
      "data \"aws_sfn_state_machine\" \"example\" {",
      "  name = \"an_example_sfn_name\"",
      "}"
    ]
  },
  "aws-data-signer_signing_job": {
    "description": "Defines signer_signing_job",
    "prefix": "tf-aws-data-signer_signing_job",
    "body": [
      "data \"aws_signer_signing_job\" \"build_signing_job\" {",
      "  job_id = \"9ed7e5c3-b8d4-4da0-8459-44e0b068f7ee\"",
      "}"
    ]
  },
  "aws-data-signer_signing_profile": {
    "description": "Defines signer_signing_profile",
    "prefix": "tf-aws-data-signer_signing_profile",
    "body": [
      "data \"aws_signer_signing_profile\" \"production_signing_profile\" {",
      "  name = \"prod_profile_DdW3Mk1foYL88fajut4mTVFGpuwfd4ACO6ANL0D1uIj7lrn8adK\"",
      "}"
    ]
  },
  "aws-data-sns_topic": {
    "description": "Defines sns_topic",
    "prefix": "tf-aws-data-sns_topic",
    "body": [
      "data \"aws_sns_topic\" \"example\" {",
      "  name = \"an_example_topic\"",
      "}"
    ]
  },
  "aws-data-sqs_queue": {
    "description": "Defines sqs_queue",
    "prefix": "tf-aws-data-sqs_queue",
    "body": [
      "data \"aws_sqs_queue\" \"example\" {",
      "  name = \"queue\"",
      "}"
    ]
  },
  "aws-data-ssm_document": {
    "description": "Defines ssm_document",
    "prefix": "tf-aws-data-ssm_document",
    "body": [
      "data \"aws_ssm_document\" \"foo\" {",
      "  name            = \"AWS-GatherSoftwareInventory\"",
      "  document_format = \"YAML\"",
      "}",
      "",
      "output \"content\" {",
      "  value = data.aws_ssm_document.foo.content",
      "}"
    ]
  },
  "aws-data-ssm_parameter": {
    "description": "Defines ssm_parameter",
    "prefix": "tf-aws-data-ssm_parameter",
    "body": [
      "data \"aws_ssm_parameter\" \"foo\" {",
      "  name = \"foo\"",
      "}"
    ]
  },
  "aws-data-ssm_patch_baseline": {
    "description": "Defines ssm_patch_baseline",
    "prefix": "tf-aws-data-ssm_patch_baseline",
    "body": [
      "data \"aws_ssm_patch_baseline\" \"centos\" {",
      "  owner            = \"AWS\"",
      "  name_prefix      = \"AWS-\"",
      "  operating_system = \"CENTOS\"",
      "}"
    ]
  },
  "aws-data-ssoadmin_instances": {
    "description": "Defines ssoadmin_instances",
    "prefix": "tf-aws-data-ssoadmin_instances",
    "body": [
      "data \"aws_ssoadmin_instances\" \"example\" {}",
      "",
      "output \"arn\" {",
      "  value = tolist(data.aws_ssoadmin_instances.example.arns)[0]",
      "}",
      "",
      "output \"identity_store_id\" {",
      "  value = tolist(data.aws_ssoadmin_instances.example.identity_store_ids)[0]",
      "}"
    ]
  },
  "aws-data-ssoadmin_permission_set": {
    "description": "Defines ssoadmin_permission_set",
    "prefix": "tf-aws-data-ssoadmin_permission_set",
    "body": [
      "data \"aws_ssoadmin_instances\" \"example\" {}",
      "",
      "data \"aws_ssoadmin_permission_set\" \"example\" {",
      "  instance_arn = tolist(data.aws_ssoadmin_instances.example.arns)[0]",
      "  name         = \"Example\"",
      "}",
      "",
      "output \"arn\" {",
      "  value = data.aws_ssoadmin_permission_set.example.arn",
      "}"
    ]
  },
  "aws-data-storagegateway_local_disk": {
    "description": "Defines storagegateway_local_disk",
    "prefix": "tf-aws-data-storagegateway_local_disk",
    "body": [
      "data \"aws_storagegateway_local_disk\" \"test\" {",
      "  disk_path   = aws_volume_attachment.test.device_name",
      "  gateway_arn = aws_storagegateway_gateway.test.arn",
      "}"
    ]
  },
  "aws-data-subnet": {
    "description": "Defines subnet",
    "prefix": "tf-aws-data-subnet",
    "body": [
      "variable \"subnet_id\" {}",
      "",
      "data \"aws_subnet\" \"selected\" {",
      "  id = var.subnet_id",
      "}",
      "",
      "resource \"aws_security_group\" \"subnet\" {",
      "  vpc_id = data.aws_subnet.selected.vpc_id",
      "",
      "  ingress {",
      "    cidr_blocks = [data.aws_subnet.selected.cidr_block]",
      "    from_port   = 80",
      "    to_port     = 80",
      "    protocol    = \"tcp\"",
      "  }",
      "}"
    ]
  },
  "aws-data-subnet_ids": {
    "description": "Defines subnet_ids",
    "prefix": "tf-aws-data-subnet_ids",
    "body": [
      "data \"aws_subnet_ids\" \"example\" {",
      "  vpc_id = var.vpc_id",
      "}",
      "",
      "data \"aws_subnet\" \"example\" {",
      "  for_each = data.aws_subnet_ids.example.ids",
      "  id       = each.value",
      "}",
      "",
      "output \"subnet_cidr_blocks\" {",
      "  value = [for s in data.aws_subnet.example : s.cidr_block]",
      "}"
    ]
  },
  "aws-data-transfer_server": {
    "description": "Defines transfer_server",
    "prefix": "tf-aws-data-transfer_server",
    "body": [
      "data \"aws_transfer_server\" \"example\" {",
      "  server_id = \"s-1234567\"",
      "}"
    ]
  },
  "aws-data-vpc": {
    "description": "Defines vpc",
    "prefix": "tf-aws-data-vpc",
    "body": [
      "variable \"vpc_id\" {}",
      "",
      "data \"aws_vpc\" \"selected\" {",
      "  id = var.vpc_id",
      "}",
      "",
      "resource \"aws_subnet\" \"example\" {",
      "  vpc_id            = data.aws_vpc.selected.id",
      "  availability_zone = \"us-west-2a\"",
      "  cidr_block        = cidrsubnet(data.aws_vpc.selected.cidr_block, 4, 1)",
      "}"
    ]
  },
  "aws-data-vpc_dhcp_options": {
    "description": "Defines vpc_dhcp_options",
    "prefix": "tf-aws-data-vpc_dhcp_options",
    "body": [
      "data \"aws_vpc_dhcp_options\" \"example\" {",
      "  dhcp_options_id = \"dopts-12345678\"",
      "}"
    ]
  },
  "aws-data-vpc_endpoint": {
    "description": "Defines vpc_endpoint",
    "prefix": "tf-aws-data-vpc_endpoint",
    "body": [
      "# Declare the data source",
      "data \"aws_vpc_endpoint\" \"s3\" {",
      "  vpc_id       = aws_vpc.foo.id",
      "  service_name = \"com.amazonaws.us-west-2.s3\"",
      "}",
      "",
      "resource \"aws_vpc_endpoint_route_table_association\" \"private_s3\" {",
      "  vpc_endpoint_id = data.aws_vpc_endpoint.s3.id",
      "  route_table_id  = aws_route_table.private.id",
      "}"
    ]
  },
  "aws-data-vpc_endpoint_service": {
    "description": "Defines vpc_endpoint_service",
    "prefix": "tf-aws-data-vpc_endpoint_service",
    "body": [
      "# Declare the data source",
      "data \"aws_vpc_endpoint_service\" \"s3\" {",
      "  service      = \"s3\"",
      "  service_type = \"Gateway\"",
      "}",
      "",
      "# Create a VPC",
      "resource \"aws_vpc\" \"foo\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "# Create a VPC endpoint",
      "resource \"aws_vpc_endpoint\" \"ep\" {",
      "  vpc_id       = aws_vpc.foo.id",
      "  service_name = data.aws_vpc_endpoint_service.s3.service_name",
      "}"
    ]
  },
  "aws-data-vpc_peering_connection": {
    "description": "Defines vpc_peering_connection",
    "prefix": "tf-aws-data-vpc_peering_connection",
    "body": [
      "# Declare the data source",
      "data \"aws_vpc_peering_connection\" \"pc\" {",
      "  vpc_id          = aws_vpc.foo.id",
      "  peer_cidr_block = \"10.0.1.0/22\"",
      "}",
      "",
      "# Create a route table",
      "resource \"aws_route_table\" \"rt\" {",
      "  vpc_id = aws_vpc.foo.id",
      "}",
      "",
      "# Create a route",
      "resource \"aws_route\" \"r\" {",
      "  route_table_id            = aws_route_table.rt.id",
      "  destination_cidr_block    = data.aws_vpc_peering_connection.pc.peer_cidr_block",
      "  vpc_peering_connection_id = data.aws_vpc_peering_connection.pc.id",
      "}"
    ]
  },
  "aws-data-vpc_peering_connections": {
    "description": "Defines vpc_peering_connections",
    "prefix": "tf-aws-data-vpc_peering_connections",
    "body": [
      "# Declare the data source",
      "data \"aws_vpc_peering_connections\" \"pcs\" {",
      "  filter {",
      "    name   = \"requester-vpc-info.vpc-id\"",
      "    values = [aws_vpc.foo.id]",
      "  }",
      "}",
      "",
      "# get the details of each resource",
      "data \"aws_vpc_peering_connection\" \"pc\" {",
      "  count = length(data.aws_vpc_peering_connections.pcs.ids)",
      "  id    = data.aws_vpc_peering_connections.pcs.ids[count.index]",
      "}"
    ]
  },
  "aws-data-vpcs": {
    "description": "Defines vpcs",
    "prefix": "tf-aws-data-vpcs",
    "body": [
      "data \"aws_vpcs\" \"foo\" {",
      "  tags = {",
      "    service = \"production\"",
      "  }",
      "}",
      "",
      "output \"foo\" {",
      "  value = data.aws_vpcs.foo.ids",
      "}"
    ]
  },
  "aws-data-vpn_gateway": {
    "description": "Defines vpn_gateway",
    "prefix": "tf-aws-data-vpn_gateway",
    "body": [
      "data \"aws_vpn_gateway\" \"selected\" {",
      "  filter {",
      "    name   = \"tag:Name\"",
      "    values = [\"vpn-gw\"]",
      "  }",
      "}",
      "",
      "output \"vpn_gateway_id\" {",
      "  value = data.aws_vpn_gateway.selected.id",
      "}"
    ]
  },
  "aws-data-waf_ipset": {
    "description": "Defines waf_ipset",
    "prefix": "tf-aws-data-waf_ipset",
    "body": [
      "data \"aws_waf_ipset\" \"example\" {",
      "  name = \"tfWAFIPSet\"",
      "}"
    ]
  },
  "aws-data-waf_rate_based_rule": {
    "description": "Defines waf_rate_based_rule",
    "prefix": "tf-aws-data-waf_rate_based_rule",
    "body": [
      "data \"aws_waf_rate_based_rule\" \"example\" {",
      "  name = \"tfWAFRateBasedRule\"",
      "}",
      ""
    ]
  },
  "aws-data-waf_rule": {
    "description": "Defines waf_rule",
    "prefix": "tf-aws-data-waf_rule",
    "body": [
      "data \"aws_waf_rule\" \"example\" {",
      "  name = \"tfWAFRule\"",
      "}",
      ""
    ]
  },
  "aws-data-waf_web_acl": {
    "description": "Defines waf_web_acl",
    "prefix": "tf-aws-data-waf_web_acl",
    "body": [
      "data \"aws_waf_web_acl\" \"example\" {",
      "  name = \"tfWAFWebACL\"",
      "}"
    ]
  },
  "aws-data-wafregional_ipset": {
    "description": "Defines wafregional_ipset",
    "prefix": "tf-aws-data-wafregional_ipset",
    "body": [
      "data \"aws_wafregional_ipset\" \"example\" {",
      "  name = \"tfWAFRegionalIPSet\"",
      "}"
    ]
  },
  "aws-data-wafregional_rate_based_rule": {
    "description": "Defines wafregional_rate_based_rule",
    "prefix": "tf-aws-data-wafregional_rate_based_rule",
    "body": [
      "data \"aws_wafregional_rate_based_rule\" \"example\" {",
      "  name = \"tfWAFRegionalRateBasedRule\"",
      "}"
    ]
  },
  "aws-data-wafregional_rule": {
    "description": "Defines wafregional_rule",
    "prefix": "tf-aws-data-wafregional_rule",
    "body": [
      "data \"aws_wafregional_rule\" \"example\" {",
      "  name = \"tfWAFRegionalRule\"",
      "}"
    ]
  },
  "aws-data-wafregional_web_acl": {
    "description": "Defines wafregional_web_acl",
    "prefix": "tf-aws-data-wafregional_web_acl",
    "body": [
      "data \"aws_wafregional_web_acl\" \"example\" {",
      "  name = \"tfWAFRegionalWebACL\"",
      "}"
    ]
  },
  "aws-data-wafv2_ip_set": {
    "description": "Defines wafv2_ip_set",
    "prefix": "tf-aws-data-wafv2_ip_set",
    "body": [
      "data \"aws_wafv2_ip_set\" \"example\" {",
      "  name  = \"some-ip-set\"",
      "  scope = \"REGIONAL\"",
      "}"
    ]
  },
  "aws-data-wafv2_regex_pattern_set": {
    "description": "Defines wafv2_regex_pattern_set",
    "prefix": "tf-aws-data-wafv2_regex_pattern_set",
    "body": [
      "data \"aws_wafv2_regex_pattern_set\" \"example\" {",
      "  name  = \"some-regex-pattern-set\"",
      "  scope = \"REGIONAL\"",
      "}"
    ]
  },
  "aws-data-wafv2_rule_group": {
    "description": "Defines wafv2_rule_group",
    "prefix": "tf-aws-data-wafv2_rule_group",
    "body": [
      "data \"aws_wafv2_rule_group\" \"example\" {",
      "  name  = \"some-rule-group\"",
      "  scope = \"REGIONAL\"",
      "}"
    ]
  },
  "aws-data-wafv2_web_acl": {
    "description": "Defines wafv2_web_acl",
    "prefix": "tf-aws-data-wafv2_web_acl",
    "body": [
      "data \"aws_wafv2_web_acl\" \"example\" {",
      "  name  = \"some-web-acl\"",
      "  scope = \"REGIONAL\"",
      "}"
    ]
  },
  "aws-data-workspaces_bundle": {
    "description": "Defines workspaces_bundle",
    "prefix": "tf-aws-data-workspaces_bundle",
    "body": [
      "data \"aws_workspaces_bundle\" \"example\" {",
      "  bundle_id = \"wsb-b0s22j3d7\"",
      "}"
    ]
  },
  "aws-data-workspaces_directory": {
    "description": "Defines workspaces_directory",
    "prefix": "tf-aws-data-workspaces_directory",
    "body": [
      "data \"aws_workspaces_directory\" \"example\" {",
      "  directory_id = \"d-9067783251\"",
      "}"
    ]
  },
  "aws-data-workspaces_image": {
    "description": "Defines workspaces_image",
    "prefix": "tf-aws-data-workspaces_image",
    "body": [
      "data aws_workspaces_image example {",
      "  image_id = \"wsi-ten5h0y19\"",
      "}"
    ]
  },
  "aws-data-workspaces_workspace": {
    "description": "Defines workspaces_workspace",
    "prefix": "tf-aws-data-workspaces_workspace",
    "body": [
      "data \"aws_workspaces_workspace\" \"example\" {",
      "  workspace_id = \"ws-cj5xcxsz5\"",
      "}"
    ]
  },
  "aws-resource-accessanalyzer_analyzer": {
    "description": "Defines accessanalyzer_analyzer",
    "prefix": "tf-aws-resource-accessanalyzer_analyzer",
    "body": [
      "resource \"aws_accessanalyzer_analyzer\" \"example\" {",
      "  analyzer_name = \"example\"",
      "}"
    ]
  },
  "aws-resource-acm_certificate": {
    "description": "Defines acm_certificate",
    "prefix": "tf-aws-resource-acm_certificate",
    "body": [
      "resource \"aws_acm_certificate\" \"cert\" {",
      "  domain_name       = \"example.com\"",
      "  validation_method = \"DNS\"",
      "",
      "  tags = {",
      "    Environment = \"test\"",
      "  }",
      "",
      "  lifecycle {",
      "    create_before_destroy = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-acm_certificate_validation": {
    "description": "Defines acm_certificate_validation",
    "prefix": "tf-aws-resource-acm_certificate_validation",
    "body": [
      "resource \"aws_acm_certificate\" \"example\" {",
      "  domain_name       = \"example.com\"",
      "  validation_method = \"DNS\"",
      "}",
      "",
      "data \"aws_route53_zone\" \"example\" {",
      "  name         = \"example.com\"",
      "  private_zone = false",
      "}",
      "",
      "resource \"aws_route53_record\" \"example\" {",
      "  for_each = {",
      "    for dvo in aws_acm_certificate.example.domain_validation_options : dvo.domain_name => {",
      "      name   = dvo.resource_record_name",
      "      record = dvo.resource_record_value",
      "      type   = dvo.resource_record_type",
      "    }",
      "  }",
      "",
      "  allow_overwrite = true",
      "  name            = each.value.name",
      "  records         = [each.value.record]",
      "  ttl             = 60",
      "  type            = each.value.type",
      "  zone_id         = data.aws_route53_zone.example.zone_id",
      "}",
      "",
      "resource \"aws_acm_certificate_validation\" \"example\" {",
      "  certificate_arn         = aws_acm_certificate.example.arn",
      "  validation_record_fqdns = [for record in aws_route53_record.example : record.fqdn]",
      "}",
      "",
      "resource \"aws_lb_listener\" \"example\" {",
      "  # ... other configuration ...",
      "",
      "  certificate_arn = aws_acm_certificate_validation.example.certificate_arn",
      "}"
    ]
  },
  "aws-resource-acmpca_certificate_authority": {
    "description": "Defines acmpca_certificate_authority",
    "prefix": "tf-aws-resource-acmpca_certificate_authority",
    "body": [
      "resource \"aws_acmpca_certificate_authority\" \"example\" {",
      "  certificate_authority_configuration {",
      "    key_algorithm     = \"RSA_4096\"",
      "    signing_algorithm = \"SHA512WITHRSA\"",
      "",
      "    subject {",
      "      common_name = \"example.com\"",
      "    }",
      "  }",
      "",
      "  permanent_deletion_time_in_days = 7",
      "}"
    ]
  },
  "aws-resource-ami": {
    "description": "Defines ami",
    "prefix": "tf-aws-resource-ami",
    "body": [
      "# Create an AMI that will start a machine whose root device is backed by",
      "# an EBS volume populated from a snapshot. It is assumed that such a snapshot",
      "# already exists with the id \"snap-xxxxxxxx\".",
      "resource \"aws_ami\" \"example\" {",
      "  name                = \"terraform-example\"",
      "  virtualization_type = \"hvm\"",
      "  root_device_name    = \"/dev/xvda\"",
      "",
      "  ebs_block_device {",
      "    device_name = \"/dev/xvda\"",
      "    snapshot_id = \"snap-xxxxxxxx\"",
      "    volume_size = 8",
      "  }",
      "}"
    ]
  },
  "aws-resource-ami_copy": {
    "description": "Defines ami_copy",
    "prefix": "tf-aws-resource-ami_copy",
    "body": [
      "resource \"aws_ami_copy\" \"example\" {",
      "  name              = \"terraform-example\"",
      "  description       = \"A copy of ami-xxxxxxxx\"",
      "  source_ami_id     = \"ami-xxxxxxxx\"",
      "  source_ami_region = \"us-west-1\"",
      "",
      "  tags = {",
      "    Name = \"HelloWorld\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ami_from_instance": {
    "description": "Defines ami_from_instance",
    "prefix": "tf-aws-resource-ami_from_instance",
    "body": [
      "resource \"aws_ami_from_instance\" \"example\" {",
      "  name               = \"terraform-example\"",
      "  source_instance_id = \"i-xxxxxxxx\"",
      "}"
    ]
  },
  "aws-resource-ami_launch_permission": {
    "description": "Defines ami_launch_permission",
    "prefix": "tf-aws-resource-ami_launch_permission",
    "body": [
      "resource \"aws_ami_launch_permission\" \"example\" {",
      "  image_id   = \"ami-12345678\"",
      "  account_id = \"123456789012\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_account": {
    "description": "Defines api_gateway_account",
    "prefix": "tf-aws-resource-api_gateway_account",
    "body": [
      "resource \"aws_api_gateway_account\" \"demo\" {",
      "  cloudwatch_role_arn = aws_iam_role.cloudwatch.arn",
      "}",
      "",
      "resource \"aws_iam_role\" \"cloudwatch\" {",
      "  name = \"api_gateway_cloudwatch_global\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Service\": \"apigateway.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"cloudwatch\" {",
      "  name = \"default\"",
      "  role = aws_iam_role.cloudwatch.id",
      "",
      "  policy = <<EOF",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "        {",
      "            \"Effect\": \"Allow\",",
      "            \"Action\": [",
      "                \"logs:CreateLogGroup\",",
      "                \"logs:CreateLogStream\",",
      "                \"logs:DescribeLogGroups\",",
      "                \"logs:DescribeLogStreams\",",
      "                \"logs:PutLogEvents\",",
      "                \"logs:GetLogEvents\",",
      "                \"logs:FilterLogEvents\"",
      "            ],",
      "            \"Resource\": \"*\"",
      "        }",
      "    ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-api_gateway_api_key": {
    "description": "Defines api_gateway_api_key",
    "prefix": "tf-aws-resource-api_gateway_api_key",
    "body": [
      "resource \"aws_api_gateway_api_key\" \"MyDemoApiKey\" {",
      "  name = \"demo\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_authorizer": {
    "description": "Defines api_gateway_authorizer",
    "prefix": "tf-aws-resource-api_gateway_authorizer",
    "body": [
      "resource \"aws_api_gateway_authorizer\" \"demo\" {",
      "  name                   = \"demo\"",
      "  rest_api_id            = aws_api_gateway_rest_api.demo.id",
      "  authorizer_uri         = aws_lambda_function.authorizer.invoke_arn",
      "  authorizer_credentials = aws_iam_role.invocation_role.arn",
      "}",
      "",
      "resource \"aws_api_gateway_rest_api\" \"demo\" {",
      "  name = \"auth-demo\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"invocation_role\" {",
      "  name = \"api_gateway_auth_invocation\"",
      "  path = \"/\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"apigateway.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"invocation_policy\" {",
      "  name = \"default\"",
      "  role = aws_iam_role.invocation_role.id",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"lambda:InvokeFunction\",",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"${aws_lambda_function.authorizer.arn}\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role\" \"lambda\" {",
      "  name = \"demo-lambda\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"lambda.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_lambda_function\" \"authorizer\" {",
      "  filename      = \"lambda-function.zip\"",
      "  function_name = \"api_gateway_authorizer\"",
      "  role          = aws_iam_role.lambda.arn",
      "  handler       = \"exports.example\"",
      "",
      "  source_code_hash = filebase64sha256(\"lambda-function.zip\")",
      "}"
    ]
  },
  "aws-resource-api_gateway_base_path_mapping": {
    "description": "Defines api_gateway_base_path_mapping",
    "prefix": "tf-aws-resource-api_gateway_base_path_mapping",
    "body": [
      "resource \"aws_api_gateway_stage\" \"example\" {",
      "  deployment_id = aws_api_gateway_deployment.example.id",
      "  rest_api_id   = aws_api_gateway_rest_api.example.id",
      "  stage_name    = \"example\"",
      "}",
      "",
      "resource \"aws_api_gateway_domain_name\" \"example\" {",
      "  domain_name = \"example.com\"",
      "",
      "  certificate_name        = \"example-api\"",
      "  certificate_body        = file(\"${path.module}/example.com/example.crt\")",
      "  certificate_chain       = file(\"${path.module}/example.com/ca.crt\")",
      "  certificate_private_key = file(\"${path.module}/example.com/example.key\")",
      "}",
      "",
      "resource \"aws_api_gateway_base_path_mapping\" \"example\" {",
      "  api_id      = aws_api_gateway_rest_api.example.id",
      "  stage_name  = aws_api_gateway_stage.example.stage_name",
      "  domain_name = aws_api_gateway_domain_name.example.domain_name",
      "}"
    ]
  },
  "aws-resource-api_gateway_client_certificate": {
    "description": "Defines api_gateway_client_certificate",
    "prefix": "tf-aws-resource-api_gateway_client_certificate",
    "body": [
      "resource \"aws_api_gateway_client_certificate\" \"demo\" {",
      "  description = \"My client certificate\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_deployment": {
    "description": "Defines api_gateway_deployment",
    "prefix": "tf-aws-resource-api_gateway_deployment",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"example\" {",
      "  body = jsonencode({",
      "    openapi = \"3.0.1\"",
      "    info = {",
      "      title   = \"example\"",
      "      version = \"1.0\"",
      "    }",
      "    paths = {",
      "      \"/path1\" = {",
      "        get = {",
      "          x-amazon-apigateway-integration = {",
      "            httpMethod           = \"GET\"",
      "            payloadFormatVersion = \"1.0\"",
      "            type                 = \"HTTP_PROXY\"",
      "            uri                  = \"https://ip-ranges.amazonaws.com/ip-ranges.json\"",
      "          }",
      "        }",
      "      }",
      "    }",
      "  })",
      "",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_api_gateway_deployment\" \"example\" {",
      "  rest_api_id = aws_api_gateway_rest_api.example.id",
      "",
      "  triggers = {",
      "    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))",
      "  }",
      "",
      "  lifecycle {",
      "    create_before_destroy = true",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_stage\" \"example\" {",
      "  deployment_id = aws_api_gateway_deployment.example.id",
      "  rest_api_id   = aws_api_gateway_rest_api.example.id",
      "  stage_name    = \"example\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_documentation_part": {
    "description": "Defines api_gateway_documentation_part",
    "prefix": "tf-aws-resource-api_gateway_documentation_part",
    "body": [
      "resource \"aws_api_gateway_documentation_part\" \"example\" {",
      "  location {",
      "    type   = \"METHOD\"",
      "    method = \"GET\"",
      "    path   = \"/example\"",
      "  }",
      "",
      "  properties  = \"{\\\"description\\\":\\\"Example description\\\"}\"",
      "  rest_api_id = aws_api_gateway_rest_api.example.id",
      "}",
      "",
      "resource \"aws_api_gateway_rest_api\" \"example\" {",
      "  name = \"example_api\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_documentation_version": {
    "description": "Defines api_gateway_documentation_version",
    "prefix": "tf-aws-resource-api_gateway_documentation_version",
    "body": [
      "resource \"aws_api_gateway_documentation_version\" \"example\" {",
      "  version     = \"example_version\"",
      "  rest_api_id = aws_api_gateway_rest_api.example.id",
      "  description = \"Example description\"",
      "  depends_on  = [aws_api_gateway_documentation_part.example]",
      "}",
      "",
      "resource \"aws_api_gateway_rest_api\" \"example\" {",
      "  name = \"example_api\"",
      "}",
      "",
      "resource \"aws_api_gateway_documentation_part\" \"example\" {",
      "  location {",
      "    type = \"API\"",
      "  }",
      "",
      "  properties  = \"{\\\"description\\\":\\\"Example\\\"}\"",
      "  rest_api_id = aws_api_gateway_rest_api.example.id",
      "}"
    ]
  },
  "aws-resource-api_gateway_domain_name": {
    "description": "Defines api_gateway_domain_name",
    "prefix": "tf-aws-resource-api_gateway_domain_name",
    "body": [
      "resource \"aws_api_gateway_domain_name\" \"example\" {",
      "  certificate_arn = aws_acm_certificate_validation.example.certificate_arn",
      "  domain_name     = \"api.example.com\"",
      "}",
      "",
      "# Example DNS record using Route53.",
      "# Route53 is not specifically required; any DNS host can be used.",
      "resource \"aws_route53_record\" \"example\" {",
      "  name    = aws_api_gateway_domain_name.example.domain_name",
      "  type    = \"A\"",
      "  zone_id = aws_route53_zone.example.id",
      "",
      "  alias {",
      "    evaluate_target_health = true",
      "    name                   = aws_api_gateway_domain_name.example.cloudfront_domain_name",
      "    zone_id                = aws_api_gateway_domain_name.example.cloudfront_zone_id",
      "  }",
      "}"
    ]
  },
  "aws-resource-api_gateway_gateway_response": {
    "description": "Defines api_gateway_gateway_response",
    "prefix": "tf-aws-resource-api_gateway_gateway_response",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"main\" {",
      "  name = \"MyDemoAPI\"",
      "}",
      "",
      "resource \"aws_api_gateway_gateway_response\" \"test\" {",
      "  rest_api_id   = aws_api_gateway_rest_api.main.id",
      "  status_code   = \"401\"",
      "  response_type = \"UNAUTHORIZED\"",
      "",
      "  response_templates = {",
      "    \"application/json\" = \"{\\\"message\\\":$context.error.messageString}\"",
      "  }",
      "",
      "  response_parameters = {",
      "    \"gatewayresponse.header.Authorization\" = \"'Basic'\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-api_gateway_integration": {
    "description": "Defines api_gateway_integration",
    "prefix": "tf-aws-resource-api_gateway_integration",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name        = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_resource\" \"MyDemoResource\" {",
      "  rest_api_id = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  parent_id   = aws_api_gateway_rest_api.MyDemoAPI.root_resource_id",
      "  path_part   = \"mydemoresource\"",
      "}",
      "",
      "resource \"aws_api_gateway_method\" \"MyDemoMethod\" {",
      "  rest_api_id   = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  resource_id   = aws_api_gateway_resource.MyDemoResource.id",
      "  http_method   = \"GET\"",
      "  authorization = \"NONE\"",
      "}",
      "",
      "resource \"aws_api_gateway_integration\" \"MyDemoIntegration\" {",
      "  rest_api_id          = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  resource_id          = aws_api_gateway_resource.MyDemoResource.id",
      "  http_method          = aws_api_gateway_method.MyDemoMethod.http_method",
      "  type                 = \"MOCK\"",
      "  cache_key_parameters = [\"method.request.path.param\"]",
      "  cache_namespace      = \"foobar\"",
      "  timeout_milliseconds = 29000",
      "",
      "  request_parameters = {",
      "    \"integration.request.header.X-Authorization\" = \"'static'\"",
      "  }",
      "",
      "  # Transforms the incoming XML request to JSON",
      "  request_templates = {",
      "    \"application/xml\" = <<EOF",
      "{",
      "   \"body\" : $input.json('$')",
      "}",
      "EOF",
      "  }",
      "}"
    ]
  },
  "aws-resource-api_gateway_integration_response": {
    "description": "Defines api_gateway_integration_response",
    "prefix": "tf-aws-resource-api_gateway_integration_response",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name        = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_resource\" \"MyDemoResource\" {",
      "  rest_api_id = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  parent_id   = aws_api_gateway_rest_api.MyDemoAPI.root_resource_id",
      "  path_part   = \"mydemoresource\"",
      "}",
      "",
      "resource \"aws_api_gateway_method\" \"MyDemoMethod\" {",
      "  rest_api_id   = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  resource_id   = aws_api_gateway_resource.MyDemoResource.id",
      "  http_method   = \"GET\"",
      "  authorization = \"NONE\"",
      "}",
      "",
      "resource \"aws_api_gateway_integration\" \"MyDemoIntegration\" {",
      "  rest_api_id = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  resource_id = aws_api_gateway_resource.MyDemoResource.id",
      "  http_method = aws_api_gateway_method.MyDemoMethod.http_method",
      "  type        = \"MOCK\"",
      "}",
      "",
      "resource \"aws_api_gateway_method_response\" \"response_200\" {",
      "  rest_api_id = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  resource_id = aws_api_gateway_resource.MyDemoResource.id",
      "  http_method = aws_api_gateway_method.MyDemoMethod.http_method",
      "  status_code = \"200\"",
      "}",
      "",
      "resource \"aws_api_gateway_integration_response\" \"MyDemoIntegrationResponse\" {",
      "  rest_api_id = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  resource_id = aws_api_gateway_resource.MyDemoResource.id",
      "  http_method = aws_api_gateway_method.MyDemoMethod.http_method",
      "  status_code = aws_api_gateway_method_response.response_200.status_code",
      "",
      "  # Transforms the backend JSON response to XML",
      "  response_templates = {",
      "    \"application/xml\" = <<EOF",
      "#set($inputRoot = $input.path('$'))",
      "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "<message>",
      "    $inputRoot.body",
      "</message>",
      "EOF",
      "  }",
      "}"
    ]
  },
  "aws-resource-api_gateway_method": {
    "description": "Defines api_gateway_method",
    "prefix": "tf-aws-resource-api_gateway_method",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name        = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_resource\" \"MyDemoResource\" {",
      "  rest_api_id = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  parent_id   = aws_api_gateway_rest_api.MyDemoAPI.root_resource_id",
      "  path_part   = \"mydemoresource\"",
      "}",
      "",
      "resource \"aws_api_gateway_method\" \"MyDemoMethod\" {",
      "  rest_api_id   = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  resource_id   = aws_api_gateway_resource.MyDemoResource.id",
      "  http_method   = \"GET\"",
      "  authorization = \"NONE\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_method_response": {
    "description": "Defines api_gateway_method_response",
    "prefix": "tf-aws-resource-api_gateway_method_response",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name        = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_resource\" \"MyDemoResource\" {",
      "  rest_api_id = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  parent_id   = aws_api_gateway_rest_api.MyDemoAPI.root_resource_id",
      "  path_part   = \"mydemoresource\"",
      "}",
      "",
      "resource \"aws_api_gateway_method\" \"MyDemoMethod\" {",
      "  rest_api_id   = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  resource_id   = aws_api_gateway_resource.MyDemoResource.id",
      "  http_method   = \"GET\"",
      "  authorization = \"NONE\"",
      "}",
      "",
      "resource \"aws_api_gateway_integration\" \"MyDemoIntegration\" {",
      "  rest_api_id = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  resource_id = aws_api_gateway_resource.MyDemoResource.id",
      "  http_method = aws_api_gateway_method.MyDemoMethod.http_method",
      "  type        = \"MOCK\"",
      "}",
      "",
      "resource \"aws_api_gateway_method_response\" \"response_200\" {",
      "  rest_api_id = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  resource_id = aws_api_gateway_resource.MyDemoResource.id",
      "  http_method = aws_api_gateway_method.MyDemoMethod.http_method",
      "  status_code = \"200\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_method_settings": {
    "description": "Defines api_gateway_method_settings",
    "prefix": "tf-aws-resource-api_gateway_method_settings",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"example\" {",
      "  body = jsonencode({",
      "    openapi = \"3.0.1\"",
      "    info = {",
      "      title   = \"example\"",
      "      version = \"1.0\"",
      "    }",
      "    paths = {",
      "      \"/path1\" = {",
      "        get = {",
      "          x-amazon-apigateway-integration = {",
      "            httpMethod           = \"GET\"",
      "            payloadFormatVersion = \"1.0\"",
      "            type                 = \"HTTP_PROXY\"",
      "            uri                  = \"https://ip-ranges.amazonaws.com/ip-ranges.json\"",
      "          }",
      "        }",
      "      }",
      "    }",
      "  })",
      "",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_api_gateway_deployment\" \"example\" {",
      "  rest_api_id = aws_api_gateway_rest_api.example.id",
      "",
      "  triggers = {",
      "    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))",
      "  }",
      "",
      "  lifecycle {",
      "    create_before_destroy = true",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_stage\" \"example\" {",
      "  deployment_id = aws_api_gateway_deployment.example.id",
      "  rest_api_id   = aws_api_gateway_rest_api.example.id",
      "  stage_name    = \"example\"",
      "}",
      "",
      "resource \"aws_api_gateway_method_settings\" \"all\" {",
      "  rest_api_id = aws_api_gateway_rest_api.example.id",
      "  stage_name  = aws_api_gateway_stage.example.stage_name",
      "  method_path = \"*/*\"",
      "",
      "  settings {",
      "    metrics_enabled = true",
      "    logging_level   = \"ERROR\"",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_method_settings\" \"path_specific\" {",
      "  rest_api_id = aws_api_gateway_rest_api.example.id",
      "  stage_name  = aws_api_gateway_stage.example.stage_name",
      "  method_path = \"path1/GET\"",
      "",
      "  settings {",
      "    metrics_enabled = true",
      "    logging_level   = \"INFO\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-api_gateway_model": {
    "description": "Defines api_gateway_model",
    "prefix": "tf-aws-resource-api_gateway_model",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name        = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_model\" \"MyDemoModel\" {",
      "  rest_api_id  = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  name         = \"user\"",
      "  description  = \"a JSON schema\"",
      "  content_type = \"application/json\"",
      "",
      "  schema = <<EOF",
      "{",
      "  \"type\": \"object\"",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-api_gateway_request_validator": {
    "description": "Defines api_gateway_request_validator",
    "prefix": "tf-aws-resource-api_gateway_request_validator",
    "body": [
      "resource \"aws_api_gateway_request_validator\" \"example\" {",
      "  name                        = \"example\"",
      "  rest_api_id                 = aws_api_gateway_rest_api.example.id",
      "  validate_request_body       = true",
      "  validate_request_parameters = true",
      "}"
    ]
  },
  "aws-resource-api_gateway_resource": {
    "description": "Defines api_gateway_resource",
    "prefix": "tf-aws-resource-api_gateway_resource",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name        = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_resource\" \"MyDemoResource\" {",
      "  rest_api_id = aws_api_gateway_rest_api.MyDemoAPI.id",
      "  parent_id   = aws_api_gateway_rest_api.MyDemoAPI.root_resource_id",
      "  path_part   = \"mydemoresource\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_rest_api": {
    "description": "Defines api_gateway_rest_api",
    "prefix": "tf-aws-resource-api_gateway_rest_api",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"example\" {",
      "  body = jsonencode({",
      "    openapi = \"3.0.1\"",
      "    info = {",
      "      title   = \"example\"",
      "      version = \"1.0\"",
      "    }",
      "    paths = {",
      "      \"/path1\" = {",
      "        get = {",
      "          x-amazon-apigateway-integration = {",
      "            httpMethod           = \"GET\"",
      "            payloadFormatVersion = \"1.0\"",
      "            type                 = \"HTTP_PROXY\"",
      "            uri                  = \"https://ip-ranges.amazonaws.com/ip-ranges.json\"",
      "          }",
      "        }",
      "      }",
      "    }",
      "  })",
      "",
      "  name = \"example\"",
      "",
      "  endpoint_configuration {",
      "    types = [\"REGIONAL\"]",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_deployment\" \"example\" {",
      "  rest_api_id = aws_api_gateway_rest_api.example.id",
      "",
      "  triggers = {",
      "    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))",
      "  }",
      "",
      "  lifecycle {",
      "    create_before_destroy = true",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_stage\" \"example\" {",
      "  deployment_id = aws_api_gateway_deployment.example.id",
      "  rest_api_id   = aws_api_gateway_rest_api.example.id",
      "  stage_name    = \"example\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_rest_api_policy": {
    "description": "Defines api_gateway_rest_api_policy",
    "prefix": "tf-aws-resource-api_gateway_rest_api_policy",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"test\" {",
      "  name = \"example-rest-api\"",
      "}",
      "",
      "resource \"aws_api_gateway_rest_api_policy\" \"test\" {",
      "  rest_api_id = aws_api_gateway_rest_api.test.id",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"AWS\": \"*\"",
      "      },",
      "      \"Action\": \"execute-api:Invoke\",",
      "      \"Resource\": \"${aws_api_gateway_rest_api.test.execution_arn}\",",
      "      \"Condition\": {",
      "        \"IpAddress\": {",
      "          \"aws:SourceIp\": \"123.123.123.123/32\"",
      "        }",
      "      }",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-api_gateway_stage": {
    "description": "Defines api_gateway_stage",
    "prefix": "tf-aws-resource-api_gateway_stage",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"example\" {",
      "  body = jsonencode({",
      "    openapi = \"3.0.1\"",
      "    info = {",
      "      title   = \"example\"",
      "      version = \"1.0\"",
      "    }",
      "    paths = {",
      "      \"/path1\" = {",
      "        get = {",
      "          x-amazon-apigateway-integration = {",
      "            httpMethod           = \"GET\"",
      "            payloadFormatVersion = \"1.0\"",
      "            type                 = \"HTTP_PROXY\"",
      "            uri                  = \"https://ip-ranges.amazonaws.com/ip-ranges.json\"",
      "          }",
      "        }",
      "      }",
      "    }",
      "  })",
      "",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_api_gateway_deployment\" \"example\" {",
      "  rest_api_id = aws_api_gateway_rest_api.example.id",
      "",
      "  triggers = {",
      "    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))",
      "  }",
      "",
      "  lifecycle {",
      "    create_before_destroy = true",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_stage\" \"example\" {",
      "  deployment_id = aws_api_gateway_deployment.example.id",
      "  rest_api_id   = aws_api_gateway_rest_api.example.id",
      "  stage_name    = \"example\"",
      "}",
      "",
      "resource \"aws_api_gateway_method_settings\" \"example\" {",
      "  rest_api_id = aws_api_gateway_rest_api.example.id",
      "  stage_name  = aws_api_gateway_stage.example.stage_name",
      "  method_path = \"*/*\"",
      "",
      "  settings {",
      "    metrics_enabled = true",
      "    logging_level   = \"INFO\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-api_gateway_usage_plan": {
    "description": "Defines api_gateway_usage_plan",
    "prefix": "tf-aws-resource-api_gateway_usage_plan",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"example\" {",
      "  body = jsonencode({",
      "    openapi = \"3.0.1\"",
      "    info = {",
      "      title   = \"example\"",
      "      version = \"1.0\"",
      "    }",
      "    paths = {",
      "      \"/path1\" = {",
      "        get = {",
      "          x-amazon-apigateway-integration = {",
      "            httpMethod           = \"GET\"",
      "            payloadFormatVersion = \"1.0\"",
      "            type                 = \"HTTP_PROXY\"",
      "            uri                  = \"https://ip-ranges.amazonaws.com/ip-ranges.json\"",
      "          }",
      "        }",
      "      }",
      "    }",
      "  })",
      "",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_api_gateway_deployment\" \"example\" {",
      "  rest_api_id = aws_api_gateway_rest_api.example.id",
      "",
      "  triggers = {",
      "    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))",
      "  }",
      "",
      "  lifecycle {",
      "    create_before_destroy = true",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_stage\" \"development\" {",
      "  deployment_id = aws_api_gateway_deployment.example.id",
      "  rest_api_id   = aws_api_gateway_rest_api.example.id",
      "  stage_name    = \"development\"",
      "}",
      "",
      "resource \"aws_api_gateway_stage\" \"production\" {",
      "  deployment_id = aws_api_gateway_deployment.example.id",
      "  rest_api_id   = aws_api_gateway_rest_api.example.id",
      "  stage_name    = \"production\"",
      "}",
      "",
      "resource \"aws_api_gateway_usage_plan\" \"example\" {",
      "  name         = \"my-usage-plan\"",
      "  description  = \"my description\"",
      "  product_code = \"MYCODE\"",
      "",
      "  api_stages {",
      "    api_id = aws_api_gateway_rest_api.example.id",
      "    stage  = aws_api_gateway_stage.development.stage_name",
      "  }",
      "",
      "  api_stages {",
      "    api_id = aws_api_gateway_rest_api.example.id",
      "    stage  = aws_api_gateway_stage.production.stage_name",
      "  }",
      "",
      "  quota_settings {",
      "    limit  = 20",
      "    offset = 2",
      "    period = \"WEEK\"",
      "  }",
      "",
      "  throttle_settings {",
      "    burst_limit = 5",
      "    rate_limit  = 10",
      "  }",
      "}"
    ]
  },
  "aws-resource-api_gateway_usage_plan_key": {
    "description": "Defines api_gateway_usage_plan_key",
    "prefix": "tf-aws-resource-api_gateway_usage_plan_key",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"test\" {",
      "  name = \"MyDemoAPI\"",
      "}",
      "",
      "# ...",
      "",
      "resource \"aws_api_gateway_usage_plan\" \"myusageplan\" {",
      "  name = \"my_usage_plan\"",
      "",
      "  api_stages {",
      "    api_id = aws_api_gateway_rest_api.test.id",
      "    stage  = aws_api_gateway_deployment.foo.stage_name",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_api_key\" \"mykey\" {",
      "  name = \"my_key\"",
      "}",
      "",
      "resource \"aws_api_gateway_usage_plan_key\" \"main\" {",
      "  key_id        = aws_api_gateway_api_key.mykey.id",
      "  key_type      = \"API_KEY\"",
      "  usage_plan_id = aws_api_gateway_usage_plan.myusageplan.id",
      "}"
    ]
  },
  "aws-resource-api_gateway_vpc_link": {
    "description": "Defines api_gateway_vpc_link",
    "prefix": "tf-aws-resource-api_gateway_vpc_link",
    "body": [
      "resource \"aws_lb\" \"example\" {",
      "  name               = \"example\"",
      "  internal           = true",
      "  load_balancer_type = \"network\"",
      "",
      "  subnet_mapping {",
      "    subnet_id = \"12345\"",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_vpc_link\" \"example\" {",
      "  name        = \"example\"",
      "  description = \"example description\"",
      "  target_arns = [aws_lb.example.arn]",
      "}"
    ]
  },
  "aws-resource-apigatewayv2_api": {
    "description": "Defines apigatewayv2_api",
    "prefix": "tf-aws-resource-apigatewayv2_api",
    "body": [
      "resource \"aws_apigatewayv2_api\" \"example\" {",
      "  name                       = \"example-websocket-api\"",
      "  protocol_type              = \"WEBSOCKET\"",
      "  route_selection_expression = \"$request.body.action\"",
      "}"
    ]
  },
  "aws-resource-apigatewayv2_api_mapping": {
    "description": "Defines apigatewayv2_api_mapping",
    "prefix": "tf-aws-resource-apigatewayv2_api_mapping",
    "body": [
      "resource \"aws_apigatewayv2_api_mapping\" \"example\" {",
      "  api_id      = aws_apigatewayv2_api.example.id",
      "  domain_name = aws_apigatewayv2_domain_name.example.id",
      "  stage       = aws_apigatewayv2_stage.example.id",
      "}"
    ]
  },
  "aws-resource-apigatewayv2_authorizer": {
    "description": "Defines apigatewayv2_authorizer",
    "prefix": "tf-aws-resource-apigatewayv2_authorizer",
    "body": [
      "resource \"aws_apigatewayv2_authorizer\" \"example\" {",
      "  api_id           = aws_apigatewayv2_api.example.id",
      "  authorizer_type  = \"REQUEST\"",
      "  authorizer_uri   = aws_lambda_function.example.invoke_arn",
      "  identity_sources = [\"route.request.header.Auth\"]",
      "  name             = \"example-authorizer\"",
      "}"
    ]
  },
  "aws-resource-apigatewayv2_deployment": {
    "description": "Defines apigatewayv2_deployment",
    "prefix": "tf-aws-resource-apigatewayv2_deployment",
    "body": [
      "resource \"aws_apigatewayv2_deployment\" \"example\" {",
      "  api_id      = aws_apigatewayv2_route.example.api_id",
      "  description = \"Example deployment\"",
      "",
      "  lifecycle {",
      "    create_before_destroy = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-apigatewayv2_domain_name": {
    "description": "Defines apigatewayv2_domain_name",
    "prefix": "tf-aws-resource-apigatewayv2_domain_name",
    "body": [
      "resource \"aws_apigatewayv2_domain_name\" \"example\" {",
      "  domain_name = \"ws-api.example.com\"",
      "",
      "  domain_name_configuration {",
      "    certificate_arn = aws_acm_certificate.example.arn",
      "    endpoint_type   = \"REGIONAL\"",
      "    security_policy = \"TLS_1_2\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-apigatewayv2_integration": {
    "description": "Defines apigatewayv2_integration",
    "prefix": "tf-aws-resource-apigatewayv2_integration",
    "body": [
      "resource \"aws_apigatewayv2_integration\" \"example\" {",
      "  api_id           = aws_apigatewayv2_api.example.id",
      "  integration_type = \"MOCK\"",
      "}"
    ]
  },
  "aws-resource-apigatewayv2_integration_response": {
    "description": "Defines apigatewayv2_integration_response",
    "prefix": "tf-aws-resource-apigatewayv2_integration_response",
    "body": [
      "resource \"aws_apigatewayv2_integration_response\" \"example\" {",
      "  api_id                   = aws_apigatewayv2_api.example.id",
      "  integration_id           = aws_apigatewayv2_integration.example.id",
      "  integration_response_key = \"/200/\"",
      "}"
    ]
  },
  "aws-resource-apigatewayv2_model": {
    "description": "Defines apigatewayv2_model",
    "prefix": "tf-aws-resource-apigatewayv2_model",
    "body": [
      "resource \"aws_apigatewayv2_model\" \"example\" {",
      "  api_id       = aws_apigatewayv2_api.example.id",
      "  content_type = \"application/json\"",
      "  name         = \"example\"",
      "",
      "  schema = <<EOF",
      "{",
      "  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
      "  \"title\": \"ExampleModel\",",
      "  \"type\": \"object\",",
      "  \"properties\": {",
      "    \"id\": { \"type\": \"string\" }",
      "  }",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-apigatewayv2_route": {
    "description": "Defines apigatewayv2_route",
    "prefix": "tf-aws-resource-apigatewayv2_route",
    "body": [
      "resource \"aws_apigatewayv2_api\" \"example\" {",
      "  name                       = \"example-websocket-api\"",
      "  protocol_type              = \"WEBSOCKET\"",
      "  route_selection_expression = \"$request.body.action\"",
      "}",
      "",
      "resource \"aws_apigatewayv2_route\" \"example\" {",
      "  api_id    = aws_apigatewayv2_api.example.id",
      "  route_key = \"$default\"",
      "}"
    ]
  },
  "aws-resource-apigatewayv2_route_response": {
    "description": "Defines apigatewayv2_route_response",
    "prefix": "tf-aws-resource-apigatewayv2_route_response",
    "body": [
      "resource \"aws_apigatewayv2_route_response\" \"example\" {",
      "  api_id             = aws_apigatewayv2_api.example.id",
      "  route_id           = aws_apigatewayv2_route.example.id",
      "  route_response_key = \"$default\"",
      "}"
    ]
  },
  "aws-resource-apigatewayv2_stage": {
    "description": "Defines apigatewayv2_stage",
    "prefix": "tf-aws-resource-apigatewayv2_stage",
    "body": [
      "resource \"aws_apigatewayv2_stage\" \"example\" {",
      "  api_id = aws_apigatewayv2_api.example.id",
      "  name   = \"example-stage\"",
      "}"
    ]
  },
  "aws-resource-apigatewayv2_vpc_link": {
    "description": "Defines apigatewayv2_vpc_link",
    "prefix": "tf-aws-resource-apigatewayv2_vpc_link",
    "body": [
      "resource \"aws_apigatewayv2_vpc_link\" \"example\" {",
      "  name               = \"example\"",
      "  security_group_ids = [data.aws_security_group.example.id]",
      "  subnet_ids         = data.aws_subnet_ids.example.ids",
      "",
      "  tags = {",
      "    Usage = \"example\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-app_cookie_stickiness_policy": {
    "description": "Defines app_cookie_stickiness_policy",
    "prefix": "tf-aws-resource-app_cookie_stickiness_policy",
    "body": [
      "resource \"aws_elb\" \"lb\" {",
      "  name               = \"test-lb\"",
      "  availability_zones = [\"us-east-1a\"]",
      "",
      "  listener {",
      "    instance_port     = 8000",
      "    instance_protocol = \"http\"",
      "    lb_port           = 80",
      "    lb_protocol       = \"http\"",
      "  }",
      "}",
      "",
      "resource \"aws_app_cookie_stickiness_policy\" \"foo\" {",
      "  name          = \"foo_policy\"",
      "  load_balancer = aws_elb.lb.name",
      "  lb_port       = 80",
      "  cookie_name   = \"MyAppCookie\"",
      "}"
    ]
  },
  "aws-resource-appautoscaling_policy": {
    "description": "Defines appautoscaling_policy",
    "prefix": "tf-aws-resource-appautoscaling_policy",
    "body": [
      "resource \"aws_appautoscaling_target\" \"dynamodb_table_read_target\" {",
      "  max_capacity       = 100",
      "  min_capacity       = 5",
      "  resource_id        = \"table/tableName\"",
      "  scalable_dimension = \"dynamodb:table:ReadCapacityUnits\"",
      "  service_namespace  = \"dynamodb\"",
      "}",
      "",
      "resource \"aws_appautoscaling_policy\" \"dynamodb_table_read_policy\" {",
      "  name               = \"DynamoDBReadCapacityUtilization:${aws_appautoscaling_target.dynamodb_table_read_target.resource_id}\"",
      "  policy_type        = \"TargetTrackingScaling\"",
      "  resource_id        = aws_appautoscaling_target.dynamodb_table_read_target.resource_id",
      "  scalable_dimension = aws_appautoscaling_target.dynamodb_table_read_target.scalable_dimension",
      "  service_namespace  = aws_appautoscaling_target.dynamodb_table_read_target.service_namespace",
      "",
      "  target_tracking_scaling_policy_configuration {",
      "    predefined_metric_specification {",
      "      predefined_metric_type = \"DynamoDBReadCapacityUtilization\"",
      "    }",
      "",
      "    target_value = 70",
      "  }",
      "}"
    ]
  },
  "aws-resource-appautoscaling_scheduled_action": {
    "description": "Defines appautoscaling_scheduled_action",
    "prefix": "tf-aws-resource-appautoscaling_scheduled_action",
    "body": [
      "resource \"aws_appautoscaling_target\" \"dynamodb\" {",
      "  max_capacity       = 100",
      "  min_capacity       = 5",
      "  resource_id        = \"table/tableName\"",
      "  scalable_dimension = \"dynamodb:table:ReadCapacityUnits\"",
      "  service_namespace  = \"dynamodb\"",
      "}",
      "",
      "resource \"aws_appautoscaling_scheduled_action\" \"dynamodb\" {",
      "  name               = \"dynamodb\"",
      "  service_namespace  = aws_appautoscaling_target.dynamodb.service_namespace",
      "  resource_id        = aws_appautoscaling_target.dynamodb.resource_id",
      "  scalable_dimension = aws_appautoscaling_target.dynamodb.scalable_dimension",
      "  schedule           = \"at(2006-01-02T15:04:05)\"",
      "",
      "  scalable_target_action {",
      "    min_capacity = 1",
      "    max_capacity = 200",
      "  }",
      "}"
    ]
  },
  "aws-resource-appautoscaling_target": {
    "description": "Defines appautoscaling_target",
    "prefix": "tf-aws-resource-appautoscaling_target",
    "body": [
      "resource \"aws_appautoscaling_target\" \"dynamodb_table_read_target\" {",
      "  max_capacity       = 100",
      "  min_capacity       = 5",
      "  resource_id        = \"table/${aws_dynamodb_table.example.name}\"",
      "  scalable_dimension = \"dynamodb:table:ReadCapacityUnits\"",
      "  service_namespace  = \"dynamodb\"",
      "}"
    ]
  },
  "aws-resource-appmesh_gateway_route": {
    "description": "Defines appmesh_gateway_route",
    "prefix": "tf-aws-resource-appmesh_gateway_route",
    "body": [
      "resource \"aws_appmesh_gateway_route\" \"example\" {",
      "  name                 = \"example-gateway-route\"",
      "  mesh_name            = \"example-service-mesh\"",
      "  virtual_gateway_name = aws_appmesh_virtual_gateway.example.name",
      "",
      "  spec {",
      "    http_route {",
      "      action {",
      "        target {",
      "          virtual_service {",
      "            virtual_service_name = aws_appmesh_virtual_service.example.name",
      "          }",
      "        }",
      "      }",
      "",
      "      match {",
      "        prefix = \"/\"",
      "      }",
      "    }",
      "  }",
      "",
      "  tags = {",
      "    Environment = \"test\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-appmesh_mesh": {
    "description": "Defines appmesh_mesh",
    "prefix": "tf-aws-resource-appmesh_mesh",
    "body": [
      "resource \"aws_appmesh_mesh\" \"simple\" {",
      "  name = \"simpleapp\"",
      "}"
    ]
  },
  "aws-resource-appmesh_route": {
    "description": "Defines appmesh_route",
    "prefix": "tf-aws-resource-appmesh_route",
    "body": [
      "resource \"aws_appmesh_route\" \"serviceb\" {",
      "  name                = \"serviceB-route\"",
      "  mesh_name           = aws_appmesh_mesh.simple.id",
      "  virtual_router_name = aws_appmesh_virtual_router.serviceb.name",
      "",
      "  spec {",
      "    http_route {",
      "      match {",
      "        prefix = \"/\"",
      "      }",
      "",
      "      action {",
      "        weighted_target {",
      "          virtual_node = aws_appmesh_virtual_node.serviceb1.name",
      "          weight       = 90",
      "        }",
      "",
      "        weighted_target {",
      "          virtual_node = aws_appmesh_virtual_node.serviceb2.name",
      "          weight       = 10",
      "        }",
      "      }",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-appmesh_virtual_gateway": {
    "description": "Defines appmesh_virtual_gateway",
    "prefix": "tf-aws-resource-appmesh_virtual_gateway",
    "body": [
      "resource \"aws_appmesh_virtual_gateway\" \"example\" {",
      "  name      = \"example-virtual-gateway\"",
      "  mesh_name = \"example-service-mesh\"",
      "",
      "  spec {",
      "    listener {",
      "      port_mapping {",
      "        port     = 8080",
      "        protocol = \"http\"",
      "      }",
      "    }",
      "  }",
      "",
      "  tags = {",
      "    Environment = \"test\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-appmesh_virtual_node": {
    "description": "Defines appmesh_virtual_node",
    "prefix": "tf-aws-resource-appmesh_virtual_node",
    "body": [
      "resource \"aws_appmesh_virtual_node\" \"serviceb1\" {",
      "  name      = \"serviceBv1\"",
      "  mesh_name = aws_appmesh_mesh.simple.id",
      "",
      "  spec {",
      "    backend {",
      "      virtual_service {",
      "        virtual_service_name = \"servicea.simpleapp.local\"",
      "      }",
      "    }",
      "",
      "    listener {",
      "      port_mapping {",
      "        port     = 8080",
      "        protocol = \"http\"",
      "      }",
      "    }",
      "",
      "    service_discovery {",
      "      dns {",
      "        hostname = \"serviceb.simpleapp.local\"",
      "      }",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-appmesh_virtual_router": {
    "description": "Defines appmesh_virtual_router",
    "prefix": "tf-aws-resource-appmesh_virtual_router",
    "body": [
      "resource \"aws_appmesh_virtual_router\" \"serviceb\" {",
      "  name      = \"serviceB\"",
      "  mesh_name = aws_appmesh_mesh.simple.id",
      "",
      "  spec {",
      "    listener {",
      "      port_mapping {",
      "        port     = 8080",
      "        protocol = \"http\"",
      "      }",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-appmesh_virtual_service": {
    "description": "Defines appmesh_virtual_service",
    "prefix": "tf-aws-resource-appmesh_virtual_service",
    "body": [
      "resource \"aws_appmesh_virtual_service\" \"servicea\" {",
      "  name      = \"servicea.simpleapp.local\"",
      "  mesh_name = aws_appmesh_mesh.simple.id",
      "",
      "  spec {",
      "    provider {",
      "      virtual_node {",
      "        virtual_node_name = aws_appmesh_virtual_node.serviceb1.name",
      "      }",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-appsync_api_key": {
    "description": "Defines appsync_api_key",
    "prefix": "tf-aws-resource-appsync_api_key",
    "body": [
      "resource \"aws_appsync_graphql_api\" \"example\" {",
      "  authentication_type = \"API_KEY\"",
      "  name                = \"example\"",
      "}",
      "",
      "resource \"aws_appsync_api_key\" \"example\" {",
      "  api_id  = aws_appsync_graphql_api.example.id",
      "  expires = \"2018-05-03T04:00:00Z\"",
      "}"
    ]
  },
  "aws-resource-appsync_datasource": {
    "description": "Defines appsync_datasource",
    "prefix": "tf-aws-resource-appsync_datasource",
    "body": [
      "resource \"aws_dynamodb_table\" \"example\" {",
      "  name           = \"example\"",
      "  read_capacity  = 1",
      "  write_capacity = 1",
      "  hash_key       = \"UserId\"",
      "",
      "  attribute {",
      "    name = \"UserId\"",
      "    type = \"S\"",
      "  }",
      "}",
      "",
      "resource \"aws_iam_role\" \"example\" {",
      "  name = \"example\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"appsync.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"example\" {",
      "  name = \"example\"",
      "  role = aws_iam_role.example.id",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"dynamodb:*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": [",
      "        \"${aws_dynamodb_table.example.arn}\"",
      "      ]",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_appsync_graphql_api\" \"example\" {",
      "  authentication_type = \"API_KEY\"",
      "  name                = \"tf_appsync_example\"",
      "}",
      "",
      "resource \"aws_appsync_datasource\" \"example\" {",
      "  api_id           = aws_appsync_graphql_api.example.id",
      "  name             = \"tf_appsync_example\"",
      "  service_role_arn = aws_iam_role.example.arn",
      "  type             = \"AMAZON_DYNAMODB\"",
      "",
      "  dynamodb_config {",
      "    table_name = aws_dynamodb_table.example.name",
      "  }",
      "}"
    ]
  },
  "aws-resource-appsync_function": {
    "description": "Defines appsync_function",
    "prefix": "tf-aws-resource-appsync_function",
    "body": [
      "resource \"aws_appsync_graphql_api\" \"example\" {",
      "  authentication_type = \"API_KEY\"",
      "  name                = \"example\"",
      "  schema              = <<EOF",
      "type Mutation {",
      "  putPost(id: ID!, title: String!): Post",
      "}",
      "",
      "type Post {",
      "  id: ID!",
      "  title: String!",
      "}",
      "",
      "type Query {",
      "  singlePost(id: ID!): Post",
      "}",
      "",
      "schema {",
      "  query: Query",
      "  mutation: Mutation",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_appsync_datasource\" \"example\" {",
      "  api_id = aws_appsync_graphql_api.example.id",
      "  name   = \"example\"",
      "  type   = \"HTTP\"",
      "",
      "  http_config {",
      "    endpoint = \"http://example.com\"",
      "  }",
      "}",
      "",
      "resource \"aws_appsync_function\" \"example\" {",
      "  api_id                   = aws_appsync_graphql_api.example.id",
      "  data_source              = aws_appsync_datasource.example.name",
      "  name                     = \"example\"",
      "  request_mapping_template = <<EOF",
      "{",
      "    \"version\": \"2018-05-29\",",
      "    \"method\": \"GET\",",
      "    \"resourcePath\": \"/\",",
      "    \"params\":{",
      "        \"headers\": $utils.http.copyheaders($ctx.request.headers)",
      "    }",
      "}",
      "EOF",
      "",
      "  response_mapping_template = <<EOF",
      "#if($ctx.result.statusCode == 200)",
      "    $ctx.result.body",
      "#else",
      "    $utils.appendError($ctx.result.body, $ctx.result.statusCode)",
      "#end",
      "EOF",
      "}"
    ]
  },
  "aws-resource-appsync_graphql_api": {
    "description": "Defines appsync_graphql_api",
    "prefix": "tf-aws-resource-appsync_graphql_api",
    "body": [
      "resource \"aws_appsync_graphql_api\" \"example\" {",
      "  authentication_type = \"API_KEY\"",
      "  name                = \"example\"",
      "}"
    ]
  },
  "aws-resource-appsync_resolver": {
    "description": "Defines appsync_resolver",
    "prefix": "tf-aws-resource-appsync_resolver",
    "body": [
      "resource \"aws_appsync_graphql_api\" \"test\" {",
      "  authentication_type = \"API_KEY\"",
      "  name                = \"tf-example\"",
      "",
      "  schema = <<EOF",
      "type Mutation {",
      "\tputPost(id: ID!, title: String!): Post",
      "}",
      "",
      "type Post {",
      "\tid: ID!",
      "\ttitle: String!",
      "}",
      "",
      "type Query {",
      "\tsinglePost(id: ID!): Post",
      "}",
      "",
      "schema {",
      "\tquery: Query",
      "\tmutation: Mutation",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_appsync_datasource\" \"test\" {",
      "  api_id = aws_appsync_graphql_api.test.id",
      "  name   = \"tf_example\"",
      "  type   = \"HTTP\"",
      "",
      "  http_config {",
      "    endpoint = \"http://example.com\"",
      "  }",
      "}",
      "",
      "# UNIT type resolver (default)",
      "resource \"aws_appsync_resolver\" \"test\" {",
      "  api_id      = aws_appsync_graphql_api.test.id",
      "  field       = \"singlePost\"",
      "  type        = \"Query\"",
      "  data_source = aws_appsync_datasource.test.name",
      "",
      "  request_template = <<EOF",
      "{",
      "    \"version\": \"2018-05-29\",",
      "    \"method\": \"GET\",",
      "    \"resourcePath\": \"/\",",
      "    \"params\":{",
      "        \"headers\": $utils.http.copyheaders($ctx.request.headers)",
      "    }",
      "}",
      "EOF",
      "",
      "  response_template = <<EOF",
      "#if($ctx.result.statusCode == 200)",
      "    $ctx.result.body",
      "#else",
      "    $utils.appendError($ctx.result.body, $ctx.result.statusCode)",
      "#end",
      "EOF",
      "",
      "  caching_config {",
      "    caching_keys = [",
      "      \"$context.identity.sub\",",
      "      \"$context.arguments.id\",",
      "    ]",
      "    ttl = 60",
      "  }",
      "}",
      "",
      "# PIPELINE type resolver",
      "resource \"aws_appsync_resolver\" \"Mutation_pipelineTest\" {",
      "  type              = \"Mutation\"",
      "  api_id            = aws_appsync_graphql_api.test.id",
      "  field             = \"pipelineTest\"",
      "  request_template  = \"{}\"",
      "  response_template = \"$util.toJson($ctx.result)\"",
      "  kind              = \"PIPELINE\"",
      "  pipeline_config {",
      "    functions = [",
      "      aws_appsync_function.test1.function_id,",
      "      aws_appsync_function.test2.function_id,",
      "      aws_appsync_function.test3.function_id,",
      "    ]",
      "  }",
      "}"
    ]
  },
  "aws-resource-athena_database": {
    "description": "Defines athena_database",
    "prefix": "tf-aws-resource-athena_database",
    "body": [
      "resource \"aws_s3_bucket\" \"hoge\" {",
      "  bucket = \"hoge\"",
      "}",
      "",
      "resource \"aws_athena_database\" \"hoge\" {",
      "  name   = \"database_name\"",
      "  bucket = aws_s3_bucket.hoge.bucket",
      "}"
    ]
  },
  "aws-resource-athena_named_query": {
    "description": "Defines athena_named_query",
    "prefix": "tf-aws-resource-athena_named_query",
    "body": [
      "resource \"aws_s3_bucket\" \"hoge\" {",
      "  bucket = \"tf-test\"",
      "}",
      "",
      "resource \"aws_kms_key\" \"test\" {",
      "  deletion_window_in_days = 7",
      "  description             = \"Athena KMS Key\"",
      "}",
      "",
      "resource \"aws_athena_workgroup\" \"test\" {",
      "  name = \"example\"",
      "",
      "  configuration {",
      "    result_configuration {",
      "      encryption_configuration {",
      "        encryption_option = \"SSE_KMS\"",
      "        kms_key_arn       = aws_kms_key.test.arn",
      "      }",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_athena_database\" \"hoge\" {",
      "  name   = \"users\"",
      "  bucket = aws_s3_bucket.hoge.id",
      "}",
      "",
      "resource \"aws_athena_named_query\" \"foo\" {",
      "  name      = \"bar\"",
      "  workgroup = aws_athena_workgroup.test.id",
      "  database  = aws_athena_database.hoge.name",
      "  query     = \"SELECT * FROM ${aws_athena_database.hoge.name} limit 10;\"",
      "}"
    ]
  },
  "aws-resource-athena_workgroup": {
    "description": "Defines athena_workgroup",
    "prefix": "tf-aws-resource-athena_workgroup",
    "body": [
      "resource \"aws_athena_workgroup\" \"example\" {",
      "  name = \"example\"",
      "",
      "  configuration {",
      "    enforce_workgroup_configuration    = true",
      "    publish_cloudwatch_metrics_enabled = true",
      "",
      "    result_configuration {",
      "      output_location = \"s3://${aws_s3_bucket.example.bucket}/output/\"",
      "",
      "      encryption_configuration {",
      "        encryption_option = \"SSE_KMS\"",
      "        kms_key_arn       = aws_kms_key.example.arn",
      "      }",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-autoscaling_attachment": {
    "description": "Defines autoscaling_attachment",
    "prefix": "tf-aws-resource-autoscaling_attachment",
    "body": [
      "# Create a new load balancer attachment",
      "resource \"aws_autoscaling_attachment\" \"asg_attachment_bar\" {",
      "  autoscaling_group_name = aws_autoscaling_group.asg.id",
      "  elb                    = aws_elb.bar.id",
      "}"
    ]
  },
  "aws-resource-autoscaling_group": {
    "description": "Defines autoscaling_group",
    "prefix": "tf-aws-resource-autoscaling_group",
    "body": [
      "resource \"aws_placement_group\" \"test\" {",
      "  name     = \"test\"",
      "  strategy = \"cluster\"",
      "}",
      "",
      "resource \"aws_autoscaling_group\" \"bar\" {",
      "  name                      = \"foobar3-terraform-test\"",
      "  max_size                  = 5",
      "  min_size                  = 2",
      "  health_check_grace_period = 300",
      "  health_check_type         = \"ELB\"",
      "  desired_capacity          = 4",
      "  force_delete              = true",
      "  placement_group           = aws_placement_group.test.id",
      "  launch_configuration      = aws_launch_configuration.foobar.name",
      "  vpc_zone_identifier       = [aws_subnet.example1.id, aws_subnet.example2.id]",
      "",
      "  initial_lifecycle_hook {",
      "    name                 = \"foobar\"",
      "    default_result       = \"CONTINUE\"",
      "    heartbeat_timeout    = 2000",
      "    lifecycle_transition = \"autoscaling:EC2_INSTANCE_LAUNCHING\"",
      "",
      "    notification_metadata = <<EOF",
      "{",
      "  \"foo\": \"bar\"",
      "}",
      "EOF",
      "",
      "    notification_target_arn = \"arn:aws:sqs:us-east-1:444455556666:queue1*\"",
      "    role_arn                = \"arn:aws:iam::123456789012:role/S3Access\"",
      "  }",
      "",
      "  tag {",
      "    key                 = \"foo\"",
      "    value               = \"bar\"",
      "    propagate_at_launch = true",
      "  }",
      "",
      "  timeouts {",
      "    delete = \"15m\"",
      "  }",
      "",
      "  tag {",
      "    key                 = \"lorem\"",
      "    value               = \"ipsum\"",
      "    propagate_at_launch = false",
      "  }",
      "}"
    ]
  },
  "aws-resource-autoscaling_lifecycle_hook": {
    "description": "Defines autoscaling_lifecycle_hook",
    "prefix": "tf-aws-resource-autoscaling_lifecycle_hook",
    "body": [
      "resource \"aws_autoscaling_group\" \"foobar\" {",
      "  availability_zones   = [\"us-west-2a\"]",
      "  name                 = \"terraform-test-foobar5\"",
      "  health_check_type    = \"EC2\"",
      "  termination_policies = [\"OldestInstance\"]",
      "",
      "  tag {",
      "    key                 = \"Foo\"",
      "    value               = \"foo-bar\"",
      "    propagate_at_launch = true",
      "  }",
      "}",
      "",
      "resource \"aws_autoscaling_lifecycle_hook\" \"foobar\" {",
      "  name                   = \"foobar\"",
      "  autoscaling_group_name = aws_autoscaling_group.foobar.name",
      "  default_result         = \"CONTINUE\"",
      "  heartbeat_timeout      = 2000",
      "  lifecycle_transition   = \"autoscaling:EC2_INSTANCE_LAUNCHING\"",
      "",
      "  notification_metadata = <<EOF",
      "{",
      "  \"foo\": \"bar\"",
      "}",
      "EOF",
      "",
      "  notification_target_arn = \"arn:aws:sqs:us-east-1:444455556666:queue1*\"",
      "  role_arn                = \"arn:aws:iam::123456789012:role/S3Access\"",
      "}"
    ]
  },
  "aws-resource-autoscaling_notification": {
    "description": "Defines autoscaling_notification",
    "prefix": "tf-aws-resource-autoscaling_notification",
    "body": [
      "resource \"aws_autoscaling_notification\" \"example_notifications\" {",
      "  group_names = [",
      "    aws_autoscaling_group.bar.name,",
      "    aws_autoscaling_group.foo.name,",
      "  ]",
      "",
      "  notifications = [",
      "    \"autoscaling:EC2_INSTANCE_LAUNCH\",",
      "    \"autoscaling:EC2_INSTANCE_TERMINATE\",",
      "    \"autoscaling:EC2_INSTANCE_LAUNCH_ERROR\",",
      "    \"autoscaling:EC2_INSTANCE_TERMINATE_ERROR\",",
      "  ]",
      "",
      "  topic_arn = aws_sns_topic.example.arn",
      "}",
      "",
      "resource \"aws_sns_topic\" \"example\" {",
      "  name = \"example-topic\"",
      "",
      "  # arn is an exported attribute",
      "}",
      "",
      "resource \"aws_autoscaling_group\" \"bar\" {",
      "  name = \"foobar1-terraform-test\"",
      "",
      "  # ...",
      "}",
      "",
      "resource \"aws_autoscaling_group\" \"foo\" {",
      "  name = \"barfoo-terraform-test\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "aws-resource-autoscaling_policy": {
    "description": "Defines autoscaling_policy",
    "prefix": "tf-aws-resource-autoscaling_policy",
    "body": [
      "resource \"aws_autoscaling_policy\" \"bat\" {",
      "  name                   = \"foobar3-terraform-test\"",
      "  scaling_adjustment     = 4",
      "  adjustment_type        = \"ChangeInCapacity\"",
      "  cooldown               = 300",
      "  autoscaling_group_name = aws_autoscaling_group.bar.name",
      "}",
      "",
      "resource \"aws_autoscaling_group\" \"bar\" {",
      "  availability_zones        = [\"us-east-1a\"]",
      "  name                      = \"foobar3-terraform-test\"",
      "  max_size                  = 5",
      "  min_size                  = 2",
      "  health_check_grace_period = 300",
      "  health_check_type         = \"ELB\"",
      "  force_delete              = true",
      "  launch_configuration      = aws_launch_configuration.foo.name",
      "}"
    ]
  },
  "aws-resource-autoscaling_schedule": {
    "description": "Defines autoscaling_schedule",
    "prefix": "tf-aws-resource-autoscaling_schedule",
    "body": [
      "resource \"aws_autoscaling_group\" \"foobar\" {",
      "  availability_zones        = [\"us-west-2a\"]",
      "  name                      = \"terraform-test-foobar5\"",
      "  max_size                  = 1",
      "  min_size                  = 1",
      "  health_check_grace_period = 300",
      "  health_check_type         = \"ELB\"",
      "  force_delete              = true",
      "  termination_policies      = [\"OldestInstance\"]",
      "}",
      "",
      "resource \"aws_autoscaling_schedule\" \"foobar\" {",
      "  scheduled_action_name  = \"foobar\"",
      "  min_size               = 0",
      "  max_size               = 1",
      "  desired_capacity       = 0",
      "  start_time             = \"2016-12-11T18:00:00Z\"",
      "  end_time               = \"2016-12-12T06:00:00Z\"",
      "  autoscaling_group_name = aws_autoscaling_group.foobar.name",
      "}"
    ]
  },
  "aws-resource-autoscalingplans_scaling_plan": {
    "description": "Defines autoscalingplans_scaling_plan",
    "prefix": "tf-aws-resource-autoscalingplans_scaling_plan",
    "body": [
      "data \"aws_availability_zones\" \"available\" {}",
      "",
      "resource \"aws_autoscaling_group\" \"example\" {",
      "  name_prefix = \"example\"",
      "",
      "  launch_configuration = aws_launch_configuration.example.name",
      "  availability_zones   = [data.aws_availability_zones.available.names[0]]",
      "",
      "  min_size = 0",
      "  max_size = 3",
      "",
      "  tags = [",
      "    {",
      "      key                 = \"application\"",
      "      value               = \"example\"",
      "      propagate_at_launch = true",
      "    },",
      "  ]",
      "}",
      "",
      "resource \"aws_autoscalingplans_scaling_plan\" \"example\" {",
      "  name = \"example-dynamic-cost-optimization\"",
      "",
      "  application_source {",
      "    tag_filter {",
      "      key    = \"application\"",
      "      values = [\"example\"]",
      "    }",
      "  }",
      "",
      "  scaling_instruction {",
      "    max_capacity       = 3",
      "    min_capacity       = 0",
      "    resource_id        = format(\"autoScalingGroup/%s\", aws_autoscaling_group.example.name)",
      "    scalable_dimension = \"autoscaling:autoScalingGroup:DesiredCapacity\"",
      "    service_namespace  = \"autoscaling\"",
      "",
      "    target_tracking_configuration {",
      "      predefined_scaling_metric_specification {",
      "        predefined_scaling_metric_type = \"ASGAverageCPUUtilization\"",
      "      }",
      "",
      "      target_value = 70",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-backup_global_settings": {
    "description": "Defines backup_global_settings",
    "prefix": "tf-aws-resource-backup_global_settings",
    "body": [
      "resource \"aws_backup_global_settings\" \"test\" {",
      "  global_settings = {",
      "    \"isCrossAccountBackupEnabled\" = \"true\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-backup_plan": {
    "description": "Defines backup_plan",
    "prefix": "tf-aws-resource-backup_plan",
    "body": [
      "resource \"aws_backup_plan\" \"example\" {",
      "  name = \"tf_example_backup_plan\"",
      "",
      "  rule {",
      "    rule_name         = \"tf_example_backup_rule\"",
      "    target_vault_name = aws_backup_vault.test.name",
      "    schedule          = \"cron(0 12 * * ? *)\"",
      "  }",
      "",
      "  advanced_backup_setting {",
      "    backup_options = {",
      "      WindowsVSS = \"enabled\"",
      "    }",
      "    resource_type = \"EC2\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-backup_region_settings": {
    "description": "Defines backup_region_settings",
    "prefix": "tf-aws-resource-backup_region_settings",
    "body": [
      "resource \"aws_backup_region_settings\" \"test\" {",
      "  resource_type_opt_in_preference = {",
      "    \"DynamoDB\"        = true",
      "    \"Aurora\"          = true",
      "    \"EBS\"             = true",
      "    \"EC2\"             = true",
      "    \"EFS\"             = true",
      "    \"FSx\"             = true",
      "    \"RDS\"             = true",
      "    \"Storage Gateway\" = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-backup_selection": {
    "description": "Defines backup_selection",
    "prefix": "tf-aws-resource-backup_selection",
    "body": [
      "resource \"aws_iam_role\" \"example\" {",
      "  name               = \"example\"",
      "  assume_role_policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [\"sts:AssumeRole\"],",
      "      \"Effect\": \"allow\",",
      "      \"Principal\": {",
      "        \"Service\": [\"backup.amazonaws.com\"]",
      "      }",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"example\" {",
      "  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup\"",
      "  role       = aws_iam_role.example.name",
      "}",
      "",
      "resource \"aws_backup_selection\" \"example\" {",
      "  # ... other configuration ...",
      "",
      "  iam_role_arn = aws_iam_role.example.arn",
      "}"
    ]
  },
  "aws-resource-backup_vault": {
    "description": "Defines backup_vault",
    "prefix": "tf-aws-resource-backup_vault",
    "body": [
      "resource \"aws_backup_vault\" \"example\" {",
      "  name        = \"example_backup_vault\"",
      "  kms_key_arn = aws_kms_key.example.arn",
      "}"
    ]
  },
  "aws-resource-backup_vault_notifications": {
    "description": "Defines backup_vault_notifications",
    "prefix": "tf-aws-resource-backup_vault_notifications",
    "body": [
      "resource \"aws_sns_topic\" \"test\" {",
      "  name = \"backup-vault-events\"",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"test\" {",
      "  policy_id = \"__default_policy_ID\"",
      "",
      "  statement {",
      "    actions = [",
      "      \"SNS:Publish\",",
      "    ]",
      "",
      "    effect = \"Allow\"",
      "",
      "    principals {",
      "      type        = \"Service\"",
      "      identifiers = [\"backup.amazonaws.com\"]",
      "    }",
      "",
      "    resources = [",
      "      aws_sns_topic.test.arn,",
      "    ]",
      "",
      "    sid = \"__default_statement_ID\"",
      "  }",
      "}",
      "",
      "resource \"aws_sns_topic_policy\" \"test\" {",
      "  arn    = aws_sns_topic.test.arn",
      "  policy = data.aws_iam_policy_document.test.json",
      "}",
      "",
      "resource \"aws_backup_vault_notifications\" \"test\" {",
      "  backup_vault_name   = \"example_backup_vault\"",
      "  sns_topic_arn       = aws_sns_topic.test.arn",
      "  backup_vault_events = [\"BACKUP_JOB_STARTED\", \"RESTORE_JOB_COMPLETED\"]",
      "}"
    ]
  },
  "aws-resource-backup_vault_policy": {
    "description": "Defines backup_vault_policy",
    "prefix": "tf-aws-resource-backup_vault_policy",
    "body": [
      "resource \"aws_backup_vault\" \"example\" {",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_backup_vault_policy\" \"example\" {",
      "  backup_vault_name = aws_backup_vault.example.name",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Id\": \"default\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"default\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"AWS\": \"*\"",
      "      },",
      "      \"Action\": [",
      "\t\t\"backup:DescribeBackupVault\",",
      "\t\t\"backup:DeleteBackupVault\",",
      "\t\t\"backup:PutBackupVaultAccessPolicy\",",
      "\t\t\"backup:DeleteBackupVaultAccessPolicy\",",
      "\t\t\"backup:GetBackupVaultAccessPolicy\",",
      "\t\t\"backup:StartBackupJob\",",
      "\t\t\"backup:GetBackupVaultNotifications\",",
      "\t\t\"backup:PutBackupVaultNotifications\"",
      "      ],",
      "      \"Resource\": \"${aws_backup_vault.example.arn}\"",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-batch_compute_environment": {
    "description": "Defines batch_compute_environment",
    "prefix": "tf-aws-resource-batch_compute_environment",
    "body": [
      "resource \"aws_iam_role\" \"ecs_instance_role\" {",
      "  name = \"ecs_instance_role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "\t{",
      "\t    \"Action\": \"sts:AssumeRole\",",
      "\t    \"Effect\": \"Allow\",",
      "\t    \"Principal\": {",
      "\t\t\"Service\": \"ec2.amazonaws.com\"",
      "\t    }",
      "\t}",
      "    ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"ecs_instance_role\" {",
      "  role       = aws_iam_role.ecs_instance_role.name",
      "  policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role\"",
      "}",
      "",
      "resource \"aws_iam_instance_profile\" \"ecs_instance_role\" {",
      "  name = \"ecs_instance_role\"",
      "  role = aws_iam_role.ecs_instance_role.name",
      "}",
      "",
      "resource \"aws_iam_role\" \"aws_batch_service_role\" {",
      "  name = \"aws_batch_service_role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "\t{",
      "\t    \"Action\": \"sts:AssumeRole\",",
      "\t    \"Effect\": \"Allow\",",
      "\t    \"Principal\": {",
      "\t\t\"Service\": \"batch.amazonaws.com\"",
      "\t    }",
      "\t}",
      "    ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"aws_batch_service_role\" {",
      "  role       = aws_iam_role.aws_batch_service_role.name",
      "  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole\"",
      "}",
      "",
      "resource \"aws_security_group\" \"sample\" {",
      "  name = \"aws_batch_compute_environment_security_group\"",
      "",
      "  egress {",
      "    from_port   = 0",
      "    to_port     = 0",
      "    protocol    = \"-1\"",
      "    cidr_blocks = [\"0.0.0.0/0\"]",
      "  }",
      "}",
      "",
      "resource \"aws_vpc\" \"sample\" {",
      "  cidr_block = \"10.1.0.0/16\"",
      "}",
      "",
      "resource \"aws_subnet\" \"sample\" {",
      "  vpc_id     = aws_vpc.sample.id",
      "  cidr_block = \"10.1.1.0/24\"",
      "}",
      "",
      "resource \"aws_batch_compute_environment\" \"sample\" {",
      "  compute_environment_name = \"sample\"",
      "",
      "  compute_resources {",
      "    instance_role = aws_iam_instance_profile.ecs_instance_role.arn",
      "",
      "    instance_type = [",
      "      \"c4.large\",",
      "    ]",
      "",
      "    max_vcpus = 16",
      "    min_vcpus = 0",
      "",
      "    security_group_ids = [",
      "      aws_security_group.sample.id,",
      "    ]",
      "",
      "    subnets = [",
      "      aws_subnet.sample.id,",
      "    ]",
      "",
      "    type = \"EC2\"",
      "  }",
      "",
      "  service_role = aws_iam_role.aws_batch_service_role.arn",
      "  type         = \"MANAGED\"",
      "  depends_on   = [aws_iam_role_policy_attachment.aws_batch_service_role]",
      "}"
    ]
  },
  "aws-resource-batch_job_definition": {
    "description": "Defines batch_job_definition",
    "prefix": "tf-aws-resource-batch_job_definition",
    "body": [
      "resource \"aws_batch_job_definition\" \"test\" {",
      "  name = \"tf_test_batch_job_definition\"",
      "  type = \"container\"",
      "",
      "  container_properties = <<CONTAINER_PROPERTIES",
      "{",
      "\t\"command\": [\"ls\", \"-la\"],",
      "\t\"image\": \"busybox\",",
      "\t\"memory\": 1024,",
      "\t\"vcpus\": 1,",
      "\t\"volumes\": [",
      "      {",
      "        \"host\": {",
      "          \"sourcePath\": \"/tmp\"",
      "        },",
      "        \"name\": \"tmp\"",
      "      }",
      "    ],",
      "\t\"environment\": [",
      "\t\t{\"name\": \"VARNAME\", \"value\": \"VARVAL\"}",
      "\t],",
      "\t\"mountPoints\": [",
      "\t\t{",
      "          \"sourceVolume\": \"tmp\",",
      "          \"containerPath\": \"/tmp\",",
      "          \"readOnly\": false",
      "        }",
      "\t],",
      "    \"ulimits\": [",
      "      {",
      "        \"hardLimit\": 1024,",
      "        \"name\": \"nofile\",",
      "        \"softLimit\": 1024",
      "      }",
      "    ]",
      "}",
      "CONTAINER_PROPERTIES",
      "}"
    ]
  },
  "aws-resource-batch_job_queue": {
    "description": "Defines batch_job_queue",
    "prefix": "tf-aws-resource-batch_job_queue",
    "body": [
      "resource \"aws_batch_job_queue\" \"test_queue\" {",
      "  name     = \"tf-test-batch-job-queue\"",
      "  state    = \"ENABLED\"",
      "  priority = 1",
      "  compute_environments = [",
      "    aws_batch_compute_environment.test_environment_1.arn,",
      "    aws_batch_compute_environment.test_environment_2.arn,",
      "  ]",
      "}"
    ]
  },
  "aws-resource-budgets_budget": {
    "description": "Defines budgets_budget",
    "prefix": "tf-aws-resource-budgets_budget",
    "body": [
      "resource \"aws_budgets_budget\" \"ec2\" {",
      "  name              = \"budget-ec2-monthly\"",
      "  budget_type       = \"COST\"",
      "  limit_amount      = \"1200\"",
      "  limit_unit        = \"USD\"",
      "  time_period_end   = \"2087-06-15_00:00\"",
      "  time_period_start = \"2017-07-01_00:00\"",
      "  time_unit         = \"MONTHLY\"",
      "",
      "  cost_filters = {",
      "    Service = \"Amazon Elastic Compute Cloud - Compute\"",
      "  }",
      "",
      "  notification {",
      "    comparison_operator        = \"GREATER_THAN\"",
      "    threshold                  = 100",
      "    threshold_type             = \"PERCENTAGE\"",
      "    notification_type          = \"FORECASTED\"",
      "    subscriber_email_addresses = [\"test@example.com\"]",
      "  }",
      "}"
    ]
  },
  "aws-resource-cloud9_environment_ec2": {
    "description": "Defines cloud9_environment_ec2",
    "prefix": "tf-aws-resource-cloud9_environment_ec2",
    "body": [
      "resource \"aws_cloud9_environment_ec2\" \"example\" {",
      "  instance_type = \"t2.micro\"",
      "  name          = \"example-env\"",
      "}"
    ]
  },
  "aws-resource-cloudformation_stack": {
    "description": "Defines cloudformation_stack",
    "prefix": "tf-aws-resource-cloudformation_stack",
    "body": [
      "resource \"aws_cloudformation_stack\" \"network\" {",
      "  name = \"networking-stack\"",
      "",
      "  parameters = {",
      "    VPCCidr = \"10.0.0.0/16\"",
      "  }",
      "",
      "  template_body = <<STACK",
      "{",
      "  \"Parameters\" : {",
      "    \"VPCCidr\" : {",
      "      \"Type\" : \"String\",",
      "      \"Default\" : \"10.0.0.0/16\",",
      "      \"Description\" : \"Enter the CIDR block for the VPC. Default is 10.0.0.0/16.\"",
      "    }",
      "  },",
      "  \"Resources\" : {",
      "    \"myVpc\": {",
      "      \"Type\" : \"AWS::EC2::VPC\",",
      "      \"Properties\" : {",
      "        \"CidrBlock\" : { \"Ref\" : \"VPCCidr\" },",
      "        \"Tags\" : [",
      "          {\"Key\": \"Name\", \"Value\": \"Primary_CF_VPC\"}",
      "        ]",
      "      }",
      "    }",
      "  }",
      "}",
      "STACK",
      "}"
    ]
  },
  "aws-resource-cloudformation_stack_set": {
    "description": "Defines cloudformation_stack_set",
    "prefix": "tf-aws-resource-cloudformation_stack_set",
    "body": [
      "data \"aws_iam_policy_document\" \"AWSCloudFormationStackSetAdministrationRole_assume_role_policy\" {",
      "  statement {",
      "    actions = [\"sts:AssumeRole\"]",
      "    effect  = \"Allow\"",
      "",
      "    principals {",
      "      identifiers = [\"cloudformation.amazonaws.com\"]",
      "      type        = \"Service\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_iam_role\" \"AWSCloudFormationStackSetAdministrationRole\" {",
      "  assume_role_policy = data.aws_iam_policy_document.AWSCloudFormationStackSetAdministrationRole_assume_role_policy.json",
      "  name               = \"AWSCloudFormationStackSetAdministrationRole\"",
      "}",
      "",
      "resource \"aws_cloudformation_stack_set\" \"example\" {",
      "  administration_role_arn = aws_iam_role.AWSCloudFormationStackSetAdministrationRole.arn",
      "  name                    = \"example\"",
      "",
      "  parameters = {",
      "    VPCCidr = \"10.0.0.0/16\"",
      "  }",
      "",
      "  template_body = <<TEMPLATE",
      "{",
      "  \"Parameters\" : {",
      "    \"VPCCidr\" : {",
      "      \"Type\" : \"String\",",
      "      \"Default\" : \"10.0.0.0/16\",",
      "      \"Description\" : \"Enter the CIDR block for the VPC. Default is 10.0.0.0/16.\"",
      "    }",
      "  },",
      "  \"Resources\" : {",
      "    \"myVpc\": {",
      "      \"Type\" : \"AWS::EC2::VPC\",",
      "      \"Properties\" : {",
      "        \"CidrBlock\" : { \"Ref\" : \"VPCCidr\" },",
      "        \"Tags\" : [",
      "          {\"Key\": \"Name\", \"Value\": \"Primary_CF_VPC\"}",
      "        ]",
      "      }",
      "    }",
      "  }",
      "}",
      "TEMPLATE",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"AWSCloudFormationStackSetAdministrationRole_ExecutionPolicy\" {",
      "  statement {",
      "    actions   = [\"sts:AssumeRole\"]",
      "    effect    = \"Allow\"",
      "    resources = [\"arn:aws:iam::*:role/${aws_cloudformation_stack_set.example.execution_role_name}\"]",
      "  }",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"AWSCloudFormationStackSetAdministrationRole_ExecutionPolicy\" {",
      "  name   = \"ExecutionPolicy\"",
      "  policy = data.aws_iam_policy_document.AWSCloudFormationStackSetAdministrationRole_ExecutionPolicy.json",
      "  role   = aws_iam_role.AWSCloudFormationStackSetAdministrationRole.name",
      "}"
    ]
  },
  "aws-resource-cloudformation_stack_set_instance": {
    "description": "Defines cloudformation_stack_set_instance",
    "prefix": "tf-aws-resource-cloudformation_stack_set_instance",
    "body": [
      "resource \"aws_cloudformation_stack_set_instance\" \"example\" {",
      "  account_id     = \"123456789012\"",
      "  region         = \"us-east-1\"",
      "  stack_set_name = aws_cloudformation_stack_set.example.name",
      "}"
    ]
  },
  "aws-resource-cloudfront_cache_policy": {
    "description": "Defines cloudfront_cache_policy",
    "prefix": "tf-aws-resource-cloudfront_cache_policy",
    "body": [
      "resource \"aws_cloudfront_cache_policy\" \"example\" {",
      "  name        = \"example-policy\"",
      "  comment     = \"test comment\"",
      "  default_ttl = 50",
      "  max_ttl     = 100",
      "  min_ttl     = 1",
      "  parameters_in_cache_key_and_forwarded_to_origin {",
      "    cookies_config {",
      "      cookie_behavior = \"whitelist\"",
      "      cookies {",
      "        items = [\"example\"]",
      "      }",
      "    }",
      "    headers_config {",
      "      header_behavior = \"whitelist\"",
      "      headers {",
      "        items = [\"example\"]",
      "      }",
      "    }",
      "    query_strings_config {",
      "      query_string_behavior = \"whitelist\"",
      "      query_strings {",
      "        items = [\"example\"]",
      "      }",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-cloudfront_distribution": {
    "description": "Defines cloudfront_distribution",
    "prefix": "tf-aws-resource-cloudfront_distribution",
    "body": [
      "resource \"aws_s3_bucket\" \"b\" {",
      "  bucket = \"mybucket\"",
      "  acl    = \"private\"",
      "",
      "  tags = {",
      "    Name = \"My bucket\"",
      "  }",
      "}",
      "",
      "locals {",
      "  s3_origin_id = \"myS3Origin\"",
      "}",
      "",
      "resource \"aws_cloudfront_distribution\" \"s3_distribution\" {",
      "  origin {",
      "    domain_name = aws_s3_bucket.b.bucket_regional_domain_name",
      "    origin_id   = local.s3_origin_id",
      "",
      "    s3_origin_config {",
      "      origin_access_identity = \"origin-access-identity/cloudfront/ABCDEFG1234567\"",
      "    }",
      "  }",
      "",
      "  enabled             = true",
      "  is_ipv6_enabled     = true",
      "  comment             = \"Some comment\"",
      "  default_root_object = \"index.html\"",
      "",
      "  logging_config {",
      "    include_cookies = false",
      "    bucket          = \"mylogs.s3.amazonaws.com\"",
      "    prefix          = \"myprefix\"",
      "  }",
      "",
      "  aliases = [\"mysite.example.com\", \"yoursite.example.com\"]",
      "",
      "  default_cache_behavior {",
      "    allowed_methods  = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]",
      "    cached_methods   = [\"GET\", \"HEAD\"]",
      "    target_origin_id = local.s3_origin_id",
      "",
      "    forwarded_values {",
      "      query_string = false",
      "",
      "      cookies {",
      "        forward = \"none\"",
      "      }",
      "    }",
      "",
      "    viewer_protocol_policy = \"allow-all\"",
      "    min_ttl                = 0",
      "    default_ttl            = 3600",
      "    max_ttl                = 86400",
      "  }",
      "",
      "  # Cache behavior with precedence 0",
      "  ordered_cache_behavior {",
      "    path_pattern     = \"/content/immutable/*\"",
      "    allowed_methods  = [\"GET\", \"HEAD\", \"OPTIONS\"]",
      "    cached_methods   = [\"GET\", \"HEAD\", \"OPTIONS\"]",
      "    target_origin_id = local.s3_origin_id",
      "",
      "    forwarded_values {",
      "      query_string = false",
      "      headers      = [\"Origin\"]",
      "",
      "      cookies {",
      "        forward = \"none\"",
      "      }",
      "    }",
      "",
      "    min_ttl                = 0",
      "    default_ttl            = 86400",
      "    max_ttl                = 31536000",
      "    compress               = true",
      "    viewer_protocol_policy = \"redirect-to-https\"",
      "  }",
      "",
      "  # Cache behavior with precedence 1",
      "  ordered_cache_behavior {",
      "    path_pattern     = \"/content/*\"",
      "    allowed_methods  = [\"GET\", \"HEAD\", \"OPTIONS\"]",
      "    cached_methods   = [\"GET\", \"HEAD\"]",
      "    target_origin_id = local.s3_origin_id",
      "",
      "    forwarded_values {",
      "      query_string = false",
      "",
      "      cookies {",
      "        forward = \"none\"",
      "      }",
      "    }",
      "",
      "    min_ttl                = 0",
      "    default_ttl            = 3600",
      "    max_ttl                = 86400",
      "    compress               = true",
      "    viewer_protocol_policy = \"redirect-to-https\"",
      "  }",
      "",
      "  price_class = \"PriceClass_200\"",
      "",
      "  restrictions {",
      "    geo_restriction {",
      "      restriction_type = \"whitelist\"",
      "      locations        = [\"US\", \"CA\", \"GB\", \"DE\"]",
      "    }",
      "  }",
      "",
      "  tags = {",
      "    Environment = \"production\"",
      "  }",
      "",
      "  viewer_certificate {",
      "    cloudfront_default_certificate = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-cloudfront_origin_access_identity": {
    "description": "Defines cloudfront_origin_access_identity",
    "prefix": "tf-aws-resource-cloudfront_origin_access_identity",
    "body": [
      "resource \"aws_cloudfront_origin_access_identity\" \"origin_access_identity\" {",
      "  comment = \"Some comment\"",
      "}"
    ]
  },
  "aws-resource-cloudfront_origin_request_policy": {
    "description": "Defines cloudfront_origin_request_policy",
    "prefix": "tf-aws-resource-cloudfront_origin_request_policy",
    "body": [
      "resource \"aws_cloudfront_origin_request_policy\" \"example\" {",
      "  name    = \"example-policy\"",
      "  comment = \"example comment\"",
      "  cookies_config {",
      "    cookie_behavior = \"whitelist\"",
      "    cookies {",
      "      items = [\"example\"]",
      "    }",
      "  }",
      "  headers_config {",
      "    header_behavior = \"whitelist\"",
      "    headers {",
      "      items = [\"example\"]",
      "    }",
      "  }",
      "  query_strings_config {",
      "    query_string_behavior = \"whitelist\"",
      "    query_strings {",
      "      items = [\"example\"]",
      "    }",
      "  }",
      "}",
      ""
    ]
  },
  "aws-resource-cloudfront_public_key": {
    "description": "Defines cloudfront_public_key",
    "prefix": "tf-aws-resource-cloudfront_public_key",
    "body": [
      "resource \"aws_cloudfront_public_key\" \"example\" {",
      "  comment     = \"test public key\"",
      "  encoded_key = file(\"public_key.pem\")",
      "  name        = \"test_key\"",
      "}"
    ]
  },
  "aws-resource-cloudfront_realtime_log_config": {
    "description": "Defines cloudfront_realtime_log_config",
    "prefix": "tf-aws-resource-cloudfront_realtime_log_config",
    "body": [
      "resource \"aws_iam_role\" \"example\" {",
      "  name = \"cloudfront-realtime-log-config-example\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"cloudfront.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"example\" {",
      "  name = \"cloudfront-realtime-log-config-example\"",
      "  role = aws_iam_role.example.id",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "        \"Effect\": \"Allow\",",
      "        \"Action\": [",
      "          \"kinesis:DescribeStreamSummary\",",
      "          \"kinesis:DescribeStream\",",
      "          \"kinesis:PutRecord\",",
      "          \"kinesis:PutRecords\"",
      "        ],",
      "        \"Resource\": \"${aws_kinesis_stream.example.arn}\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_cloudfront_realtime_log_config\" \"example\" {",
      "  name          = \"example\"",
      "  sampling_rate = 75",
      "  fields        = [\"timestamp\", \"c-ip\"]",
      "",
      "  endpoint {",
      "    stream_type = \"Kinesis\"",
      "",
      "    kinesis_stream_config {",
      "      role_arn   = aws_iam_role.example.arn",
      "      stream_arn = aws_kinesis_stream.example.arn",
      "    }",
      "  }",
      "",
      "  depends_on = [aws_iam_role_policy.example]",
      "}"
    ]
  },
  "aws-resource-cloudhsm_v2_cluster": {
    "description": "Defines cloudhsm_v2_cluster",
    "prefix": "tf-aws-resource-cloudhsm_v2_cluster",
    "body": [
      "provider \"aws\" {",
      "  region = var.aws_region",
      "}",
      "",
      "data \"aws_availability_zones\" \"available\" {}",
      "",
      "resource \"aws_vpc\" \"cloudhsm_v2_vpc\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "",
      "  tags = {",
      "    Name = \"example-aws_cloudhsm_v2_cluster\"",
      "  }",
      "}",
      "",
      "resource \"aws_subnet\" \"cloudhsm_v2_subnets\" {",
      "  count                   = 2",
      "  vpc_id                  = aws_vpc.cloudhsm_v2_vpc.id",
      "  cidr_block              = element(var.subnets, count.index)",
      "  map_public_ip_on_launch = false",
      "  availability_zone       = element(data.aws_availability_zones.available.names, count.index)",
      "",
      "  tags = {",
      "    Name = \"example-aws_cloudhsm_v2_cluster\"",
      "  }",
      "}",
      "",
      "resource \"aws_cloudhsm_v2_cluster\" \"cloudhsm_v2_cluster\" {",
      "  hsm_type   = \"hsm1.medium\"",
      "  subnet_ids = aws_subnet.cloudhsm_v2_subnets.*.id",
      "",
      "  tags = {",
      "    Name = \"example-aws_cloudhsm_v2_cluster\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-cloudhsm_v2_hsm": {
    "description": "Defines cloudhsm_v2_hsm",
    "prefix": "tf-aws-resource-cloudhsm_v2_hsm",
    "body": [
      "data \"aws_cloudhsm_v2_cluster\" \"cluster\" {",
      "  cluster_id = var.cloudhsm_cluster_id",
      "}",
      "",
      "resource \"aws_cloudhsm_v2_hsm\" \"cloudhsm_v2_hsm\" {",
      "  subnet_id  = data.aws_cloudhsm_v2_cluster.cluster.subnet_ids[0]",
      "  cluster_id = data.aws_cloudhsm_v2_cluster.cluster.cluster_id",
      "}"
    ]
  },
  "aws-resource-cloudtrail": {
    "description": "Defines cloudtrail",
    "prefix": "tf-aws-resource-cloudtrail",
    "body": [
      "data \"aws_caller_identity\" \"current\" {}",
      "",
      "resource \"aws_cloudtrail\" \"foobar\" {",
      "  name                          = \"tf-trail-foobar\"",
      "  s3_bucket_name                = aws_s3_bucket.foo.id",
      "  s3_key_prefix                 = \"prefix\"",
      "  include_global_service_events = false",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"foo\" {",
      "  bucket        = \"tf-test-trail\"",
      "  force_destroy = true",
      "",
      "  policy = <<POLICY",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "        {",
      "            \"Sid\": \"AWSCloudTrailAclCheck\",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": {",
      "              \"Service\": \"cloudtrail.amazonaws.com\"",
      "            },",
      "            \"Action\": \"s3:GetBucketAcl\",",
      "            \"Resource\": \"arn:aws:s3:::tf-test-trail\"",
      "        },",
      "        {",
      "            \"Sid\": \"AWSCloudTrailWrite\",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": {",
      "              \"Service\": \"cloudtrail.amazonaws.com\"",
      "            },",
      "            \"Action\": \"s3:PutObject\",",
      "            \"Resource\": \"arn:aws:s3:::tf-test-trail/prefix/AWSLogs/${data.aws_caller_identity.current.account_id}/*\",",
      "            \"Condition\": {",
      "                \"StringEquals\": {",
      "                    \"s3:x-amz-acl\": \"bucket-owner-full-control\"",
      "                }",
      "            }",
      "        }",
      "    ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-cloudwatch_composite_alarm": {
    "description": "Defines cloudwatch_composite_alarm",
    "prefix": "tf-aws-resource-cloudwatch_composite_alarm",
    "body": [
      "resource \"aws_cloudwatch_composite_alarm\" \"example\" {",
      "  alarm_description = \"This is a composite alarm!\"",
      "  alarm_name        = \"example-composite-alarm\"",
      "",
      "  alarm_actions = aws_sns_topic.example.arn",
      "  ok_actions    = aws_sns_topic.example.arn",
      "",
      "  alarm_rule = <<EOF",
      "ALARM(${aws_cloudwatch_metric_alarm.alpha.alarm_name}) OR",
      "ALARM(${aws_cloudwatch_metric_alarm.bravo.alarm_name})",
      "EOF",
      "}"
    ]
  },
  "aws-resource-cloudwatch_dashboard": {
    "description": "Defines cloudwatch_dashboard",
    "prefix": "tf-aws-resource-cloudwatch_dashboard",
    "body": [
      "resource \"aws_cloudwatch_dashboard\" \"main\" {",
      "  dashboard_name = \"my-dashboard\"",
      "",
      "  dashboard_body = <<EOF",
      "{",
      "  \"widgets\": [",
      "    {",
      "      \"type\": \"metric\",",
      "      \"x\": 0,",
      "      \"y\": 0,",
      "      \"width\": 12,",
      "      \"height\": 6,",
      "      \"properties\": {",
      "        \"metrics\": [",
      "          [",
      "            \"AWS/EC2\",",
      "            \"CPUUtilization\",",
      "            \"InstanceId\",",
      "            \"i-012345\"",
      "          ]",
      "        ],",
      "        \"period\": 300,",
      "        \"stat\": \"Average\",",
      "        \"region\": \"us-east-1\",",
      "        \"title\": \"EC2 Instance CPU\"",
      "      }",
      "    },",
      "    {",
      "      \"type\": \"text\",",
      "      \"x\": 0,",
      "      \"y\": 7,",
      "      \"width\": 3,",
      "      \"height\": 3,",
      "      \"properties\": {",
      "        \"markdown\": \"Hello world\"",
      "      }",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-cloudwatch_event_archive": {
    "description": "Defines cloudwatch_event_archive",
    "prefix": "tf-aws-resource-cloudwatch_event_archive",
    "body": [
      "resource \"aws_cloudwatch_event_bus\" \"order\" {",
      "  name = \"orders\"",
      "}",
      "",
      "resource \"aws_cloudwatch_event_archive\" \"order\" {",
      "  name             = \"order-archive\"",
      "  event_source_arn = aws_cloudwatch_event_bus.order.arn",
      "}"
    ]
  },
  "aws-resource-cloudwatch_event_bus": {
    "description": "Defines cloudwatch_event_bus",
    "prefix": "tf-aws-resource-cloudwatch_event_bus",
    "body": [
      "resource \"aws_cloudwatch_event_bus\" \"messenger\" {",
      "  name = \"chat-messages\"",
      "}"
    ]
  },
  "aws-resource-cloudwatch_event_permission": {
    "description": "Defines cloudwatch_event_permission",
    "prefix": "tf-aws-resource-cloudwatch_event_permission",
    "body": [
      "resource \"aws_cloudwatch_event_permission\" \"DevAccountAccess\" {",
      "  principal    = \"123456789012\"",
      "  statement_id = \"DevAccountAccess\"",
      "}"
    ]
  },
  "aws-resource-cloudwatch_event_rule": {
    "description": "Defines cloudwatch_event_rule",
    "prefix": "tf-aws-resource-cloudwatch_event_rule",
    "body": [
      "resource \"aws_cloudwatch_event_rule\" \"console\" {",
      "  name        = \"capture-aws-sign-in\"",
      "  description = \"Capture each AWS Console Sign In\"",
      "",
      "  event_pattern = <<EOF",
      "{",
      "  \"detail-type\": [",
      "    \"AWS Console Sign In via CloudTrail\"",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_cloudwatch_event_target\" \"sns\" {",
      "  rule      = aws_cloudwatch_event_rule.console.name",
      "  target_id = \"SendToSNS\"",
      "  arn       = aws_sns_topic.aws_logins.arn",
      "}",
      "",
      "resource \"aws_sns_topic\" \"aws_logins\" {",
      "  name = \"aws-console-logins\"",
      "}",
      "",
      "resource \"aws_sns_topic_policy\" \"default\" {",
      "  arn    = aws_sns_topic.aws_logins.arn",
      "  policy = data.aws_iam_policy_document.sns_topic_policy.json",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"sns_topic_policy\" {",
      "  statement {",
      "    effect  = \"Allow\"",
      "    actions = [\"SNS:Publish\"]",
      "",
      "    principals {",
      "      type        = \"Service\"",
      "      identifiers = [\"events.amazonaws.com\"]",
      "    }",
      "",
      "    resources = [aws_sns_topic.aws_logins.arn]",
      "  }",
      "}"
    ]
  },
  "aws-resource-cloudwatch_event_target": {
    "description": "Defines cloudwatch_event_target",
    "prefix": "tf-aws-resource-cloudwatch_event_target",
    "body": [
      "resource \"aws_cloudwatch_event_target\" \"yada\" {",
      "  target_id = \"Yada\"",
      "  rule      = aws_cloudwatch_event_rule.console.name",
      "  arn       = aws_kinesis_stream.test_stream.arn",
      "",
      "  run_command_targets {",
      "    key    = \"tag:Name\"",
      "    values = [\"FooBar\"]",
      "  }",
      "",
      "  run_command_targets {",
      "    key    = \"InstanceIds\"",
      "    values = [\"i-162058cd308bffec2\"]",
      "  }",
      "}",
      "",
      "resource \"aws_cloudwatch_event_rule\" \"console\" {",
      "  name        = \"capture-ec2-scaling-events\"",
      "  description = \"Capture all EC2 scaling events\"",
      "",
      "  event_pattern = <<PATTERN",
      "{",
      "  \"source\": [",
      "    \"aws.autoscaling\"",
      "  ],",
      "  \"detail-type\": [",
      "    \"EC2 Instance Launch Successful\",",
      "    \"EC2 Instance Terminate Successful\",",
      "    \"EC2 Instance Launch Unsuccessful\",",
      "    \"EC2 Instance Terminate Unsuccessful\"",
      "  ]",
      "}",
      "PATTERN",
      "}",
      "",
      "resource \"aws_kinesis_stream\" \"test_stream\" {",
      "  name        = \"terraform-kinesis-test\"",
      "  shard_count = 1",
      "}"
    ]
  },
  "aws-resource-cloudwatch_log_destination": {
    "description": "Defines cloudwatch_log_destination",
    "prefix": "tf-aws-resource-cloudwatch_log_destination",
    "body": [
      "resource \"aws_cloudwatch_log_destination\" \"test_destination\" {",
      "  name       = \"test_destination\"",
      "  role_arn   = aws_iam_role.iam_for_cloudwatch.arn",
      "  target_arn = aws_kinesis_stream.kinesis_for_cloudwatch.arn",
      "}"
    ]
  },
  "aws-resource-cloudwatch_log_destination_policy": {
    "description": "Defines cloudwatch_log_destination_policy",
    "prefix": "tf-aws-resource-cloudwatch_log_destination_policy",
    "body": [
      "resource \"aws_cloudwatch_log_destination\" \"test_destination\" {",
      "  name       = \"test_destination\"",
      "  role_arn   = aws_iam_role.iam_for_cloudwatch.arn",
      "  target_arn = aws_kinesis_stream.kinesis_for_cloudwatch.arn",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"test_destination_policy\" {",
      "  statement {",
      "    effect = \"Allow\"",
      "",
      "    principals {",
      "      type = \"AWS\"",
      "",
      "      identifiers = [",
      "        \"123456789012\",",
      "      ]",
      "    }",
      "",
      "    actions = [",
      "      \"logs:PutSubscriptionFilter\",",
      "    ]",
      "",
      "    resources = [",
      "      aws_cloudwatch_log_destination.test_destination.arn,",
      "    ]",
      "  }",
      "}",
      "",
      "resource \"aws_cloudwatch_log_destination_policy\" \"test_destination_policy\" {",
      "  destination_name = aws_cloudwatch_log_destination.test_destination.name",
      "  access_policy    = data.aws_iam_policy_document.test_destination_policy.json",
      "}"
    ]
  },
  "aws-resource-cloudwatch_log_group": {
    "description": "Defines cloudwatch_log_group",
    "prefix": "tf-aws-resource-cloudwatch_log_group",
    "body": [
      "resource \"aws_cloudwatch_log_group\" \"yada\" {",
      "  name = \"Yada\"",
      "",
      "  tags = {",
      "    Environment = \"production\"",
      "    Application = \"serviceA\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-cloudwatch_log_metric_filter": {
    "description": "Defines cloudwatch_log_metric_filter",
    "prefix": "tf-aws-resource-cloudwatch_log_metric_filter",
    "body": [
      "resource \"aws_cloudwatch_log_metric_filter\" \"yada\" {",
      "  name           = \"MyAppAccessCount\"",
      "  pattern        = \"\"",
      "  log_group_name = aws_cloudwatch_log_group.dada.name",
      "",
      "  metric_transformation {",
      "    name      = \"EventCount\"",
      "    namespace = \"YourNamespace\"",
      "    value     = \"1\"",
      "  }",
      "}",
      "",
      "resource \"aws_cloudwatch_log_group\" \"dada\" {",
      "  name = \"MyApp/access.log\"",
      "}"
    ]
  },
  "aws-resource-cloudwatch_log_resource_policy": {
    "description": "Defines cloudwatch_log_resource_policy",
    "prefix": "tf-aws-resource-cloudwatch_log_resource_policy",
    "body": [
      "data \"aws_iam_policy_document\" \"elasticsearch-log-publishing-policy\" {",
      "  statement {",
      "    actions = [",
      "      \"logs:CreateLogStream\",",
      "      \"logs:PutLogEvents\",",
      "      \"logs:PutLogEventsBatch\",",
      "    ]",
      "",
      "    resources = [\"arn:aws:logs:*\"]",
      "",
      "    principals {",
      "      identifiers = [\"es.amazonaws.com\"]",
      "      type        = \"Service\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_cloudwatch_log_resource_policy\" \"elasticsearch-log-publishing-policy\" {",
      "  policy_document = data.aws_iam_policy_document.elasticsearch-log-publishing-policy.json",
      "  policy_name     = \"elasticsearch-log-publishing-policy\"",
      "}"
    ]
  },
  "aws-resource-cloudwatch_log_stream": {
    "description": "Defines cloudwatch_log_stream",
    "prefix": "tf-aws-resource-cloudwatch_log_stream",
    "body": [
      "resource \"aws_cloudwatch_log_group\" \"yada\" {",
      "  name = \"Yada\"",
      "}",
      "",
      "resource \"aws_cloudwatch_log_stream\" \"foo\" {",
      "  name           = \"SampleLogStream1234\"",
      "  log_group_name = aws_cloudwatch_log_group.yada.name",
      "}"
    ]
  },
  "aws-resource-cloudwatch_log_subscription_filter": {
    "description": "Defines cloudwatch_log_subscription_filter",
    "prefix": "tf-aws-resource-cloudwatch_log_subscription_filter",
    "body": [
      "resource \"aws_cloudwatch_log_subscription_filter\" \"test_lambdafunction_logfilter\" {",
      "  name            = \"test_lambdafunction_logfilter\"",
      "  role_arn        = aws_iam_role.iam_for_lambda.arn",
      "  log_group_name  = \"/aws/lambda/example_lambda_name\"",
      "  filter_pattern  = \"logtype test\"",
      "  destination_arn = aws_kinesis_stream.test_logstream.arn",
      "  distribution    = \"Random\"",
      "}"
    ]
  },
  "aws-resource-cloudwatch_metric_alarm": {
    "description": "Defines cloudwatch_metric_alarm",
    "prefix": "tf-aws-resource-cloudwatch_metric_alarm",
    "body": [
      "resource \"aws_cloudwatch_metric_alarm\" \"foobar\" {",
      "  alarm_name                = \"terraform-test-foobar5\"",
      "  comparison_operator       = \"GreaterThanOrEqualToThreshold\"",
      "  evaluation_periods        = \"2\"",
      "  metric_name               = \"CPUUtilization\"",
      "  namespace                 = \"AWS/EC2\"",
      "  period                    = \"120\"",
      "  statistic                 = \"Average\"",
      "  threshold                 = \"80\"",
      "  alarm_description         = \"This metric monitors ec2 cpu utilization\"",
      "  insufficient_data_actions = []",
      "}"
    ]
  },
  "aws-resource-codeartifact_domain": {
    "description": "Defines codeartifact_domain",
    "prefix": "tf-aws-resource-codeartifact_domain",
    "body": [
      "resource \"aws_codeartifact_domain\" \"example\" {",
      "  domain = \"example\"",
      "}"
    ]
  },
  "aws-resource-codeartifact_domain_permissions_policy": {
    "description": "Defines codeartifact_domain_permissions_policy",
    "prefix": "tf-aws-resource-codeartifact_domain_permissions_policy",
    "body": [
      "resource \"aws_kms_key\" \"example\" {",
      "  description = \"domain key\"",
      "}",
      "",
      "resource \"aws_codeartifact_domain\" \"example\" {",
      "  domain         = \"example.com\"",
      "  encryption_key = aws_kms_key.example.arn",
      "}",
      "",
      "resource \"aws_codeartifact_domain_permissions_policy\" \"test\" {",
      "  domain          = aws_codeartifact_domain.example.domain",
      "  policy_document = <<EOF",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "        {",
      "            \"Action\": \"codeartifact:CreateRepository\",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": \"*\",",
      "            \"Resource\": \"${aws_codeartifact_domain.example.arn}\"",
      "        }",
      "    ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-codeartifact_repository": {
    "description": "Defines codeartifact_repository",
    "prefix": "tf-aws-resource-codeartifact_repository",
    "body": [
      "resource \"aws_kms_key\" \"example\" {",
      "  description = \"domain key\"",
      "}",
      "",
      "resource \"aws_codeartifact_domain\" \"example\" {",
      "  domain         = \"example\"",
      "  encryption_key = aws_kms_key.example.arn",
      "}",
      "",
      "resource \"aws_codeartifact_repository\" \"test\" {",
      "  repository = \"example\"",
      "  domain     = aws_codeartifact_domain.example.domain",
      "}"
    ]
  },
  "aws-resource-codeartifact_repository_permissions_policy": {
    "description": "Defines codeartifact_repository_permissions_policy",
    "prefix": "tf-aws-resource-codeartifact_repository_permissions_policy",
    "body": [
      "resource \"aws_kms_key\" \"example\" {",
      "  description = \"domain key\"",
      "}",
      "",
      "resource \"aws_codeartifact_domain\" \"example\" {",
      "  domain         = \"example.com\"",
      "  encryption_key = aws_kms_key.example.arn",
      "}",
      "",
      "resource \"aws_codeartifact_repository\" \"example\" {",
      "  repository = \"example\"",
      "  domain     = aws_codeartifact_domain.example.domain",
      "}",
      "",
      "resource \"aws_codeartifact_repository_permissions_policy\" \"example\" {",
      "  repository      = aws_codeartifact_repository.example.repository",
      "  domain          = aws_codeartifact_domain.example.domain",
      "  policy_document = <<EOF",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "        {",
      "            \"Action\": \"codeartifact:CreateRepository\",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": \"*\",",
      "            \"Resource\": \"${aws_codeartifact_domain.example.arn}\"",
      "        }",
      "    ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-codebuild_project": {
    "description": "Defines codebuild_project",
    "prefix": "tf-aws-resource-codebuild_project",
    "body": [
      "resource \"aws_s3_bucket\" \"example\" {",
      "  bucket = \"example\"",
      "  acl    = \"private\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"example\" {",
      "  name = \"example\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Service\": \"codebuild.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"example\" {",
      "  role = aws_iam_role.example.name",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": [",
      "        \"*\"",
      "      ],",
      "      \"Action\": [",
      "        \"logs:CreateLogGroup\",",
      "        \"logs:CreateLogStream\",",
      "        \"logs:PutLogEvents\"",
      "      ]",
      "    },",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Action\": [",
      "        \"ec2:CreateNetworkInterface\",",
      "        \"ec2:DescribeDhcpOptions\",",
      "        \"ec2:DescribeNetworkInterfaces\",",
      "        \"ec2:DeleteNetworkInterface\",",
      "        \"ec2:DescribeSubnets\",",
      "        \"ec2:DescribeSecurityGroups\",",
      "        \"ec2:DescribeVpcs\"",
      "      ],",
      "      \"Resource\": \"*\"",
      "    },",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Action\": [",
      "        \"ec2:CreateNetworkInterfacePermission\"",
      "      ],",
      "      \"Resource\": [",
      "        \"arn:aws:ec2:us-east-1:123456789012:network-interface/*\"",
      "      ],",
      "      \"Condition\": {",
      "        \"StringEquals\": {",
      "          \"ec2:Subnet\": [",
      "            \"${aws_subnet.example1.arn}\",",
      "            \"${aws_subnet.example2.arn}\"",
      "          ],",
      "          \"ec2:AuthorizedService\": \"codebuild.amazonaws.com\"",
      "        }",
      "      }",
      "    },",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Action\": [",
      "        \"s3:*\"",
      "      ],",
      "      \"Resource\": [",
      "        \"${aws_s3_bucket.example.arn}\",",
      "        \"${aws_s3_bucket.example.arn}/*\"",
      "      ]",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_codebuild_project\" \"example\" {",
      "  name          = \"test-project\"",
      "  description   = \"test_codebuild_project\"",
      "  build_timeout = \"5\"",
      "  service_role  = aws_iam_role.example.arn",
      "",
      "  artifacts {",
      "    type = \"NO_ARTIFACTS\"",
      "  }",
      "",
      "  cache {",
      "    type     = \"S3\"",
      "    location = aws_s3_bucket.example.bucket",
      "  }",
      "",
      "  environment {",
      "    compute_type                = \"BUILD_GENERAL1_SMALL\"",
      "    image                       = \"aws/codebuild/standard:1.0\"",
      "    type                        = \"LINUX_CONTAINER\"",
      "    image_pull_credentials_type = \"CODEBUILD\"",
      "",
      "    environment_variable {",
      "      name  = \"SOME_KEY1\"",
      "      value = \"SOME_VALUE1\"",
      "    }",
      "",
      "    environment_variable {",
      "      name  = \"SOME_KEY2\"",
      "      value = \"SOME_VALUE2\"",
      "      type  = \"PARAMETER_STORE\"",
      "    }",
      "  }",
      "",
      "  logs_config {",
      "    cloudwatch_logs {",
      "      group_name  = \"log-group\"",
      "      stream_name = \"log-stream\"",
      "    }",
      "",
      "    s3_logs {",
      "      status   = \"ENABLED\"",
      "      location = \"${aws_s3_bucket.example.id}/build-log\"",
      "    }",
      "  }",
      "",
      "  source {",
      "    type            = \"GITHUB\"",
      "    location        = \"https://github.com/mitchellh/packer.git\"",
      "    git_clone_depth = 1",
      "",
      "    git_submodules_config {",
      "      fetch_submodules = true",
      "    }",
      "  }",
      "",
      "  source_version = \"master\"",
      "",
      "  vpc_config {",
      "    vpc_id = aws_vpc.example.id",
      "",
      "    subnets = [",
      "      aws_subnet.example1.id,",
      "      aws_subnet.example2.id,",
      "    ]",
      "",
      "    security_group_ids = [",
      "      aws_security_group.example1.id,",
      "      aws_security_group.example2.id,",
      "    ]",
      "  }",
      "",
      "  tags = {",
      "    Environment = \"Test\"",
      "  }",
      "}",
      "",
      "resource \"aws_codebuild_project\" \"project-with-cache\" {",
      "  name           = \"test-project-cache\"",
      "  description    = \"test_codebuild_project_cache\"",
      "  build_timeout  = \"5\"",
      "  queued_timeout = \"5\"",
      "",
      "  service_role = aws_iam_role.example.arn",
      "",
      "  artifacts {",
      "    type = \"NO_ARTIFACTS\"",
      "  }",
      "",
      "  cache {",
      "    type  = \"LOCAL\"",
      "    modes = [\"LOCAL_DOCKER_LAYER_CACHE\", \"LOCAL_SOURCE_CACHE\"]",
      "  }",
      "",
      "  environment {",
      "    compute_type                = \"BUILD_GENERAL1_SMALL\"",
      "    image                       = \"aws/codebuild/standard:1.0\"",
      "    type                        = \"LINUX_CONTAINER\"",
      "    image_pull_credentials_type = \"CODEBUILD\"",
      "",
      "    environment_variable {",
      "      name  = \"SOME_KEY1\"",
      "      value = \"SOME_VALUE1\"",
      "    }",
      "  }",
      "",
      "  source {",
      "    type            = \"GITHUB\"",
      "    location        = \"https://github.com/mitchellh/packer.git\"",
      "    git_clone_depth = 1",
      "  }",
      "",
      "  tags = {",
      "    Environment = \"Test\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-codebuild_report_group": {
    "description": "Defines codebuild_report_group",
    "prefix": "tf-aws-resource-codebuild_report_group",
    "body": [
      "resource \"aws_kms_key\" \"example\" {",
      "  description             = \"my test kms key\"",
      "  deletion_window_in_days = 7",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Id\": \"kms-tf-1\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"Enable IAM User Permissions\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"AWS\": \"*\"",
      "      },",
      "      \"Action\": \"kms:*\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"example\" {",
      "  bucket = \"my-test\"",
      "}",
      "",
      "resource \"aws_codebuild_report_group\" \"example\" {",
      "  name = \"my test report group\"",
      "  type = \"TEST\"",
      "",
      "  export_config {",
      "    type = \"S3\"",
      "",
      "    s3_destination {",
      "      bucket              = aws_s3_bucket.example.id",
      "      encryption_disabled = false",
      "      encryption_key      = aws_kms_key.example.arn",
      "      packaging           = \"NONE\"",
      "      path                = \"/some\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-codebuild_source_credential": {
    "description": "Defines codebuild_source_credential",
    "prefix": "tf-aws-resource-codebuild_source_credential",
    "body": [
      "resource \"aws_codebuild_source_credential\" \"example\" {",
      "  auth_type   = \"PERSONAL_ACCESS_TOKEN\"",
      "  server_type = \"GITHUB\"",
      "  token       = \"example\"",
      "}"
    ]
  },
  "aws-resource-codebuild_webhook": {
    "description": "Defines codebuild_webhook",
    "prefix": "tf-aws-resource-codebuild_webhook",
    "body": [
      "resource \"aws_codebuild_webhook\" \"example\" {",
      "  project_name = aws_codebuild_project.example.name",
      "",
      "  filter_group {",
      "    filter {",
      "      type    = \"EVENT\"",
      "      pattern = \"PUSH\"",
      "    }",
      "",
      "    filter {",
      "      type    = \"HEAD_REF\"",
      "      pattern = \"master\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-codecommit_repository": {
    "description": "Defines codecommit_repository",
    "prefix": "tf-aws-resource-codecommit_repository",
    "body": [
      "resource \"aws_codecommit_repository\" \"test\" {",
      "  repository_name = \"MyTestRepository\"",
      "  description     = \"This is the Sample App Repository\"",
      "}"
    ]
  },
  "aws-resource-codecommit_trigger": {
    "description": "Defines codecommit_trigger",
    "prefix": "tf-aws-resource-codecommit_trigger",
    "body": [
      "resource \"aws_codecommit_repository\" \"test\" {",
      "  repository_name = \"test\"",
      "}",
      "",
      "resource \"aws_codecommit_trigger\" \"test\" {",
      "  repository_name = aws_codecommit_repository.test.repository_name",
      "",
      "  trigger {",
      "    name            = \"all\"",
      "    events          = [\"all\"]",
      "    destination_arn = aws_sns_topic.test.arn",
      "  }",
      "}"
    ]
  },
  "aws-resource-codedeploy_app": {
    "description": "Defines codedeploy_app",
    "prefix": "tf-aws-resource-codedeploy_app",
    "body": [
      "resource \"aws_codedeploy_app\" \"example\" {",
      "  compute_platform = \"ECS\"",
      "  name             = \"example\"",
      "}"
    ]
  },
  "aws-resource-codedeploy_deployment_config": {
    "description": "Defines codedeploy_deployment_config",
    "prefix": "tf-aws-resource-codedeploy_deployment_config",
    "body": [
      "resource \"aws_codedeploy_deployment_config\" \"foo\" {",
      "  deployment_config_name = \"test-deployment-config\"",
      "",
      "  minimum_healthy_hosts {",
      "    type  = \"HOST_COUNT\"",
      "    value = 2",
      "  }",
      "}",
      "",
      "resource \"aws_codedeploy_deployment_group\" \"foo\" {",
      "  app_name               = aws_codedeploy_app.foo_app.name",
      "  deployment_group_name  = \"bar\"",
      "  service_role_arn       = aws_iam_role.foo_role.arn",
      "  deployment_config_name = aws_codedeploy_deployment_config.foo.id",
      "",
      "  ec2_tag_filter {",
      "    key   = \"filterkey\"",
      "    type  = \"KEY_AND_VALUE\"",
      "    value = \"filtervalue\"",
      "  }",
      "",
      "  trigger_configuration {",
      "    trigger_events     = [\"DeploymentFailure\"]",
      "    trigger_name       = \"foo-trigger\"",
      "    trigger_target_arn = \"foo-topic-arn\"",
      "  }",
      "",
      "  auto_rollback_configuration {",
      "    enabled = true",
      "    events  = [\"DEPLOYMENT_FAILURE\"]",
      "  }",
      "",
      "  alarm_configuration {",
      "    alarms  = [\"my-alarm-name\"]",
      "    enabled = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-codedeploy_deployment_group": {
    "description": "Defines codedeploy_deployment_group",
    "prefix": "tf-aws-resource-codedeploy_deployment_group",
    "body": [
      "resource \"aws_iam_role\" \"example\" {",
      "  name = \"example-role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Service\": \"codedeploy.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"AWSCodeDeployRole\" {",
      "  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole\"",
      "  role       = aws_iam_role.example.name",
      "}",
      "",
      "resource \"aws_codedeploy_app\" \"example\" {",
      "  name = \"example-app\"",
      "}",
      "",
      "resource \"aws_sns_topic\" \"example\" {",
      "  name = \"example-topic\"",
      "}",
      "",
      "resource \"aws_codedeploy_deployment_group\" \"example\" {",
      "  app_name              = aws_codedeploy_app.example.name",
      "  deployment_group_name = \"example-group\"",
      "  service_role_arn      = aws_iam_role.example.arn",
      "",
      "  ec2_tag_set {",
      "    ec2_tag_filter {",
      "      key   = \"filterkey1\"",
      "      type  = \"KEY_AND_VALUE\"",
      "      value = \"filtervalue\"",
      "    }",
      "",
      "    ec2_tag_filter {",
      "      key   = \"filterkey2\"",
      "      type  = \"KEY_AND_VALUE\"",
      "      value = \"filtervalue\"",
      "    }",
      "  }",
      "",
      "  trigger_configuration {",
      "    trigger_events     = [\"DeploymentFailure\"]",
      "    trigger_name       = \"example-trigger\"",
      "    trigger_target_arn = aws_sns_topic.example.arn",
      "  }",
      "",
      "  auto_rollback_configuration {",
      "    enabled = true",
      "    events  = [\"DEPLOYMENT_FAILURE\"]",
      "  }",
      "",
      "  alarm_configuration {",
      "    alarms  = [\"my-alarm-name\"]",
      "    enabled = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-codepipeline": {
    "description": "Defines codepipeline",
    "prefix": "tf-aws-resource-codepipeline",
    "body": [
      "resource \"aws_codepipeline\" \"codepipeline\" {",
      "  name     = \"tf-test-pipeline\"",
      "  role_arn = aws_iam_role.codepipeline_role.arn",
      "",
      "  artifact_store {",
      "    location = aws_s3_bucket.codepipeline_bucket.bucket",
      "    type     = \"S3\"",
      "",
      "    encryption_key {",
      "      id   = data.aws_kms_alias.s3kmskey.arn",
      "      type = \"KMS\"",
      "    }",
      "  }",
      "",
      "  stage {",
      "    name = \"Source\"",
      "",
      "    action {",
      "      name             = \"Source\"",
      "      category         = \"Source\"",
      "      owner            = \"AWS\"",
      "      provider         = \"CodeStarSourceConnection\"",
      "      version          = \"1\"",
      "      output_artifacts = [\"source_output\"]",
      "",
      "      configuration = {",
      "        ConnectionArn    = aws_codestarconnections_connection.example.arn",
      "        FullRepositoryId = \"my-organization/example\"",
      "        BranchName       = \"main\"",
      "      }",
      "    }",
      "  }",
      "",
      "  stage {",
      "    name = \"Build\"",
      "",
      "    action {",
      "      name             = \"Build\"",
      "      category         = \"Build\"",
      "      owner            = \"AWS\"",
      "      provider         = \"CodeBuild\"",
      "      input_artifacts  = [\"source_output\"]",
      "      output_artifacts = [\"build_output\"]",
      "      version          = \"1\"",
      "",
      "      configuration = {",
      "        ProjectName = \"test\"",
      "      }",
      "    }",
      "  }",
      "",
      "  stage {",
      "    name = \"Deploy\"",
      "",
      "    action {",
      "      name            = \"Deploy\"",
      "      category        = \"Deploy\"",
      "      owner           = \"AWS\"",
      "      provider        = \"CloudFormation\"",
      "      input_artifacts = [\"build_output\"]",
      "      version         = \"1\"",
      "",
      "      configuration = {",
      "        ActionMode     = \"REPLACE_ON_FAILURE\"",
      "        Capabilities   = \"CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM\"",
      "        OutputFileName = \"CreateStackOutput.json\"",
      "        StackName      = \"MyStack\"",
      "        TemplatePath   = \"build_output::sam-templated.yaml\"",
      "      }",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_codestarconnections_connection\" \"example\" {",
      "  name          = \"example-connection\"",
      "  provider_type = \"GitHub\"",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"codepipeline_bucket\" {",
      "  bucket = \"test-bucket\"",
      "  acl    = \"private\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"codepipeline_role\" {",
      "  name = \"test-role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Service\": \"codepipeline.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"codepipeline_policy\" {",
      "  name = \"codepipeline_policy\"",
      "  role = aws_iam_role.codepipeline_role.id",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\":\"Allow\",",
      "      \"Action\": [",
      "        \"s3:GetObject\",",
      "        \"s3:GetObjectVersion\",",
      "        \"s3:GetBucketVersioning\",",
      "        \"s3:PutObject\"",
      "      ],",
      "      \"Resource\": [",
      "        \"${aws_s3_bucket.codepipeline_bucket.arn}\",",
      "        \"${aws_s3_bucket.codepipeline_bucket.arn}/*\"",
      "      ]",
      "    },",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Action\": [",
      "        \"codebuild:BatchGetBuilds\",",
      "        \"codebuild:StartBuild\"",
      "      ],",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "data \"aws_kms_alias\" \"s3kmskey\" {",
      "  name = \"alias/myKmsKey\"",
      "}"
    ]
  },
  "aws-resource-codepipeline_webhook": {
    "description": "Defines codepipeline_webhook",
    "prefix": "tf-aws-resource-codepipeline_webhook",
    "body": [
      "resource \"aws_codepipeline\" \"bar\" {",
      "  name     = \"tf-test-pipeline\"",
      "  role_arn = aws_iam_role.bar.arn",
      "",
      "  artifact_store {",
      "    location = aws_s3_bucket.bar.bucket",
      "    type     = \"S3\"",
      "",
      "    encryption_key {",
      "      id   = data.aws_kms_alias.s3kmskey.arn",
      "      type = \"KMS\"",
      "    }",
      "  }",
      "",
      "  stage {",
      "    name = \"Source\"",
      "",
      "    action {",
      "      name             = \"Source\"",
      "      category         = \"Source\"",
      "      owner            = \"ThirdParty\"",
      "      provider         = \"GitHub\"",
      "      version          = \"1\"",
      "      output_artifacts = [\"test\"]",
      "",
      "      configuration = {",
      "        Owner  = \"my-organization\"",
      "        Repo   = \"test\"",
      "        Branch = \"master\"",
      "      }",
      "    }",
      "  }",
      "",
      "  stage {",
      "    name = \"Build\"",
      "",
      "    action {",
      "      name            = \"Build\"",
      "      category        = \"Build\"",
      "      owner           = \"AWS\"",
      "      provider        = \"CodeBuild\"",
      "      input_artifacts = [\"test\"]",
      "      version         = \"1\"",
      "",
      "      configuration = {",
      "        ProjectName = \"test\"",
      "      }",
      "    }",
      "  }",
      "}",
      "",
      "# A shared secret between GitHub and AWS that allows AWS",
      "# CodePipeline to authenticate the request came from GitHub.",
      "# Would probably be better to pull this from the environment",
      "# or something like SSM Parameter Store.",
      "locals {",
      "  webhook_secret = \"super-secret\"",
      "}",
      "",
      "resource \"aws_codepipeline_webhook\" \"bar\" {",
      "  name            = \"test-webhook-github-bar\"",
      "  authentication  = \"GITHUB_HMAC\"",
      "  target_action   = \"Source\"",
      "  target_pipeline = aws_codepipeline.bar.name",
      "",
      "  authentication_configuration {",
      "    secret_token = local.webhook_secret",
      "  }",
      "",
      "  filter {",
      "    json_path    = \"$.ref\"",
      "    match_equals = \"refs/heads/{Branch}\"",
      "  }",
      "}",
      "",
      "# Wire the CodePipeline webhook into a GitHub repository.",
      "resource \"github_repository_webhook\" \"bar\" {",
      "  repository = github_repository.repo.name",
      "",
      "  name = \"web\"",
      "",
      "  configuration {",
      "    url          = aws_codepipeline_webhook.bar.url",
      "    content_type = \"json\"",
      "    insecure_ssl = true",
      "    secret       = local.webhook_secret",
      "  }",
      "",
      "  events = [\"push\"]",
      "}"
    ]
  },
  "aws-resource-codestarconnections_connection": {
    "description": "Defines codestarconnections_connection",
    "prefix": "tf-aws-resource-codestarconnections_connection",
    "body": [
      "resource \"aws_codestarconnections_connection\" \"example\" {",
      "  name          = \"example-connection\"",
      "  provider_type = \"Bitbucket\"",
      "}",
      "",
      "resource \"aws_codepipeline\" \"example\" {",
      "  name     = \"tf-test-pipeline\"",
      "  role_arn = aws_iam_role.codepipeline_role.arn",
      "",
      "  artifact_store {",
      "    # ...",
      "  }",
      "",
      "  stage {",
      "    name = \"Source\"",
      "    action {",
      "      name             = \"Source\"",
      "      category         = \"Source\"",
      "      owner            = \"AWS\"",
      "      provider         = \"CodeStarSourceConnection\"",
      "      version          = \"1\"",
      "      output_artifacts = [\"source_output\"]",
      "      configuration = {",
      "        ConnectionArn    = aws_codestarconnections_connection.example.arn",
      "        FullRepositoryId = \"my-organization/test\"",
      "        BranchName       = \"main\"",
      "      }",
      "    }",
      "  }",
      "",
      "  stage {",
      "    name = \"Build\"",
      "    action {",
      "      # ...",
      "    }",
      "  }",
      "",
      "  stage {",
      "    name = \"Deploy\"",
      "    action {",
      "      # ...",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-codestarnotifications_notification_rule": {
    "description": "Defines codestarnotifications_notification_rule",
    "prefix": "tf-aws-resource-codestarnotifications_notification_rule",
    "body": [
      "resource \"aws_codecommit_repository\" \"code\" {",
      "  repository_name = \"example-code-repo\"",
      "}",
      "",
      "resource \"aws_sns_topic\" \"notif\" {",
      "  name = \"notification\"",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"notif_access\" {",
      "  statement {",
      "    actions = [\"sns:Publish\"]",
      "",
      "    principals {",
      "      type        = \"Service\"",
      "      identifiers = [\"codestar-notifications.amazonaws.com\"]",
      "    }",
      "",
      "    resources = [aws_sns_topic.notif.arn]",
      "  }",
      "}",
      "",
      "resource \"aws_sns_topic_policy\" \"default\" {",
      "  arn    = aws_sns_topic.notif.arn",
      "  policy = data.aws_iam_policy_document.notif_access.json",
      "}",
      "",
      "resource \"aws_codestarnotifications_notification_rule\" \"commits\" {",
      "  detail_type    = \"BASIC\"",
      "  event_type_ids = [\"codecommit-repository-comments-on-commits\"]",
      "",
      "  name     = \"example-code-repo-commits\"",
      "  resource = aws_codecommit_repository.code.arn",
      "",
      "  target {",
      "    address = aws_sns_topic.notif.arn",
      "  }",
      "}"
    ]
  },
  "aws-resource-cognito_identity_pool": {
    "description": "Defines cognito_identity_pool",
    "prefix": "tf-aws-resource-cognito_identity_pool",
    "body": [
      "resource \"aws_iam_saml_provider\" \"default\" {",
      "  name                   = \"my-saml-provider\"",
      "  saml_metadata_document = file(\"saml-metadata.xml\")",
      "}",
      "",
      "resource \"aws_cognito_identity_pool\" \"main\" {",
      "  identity_pool_name               = \"identity pool\"",
      "  allow_unauthenticated_identities = false",
      "",
      "  cognito_identity_providers {",
      "    client_id               = \"6lhlkkfbfb4q5kpp90urffae\"",
      "    provider_name           = \"cognito-idp.us-east-1.amazonaws.com/us-east-1_Tv0493apJ\"",
      "    server_side_token_check = false",
      "  }",
      "",
      "  cognito_identity_providers {",
      "    client_id               = \"7kodkvfqfb4qfkp39eurffae\"",
      "    provider_name           = \"cognito-idp.us-east-1.amazonaws.com/eu-west-1_Zr231apJu\"",
      "    server_side_token_check = false",
      "  }",
      "",
      "  supported_login_providers = {",
      "    \"graph.facebook.com\"  = \"7346241598935552\"",
      "    \"accounts.google.com\" = \"123456789012.apps.googleusercontent.com\"",
      "  }",
      "",
      "  saml_provider_arns           = [aws_iam_saml_provider.default.arn]",
      "  openid_connect_provider_arns = [\"arn:aws:iam::123456789012:oidc-provider/id.example.com\"]",
      "}"
    ]
  },
  "aws-resource-cognito_identity_pool_roles_attachment": {
    "description": "Defines cognito_identity_pool_roles_attachment",
    "prefix": "tf-aws-resource-cognito_identity_pool_roles_attachment",
    "body": [
      "resource \"aws_cognito_identity_pool\" \"main\" {",
      "  identity_pool_name               = \"identity pool\"",
      "  allow_unauthenticated_identities = false",
      "",
      "  supported_login_providers = {",
      "    \"graph.facebook.com\" = \"7346241598935555\"",
      "  }",
      "}",
      "",
      "resource \"aws_iam_role\" \"authenticated\" {",
      "  name = \"cognito_authenticated\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Federated\": \"cognito-identity.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRoleWithWebIdentity\",",
      "      \"Condition\": {",
      "        \"StringEquals\": {",
      "          \"cognito-identity.amazonaws.com:aud\": \"${aws_cognito_identity_pool.main.id}\"",
      "        },",
      "        \"ForAnyValue:StringLike\": {",
      "          \"cognito-identity.amazonaws.com:amr\": \"authenticated\"",
      "        }",
      "      }",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"authenticated\" {",
      "  name = \"authenticated_policy\"",
      "  role = aws_iam_role.authenticated.id",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Action\": [",
      "        \"mobileanalytics:PutEvents\",",
      "        \"cognito-sync:*\",",
      "        \"cognito-identity:*\"",
      "      ],",
      "      \"Resource\": [",
      "        \"*\"",
      "      ]",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_cognito_identity_pool_roles_attachment\" \"main\" {",
      "  identity_pool_id = aws_cognito_identity_pool.main.id",
      "",
      "  role_mapping {",
      "    identity_provider         = \"graph.facebook.com\"",
      "    ambiguous_role_resolution = \"AuthenticatedRole\"",
      "    type                      = \"Rules\"",
      "",
      "    mapping_rule {",
      "      claim      = \"isAdmin\"",
      "      match_type = \"Equals\"",
      "      role_arn   = aws_iam_role.authenticated.arn",
      "      value      = \"paid\"",
      "    }",
      "  }",
      "",
      "  roles = {",
      "    \"authenticated\" = aws_iam_role.authenticated.arn",
      "  }",
      "}"
    ]
  },
  "aws-resource-cognito_identity_provider": {
    "description": "Defines cognito_identity_provider",
    "prefix": "tf-aws-resource-cognito_identity_provider",
    "body": [
      "resource \"aws_cognito_user_pool\" \"example\" {",
      "  name                     = \"example-pool\"",
      "  auto_verified_attributes = [\"email\"]",
      "}",
      "",
      "resource \"aws_cognito_identity_provider\" \"example_provider\" {",
      "  user_pool_id  = aws_cognito_user_pool.example.id",
      "  provider_name = \"Google\"",
      "  provider_type = \"Google\"",
      "",
      "  provider_details = {",
      "    authorize_scopes = \"email\"",
      "    client_id        = \"your client_id\"",
      "    client_secret    = \"your client_secret\"",
      "  }",
      "",
      "  attribute_mapping = {",
      "    email    = \"email\"",
      "    username = \"sub\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-cognito_resource_server": {
    "description": "Defines cognito_resource_server",
    "prefix": "tf-aws-resource-cognito_resource_server",
    "body": [
      "resource \"aws_cognito_user_pool\" \"pool\" {",
      "  name = \"pool\"",
      "}",
      "",
      "resource \"aws_cognito_resource_server\" \"resource\" {",
      "  identifier = \"https://example.com\"",
      "  name       = \"example\"",
      "",
      "  user_pool_id = aws_cognito_user_pool.pool.id",
      "}"
    ]
  },
  "aws-resource-cognito_user_group": {
    "description": "Defines cognito_user_group",
    "prefix": "tf-aws-resource-cognito_user_group",
    "body": [
      "resource \"aws_cognito_user_pool\" \"main\" {",
      "  name = \"identity pool\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"group_role\" {",
      "  name = \"user-group-role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Federated\": \"cognito-identity.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRoleWithWebIdentity\",",
      "      \"Condition\": {",
      "        \"StringEquals\": {",
      "          \"cognito-identity.amazonaws.com:aud\": \"us-east-1:12345678-dead-beef-cafe-123456790ab\"",
      "        },",
      "        \"ForAnyValue:StringLike\": {",
      "          \"cognito-identity.amazonaws.com:amr\": \"authenticated\"",
      "        }",
      "      }",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_cognito_user_group\" \"main\" {",
      "  name         = \"user-group\"",
      "  user_pool_id = aws_cognito_user_pool.main.id",
      "  description  = \"Managed by Terraform\"",
      "  precedence   = 42",
      "  role_arn     = aws_iam_role.group_role.arn",
      "}"
    ]
  },
  "aws-resource-cognito_user_pool": {
    "description": "Defines cognito_user_pool",
    "prefix": "tf-aws-resource-cognito_user_pool",
    "body": [
      "resource \"aws_cognito_user_pool\" \"pool\" {",
      "  name = \"mypool\"",
      "}"
    ]
  },
  "aws-resource-cognito_user_pool_client": {
    "description": "Defines cognito_user_pool_client",
    "prefix": "tf-aws-resource-cognito_user_pool_client",
    "body": [
      "resource \"aws_cognito_user_pool\" \"pool\" {",
      "  name = \"pool\"",
      "}",
      "",
      "resource \"aws_cognito_user_pool_client\" \"client\" {",
      "  name = \"client\"",
      "",
      "  user_pool_id = aws_cognito_user_pool.pool.id",
      "}"
    ]
  },
  "aws-resource-cognito_user_pool_domain": {
    "description": "Defines cognito_user_pool_domain",
    "prefix": "tf-aws-resource-cognito_user_pool_domain",
    "body": [
      "resource \"aws_cognito_user_pool_domain\" \"main\" {",
      "  domain       = \"example-domain\"",
      "  user_pool_id = aws_cognito_user_pool.example.id",
      "}",
      "",
      "resource \"aws_cognito_user_pool\" \"example\" {",
      "  name = \"example-pool\"",
      "}"
    ]
  },
  "aws-resource-cognito_user_pool_ui_customization": {
    "description": "Defines cognito_user_pool_ui_customization",
    "prefix": "tf-aws-resource-cognito_user_pool_ui_customization",
    "body": [
      "resource \"aws_cognito_user_pool\" \"example\" {",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_cognito_user_pool_domain\" \"example\" {",
      "  domain       = \"example\"",
      "  user_pool_id = aws_cognito_user_pool.example.id",
      "}",
      "",
      "resource \"aws_cognito_user_pool_client\" \"example\" {",
      "  name         = \"example\"",
      "  user_pool_id = aws_cognito_user_pool.example.id",
      "}",
      "",
      "resource \"aws_cognito_user_pool_ui_customization\" \"example\" {",
      "  client_id = aws_cognito_user_pool_client.example.id",
      "",
      "  css        = \".label-customizable {font-weight: 400;}\"",
      "  image_file = filebase64(\"logo.png\")",
      "",
      "  # Refer to the aws_cognito_user_pool_domain resource's",
      "  # user_pool_id attribute to ensure it is in an 'Active' state",
      "  user_pool_id = aws_cognito_user_pool_domain.example.user_pool_id",
      "}"
    ]
  },
  "aws-resource-config_aggregate_authorization": {
    "description": "Defines config_aggregate_authorization",
    "prefix": "tf-aws-resource-config_aggregate_authorization",
    "body": [
      "resource \"aws_config_aggregate_authorization\" \"example\" {",
      "  account_id = \"123456789012\"",
      "  region     = \"eu-west-2\"",
      "}"
    ]
  },
  "aws-resource-config_config_rule": {
    "description": "Defines config_config_rule",
    "prefix": "tf-aws-resource-config_config_rule",
    "body": [
      "resource \"aws_config_config_rule\" \"r\" {",
      "  name = \"example\"",
      "",
      "  source {",
      "    owner             = \"AWS\"",
      "    source_identifier = \"S3_BUCKET_VERSIONING_ENABLED\"",
      "  }",
      "",
      "  depends_on = [aws_config_configuration_recorder.foo]",
      "}",
      "",
      "resource \"aws_config_configuration_recorder\" \"foo\" {",
      "  name     = \"example\"",
      "  role_arn = aws_iam_role.r.arn",
      "}",
      "",
      "resource \"aws_iam_role\" \"r\" {",
      "  name = \"my-awsconfig-role\"",
      "",
      "  assume_role_policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"config.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"p\" {",
      "  name = \"my-awsconfig-policy\"",
      "  role = aws_iam_role.r.id",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "  \t{",
      "  \t\t\"Action\": \"config:Put*\",",
      "  \t\t\"Effect\": \"Allow\",",
      "  \t\t\"Resource\": \"*\"",
      "",
      "  \t}",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-config_configuration_aggregator": {
    "description": "Defines config_configuration_aggregator",
    "prefix": "tf-aws-resource-config_configuration_aggregator",
    "body": [
      "resource \"aws_config_configuration_aggregator\" \"account\" {",
      "  name = \"example\"",
      "",
      "  account_aggregation_source {",
      "    account_ids = [\"123456789012\"]",
      "    regions     = [\"us-west-2\"]",
      "  }",
      "}"
    ]
  },
  "aws-resource-config_configuration_recorder": {
    "description": "Defines config_configuration_recorder",
    "prefix": "tf-aws-resource-config_configuration_recorder",
    "body": [
      "resource \"aws_config_configuration_recorder\" \"foo\" {",
      "  name     = \"example\"",
      "  role_arn = aws_iam_role.r.arn",
      "}",
      "",
      "resource \"aws_iam_role\" \"r\" {",
      "  name = \"awsconfig-example\"",
      "",
      "  assume_role_policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"config.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-config_configuration_recorder_status": {
    "description": "Defines config_configuration_recorder_status",
    "prefix": "tf-aws-resource-config_configuration_recorder_status",
    "body": [
      "resource \"aws_config_configuration_recorder_status\" \"foo\" {",
      "  name       = aws_config_configuration_recorder.foo.name",
      "  is_enabled = true",
      "  depends_on = [aws_config_delivery_channel.foo]",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"a\" {",
      "  role       = aws_iam_role.r.name",
      "  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSConfigRole\"",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"b\" {",
      "  bucket = \"awsconfig-example\"",
      "}",
      "",
      "resource \"aws_config_delivery_channel\" \"foo\" {",
      "  name           = \"example\"",
      "  s3_bucket_name = aws_s3_bucket.b.bucket",
      "}",
      "",
      "resource \"aws_config_configuration_recorder\" \"foo\" {",
      "  name     = \"example\"",
      "  role_arn = aws_iam_role.r.arn",
      "}",
      "",
      "resource \"aws_iam_role\" \"r\" {",
      "  name = \"example-awsconfig\"",
      "",
      "  assume_role_policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"config.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"p\" {",
      "  name = \"awsconfig-example\"",
      "  role = aws_iam_role.r.id",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"s3:*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": [",
      "        \"${aws_s3_bucket.b.arn}\",",
      "        \"${aws_s3_bucket.b.arn}/*\"",
      "      ]",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-config_conformance_pack": {
    "description": "Defines config_conformance_pack",
    "prefix": "tf-aws-resource-config_conformance_pack",
    "body": [
      "resource \"aws_config_conformance_pack\" \"example\" {",
      "  name = \"example\"",
      "",
      "  input_parameter {",
      "    parameter_name  = \"AccessKeysRotatedParameterMaxAccessKeyAge\"",
      "    parameter_value = \"90\"",
      "  }",
      "",
      "  template_body = <<EOT",
      "Parameters:",
      "  AccessKeysRotatedParameterMaxAccessKeyAge:",
      "    Type: String",
      "Resources:",
      "  IAMPasswordPolicy:",
      "    Properties:",
      "      ConfigRuleName: IAMPasswordPolicy",
      "      Source:",
      "        Owner: AWS",
      "        SourceIdentifier: IAM_PASSWORD_POLICY",
      "    Type: AWS::Config::ConfigRule",
      "EOT",
      "",
      "  depends_on = [aws_config_configuration_recorder.example]",
      "}"
    ]
  },
  "aws-resource-config_delivery_channel": {
    "description": "Defines config_delivery_channel",
    "prefix": "tf-aws-resource-config_delivery_channel",
    "body": [
      "resource \"aws_config_delivery_channel\" \"foo\" {",
      "  name           = \"example\"",
      "  s3_bucket_name = aws_s3_bucket.b.bucket",
      "  depends_on     = [aws_config_configuration_recorder.foo]",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"b\" {",
      "  bucket        = \"example-awsconfig\"",
      "  force_destroy = true",
      "}",
      "",
      "resource \"aws_config_configuration_recorder\" \"foo\" {",
      "  name     = \"example\"",
      "  role_arn = aws_iam_role.r.arn",
      "}",
      "",
      "resource \"aws_iam_role\" \"r\" {",
      "  name = \"awsconfig-example\"",
      "",
      "  assume_role_policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"config.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"p\" {",
      "  name = \"awsconfig-example\"",
      "  role = aws_iam_role.r.id",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"s3:*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": [",
      "        \"${aws_s3_bucket.b.arn}\",",
      "        \"${aws_s3_bucket.b.arn}/*\"",
      "      ]",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-config_organization_custom_rule": {
    "description": "Defines config_organization_custom_rule",
    "prefix": "tf-aws-resource-config_organization_custom_rule",
    "body": [
      "resource \"aws_lambda_permission\" \"example\" {",
      "  action        = \"lambda:InvokeFunction\"",
      "  function_name = aws_lambda_function.example.arn",
      "  principal     = \"config.amazonaws.com\"",
      "  statement_id  = \"AllowExecutionFromConfig\"",
      "}",
      "",
      "resource \"aws_organizations_organization\" \"example\" {",
      "  aws_service_access_principals = [\"config-multiaccountsetup.amazonaws.com\"]",
      "  feature_set                   = \"ALL\"",
      "}",
      "",
      "resource \"aws_config_organization_custom_rule\" \"example\" {",
      "  depends_on = [",
      "    aws_lambda_permission.example,",
      "    aws_organizations_organization.example,",
      "  ]",
      "",
      "  lambda_function_arn = aws_lambda_function.example.arn",
      "  name                = \"example\"",
      "  trigger_types       = [\"ConfigurationItemChangeNotification\"]",
      "}"
    ]
  },
  "aws-resource-config_organization_managed_rule": {
    "description": "Defines config_organization_managed_rule",
    "prefix": "tf-aws-resource-config_organization_managed_rule",
    "body": [
      "resource \"aws_organizations_organization\" \"example\" {",
      "  aws_service_access_principals = [\"config-multiaccountsetup.amazonaws.com\"]",
      "  feature_set                   = \"ALL\"",
      "}",
      "",
      "resource \"aws_config_organization_managed_rule\" \"example\" {",
      "  depends_on = [aws_organizations_organization.example]",
      "",
      "  name            = \"example\"",
      "  rule_identifier = \"IAM_PASSWORD_POLICY\"",
      "}"
    ]
  },
  "aws-resource-config_remediation_configuration": {
    "description": "Defines config_remediation_configuration",
    "prefix": "tf-aws-resource-config_remediation_configuration",
    "body": [
      "resource \"aws_config_config_rule\" \"this\" {",
      "  name = \"example\"",
      "",
      "  source {",
      "    owner             = \"AWS\"",
      "    source_identifier = \"S3_BUCKET_VERSIONING_ENABLED\"",
      "  }",
      "}",
      "",
      "resource \"aws_config_remediation_configuration\" \"this\" {",
      "  config_rule_name = aws_config_config_rule.this.name",
      "  resource_type    = \"AWS::S3::Bucket\"",
      "  target_type      = \"SSM_DOCUMENT\"",
      "  target_id        = \"AWS-EnableS3BucketEncryption\"",
      "  target_version   = \"1\"",
      "",
      "  parameter {",
      "    name         = \"AutomationAssumeRole\"",
      "    static_value = \"arn:aws:iam::875924563244:role/security_config\"",
      "  }",
      "  parameter {",
      "    name           = \"BucketName\"",
      "    resource_value = \"RESOURCE_ID\"",
      "  }",
      "  parameter {",
      "    name         = \"SSEAlgorithm\"",
      "    static_value = \"AES256\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-cur_report_definition": {
    "description": "Defines cur_report_definition",
    "prefix": "tf-aws-resource-cur_report_definition",
    "body": [
      "resource \"aws_cur_report_definition\" \"example_cur_report_definition\" {",
      "  report_name                = \"example-cur-report-definition\"",
      "  time_unit                  = \"HOURLY\"",
      "  format                     = \"textORcsv\"",
      "  compression                = \"GZIP\"",
      "  additional_schema_elements = [\"RESOURCES\"]",
      "  s3_bucket                  = \"example-bucket-name\"",
      "  s3_region                  = \"us-east-1\"",
      "  additional_artifacts       = [\"REDSHIFT\", \"QUICKSIGHT\"]",
      "}"
    ]
  },
  "aws-resource-customer_gateway": {
    "description": "Defines customer_gateway",
    "prefix": "tf-aws-resource-customer_gateway",
    "body": [
      "resource \"aws_customer_gateway\" \"main\" {",
      "  bgp_asn    = 65000",
      "  ip_address = \"172.83.124.10\"",
      "  type       = \"ipsec.1\"",
      "",
      "  tags = {",
      "    Name = \"main-customer-gateway\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-datapipeline_pipeline": {
    "description": "Defines datapipeline_pipeline",
    "prefix": "tf-aws-resource-datapipeline_pipeline",
    "body": [
      "resource \"aws_datapipeline_pipeline\" \"default\" {",
      "  name = \"tf-pipeline-default\"",
      "}"
    ]
  },
  "aws-resource-datasync_agent": {
    "description": "Defines datasync_agent",
    "prefix": "tf-aws-resource-datasync_agent",
    "body": [
      "resource \"aws_datasync_agent\" \"example\" {",
      "  ip_address = \"1.2.3.4\"",
      "  name       = \"example\"",
      "}"
    ]
  },
  "aws-resource-datasync_location_efs": {
    "description": "Defines datasync_location_efs",
    "prefix": "tf-aws-resource-datasync_location_efs",
    "body": [
      "resource \"aws_datasync_location_efs\" \"example\" {",
      "  # The below example uses aws_efs_mount_target as a reference to ensure a mount target already exists when resource creation occurs.",
      "  # You can accomplish the same behavior with depends_on or an aws_efs_mount_target data source reference.",
      "  efs_file_system_arn = aws_efs_mount_target.example.file_system_arn",
      "",
      "  ec2_config {",
      "    security_group_arns = [aws_security_group.example.arn]",
      "    subnet_arn          = aws_subnet.example.arn",
      "  }",
      "}"
    ]
  },
  "aws-resource-datasync_location_fsx_windows_file_system": {
    "description": "Defines datasync_location_fsx_windows_file_system",
    "prefix": "tf-aws-resource-datasync_location_fsx_windows_file_system",
    "body": [
      "resource \"aws_datasync_location_fsx_windows_file_system\" \"example\" {",
      "  fsx_filesystem_arn  = aws_fsx_windows_file_system.example.arn",
      "  user                = \"SomeUser\"",
      "  password            = \"SuperSecretPassw0rd\"",
      "  security_group_arns = [aws_security_group.example.arn]",
      "}"
    ]
  },
  "aws-resource-datasync_location_nfs": {
    "description": "Defines datasync_location_nfs",
    "prefix": "tf-aws-resource-datasync_location_nfs",
    "body": [
      "resource \"aws_datasync_location_nfs\" \"example\" {",
      "  server_hostname = \"nfs.example.com\"",
      "  subdirectory    = \"/exported/path\"",
      "",
      "  on_prem_config {",
      "    agent_arns = [aws_datasync_agent.example.arn]",
      "  }",
      "}"
    ]
  },
  "aws-resource-datasync_location_s3": {
    "description": "Defines datasync_location_s3",
    "prefix": "tf-aws-resource-datasync_location_s3",
    "body": [
      "resource \"aws_datasync_location_s3\" \"example\" {",
      "  s3_bucket_arn = aws_s3_bucket.example.arn",
      "  subdirectory  = \"/example/prefix\"",
      "",
      "  s3_config {",
      "    bucket_access_role_arn = aws_iam_role.example.arn",
      "  }",
      "}"
    ]
  },
  "aws-resource-datasync_location_smb": {
    "description": "Defines datasync_location_smb",
    "prefix": "tf-aws-resource-datasync_location_smb",
    "body": [
      "resource \"aws_datasync_location_smb\" \"example\" {",
      "  server_hostname = \"smb.example.com\"",
      "  subdirectory    = \"/exported/path\"",
      "",
      "  user     = \"Guest\"",
      "  password = \"ANotGreatPassword\"",
      "",
      "  agent_arns = [aws_datasync_agent.example.arn]",
      "}"
    ]
  },
  "aws-resource-datasync_task": {
    "description": "Defines datasync_task",
    "prefix": "tf-aws-resource-datasync_task",
    "body": [
      "resource \"aws_datasync_task\" \"example\" {",
      "  destination_location_arn = aws_datasync_location_s3.destination.arn",
      "  name                     = \"example\"",
      "  source_location_arn      = aws_datasync_location_nfs.source.arn",
      "",
      "  options {",
      "    bytes_per_second = -1",
      "  }",
      "}"
    ]
  },
  "aws-resource-dax_cluster": {
    "description": "Defines dax_cluster",
    "prefix": "tf-aws-resource-dax_cluster",
    "body": [
      "resource \"aws_dax_cluster\" \"bar\" {",
      "  cluster_name       = \"cluster-example\"",
      "  iam_role_arn       = data.aws_iam_role.example.arn",
      "  node_type          = \"dax.r4.large\"",
      "  replication_factor = 1",
      "}"
    ]
  },
  "aws-resource-dax_parameter_group": {
    "description": "Defines dax_parameter_group",
    "prefix": "tf-aws-resource-dax_parameter_group",
    "body": [
      "resource \"aws_dax_parameter_group\" \"example\" {",
      "  name = \"example\"",
      "",
      "  parameters {",
      "    name  = \"query-ttl-millis\"",
      "    value = \"100000\"",
      "  }",
      "",
      "  parameters {",
      "    name  = \"record-ttl-millis\"",
      "    value = \"100000\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-dax_subnet_group": {
    "description": "Defines dax_subnet_group",
    "prefix": "tf-aws-resource-dax_subnet_group",
    "body": [
      "resource \"aws_dax_subnet_group\" \"example\" {",
      "  name       = \"example\"",
      "  subnet_ids = [aws_subnet.example1.id, aws_subnet.example2.id]",
      "}"
    ]
  },
  "aws-resource-db_cluster_snapshot": {
    "description": "Defines db_cluster_snapshot",
    "prefix": "tf-aws-resource-db_cluster_snapshot",
    "body": [
      "resource \"aws_db_cluster_snapshot\" \"example\" {",
      "  db_cluster_identifier          = aws_rds_cluster.example.id",
      "  db_cluster_snapshot_identifier = \"resourcetestsnapshot1234\"",
      "}"
    ]
  },
  "aws-resource-db_event_subscription": {
    "description": "Defines db_event_subscription",
    "prefix": "tf-aws-resource-db_event_subscription",
    "body": [
      "resource \"aws_db_instance\" \"default\" {",
      "  allocated_storage    = 10",
      "  engine               = \"mysql\"",
      "  engine_version       = \"5.6.17\"",
      "  instance_class       = \"db.t2.micro\"",
      "  name                 = \"mydb\"",
      "  username             = \"foo\"",
      "  password             = \"bar\"",
      "  db_subnet_group_name = \"my_database_subnet_group\"",
      "  parameter_group_name = \"default.mysql5.6\"",
      "}",
      "",
      "resource \"aws_sns_topic\" \"default\" {",
      "  name = \"rds-events\"",
      "}",
      "",
      "resource \"aws_db_event_subscription\" \"default\" {",
      "  name      = \"rds-event-sub\"",
      "  sns_topic = aws_sns_topic.default.arn",
      "",
      "  source_type = \"db-instance\"",
      "  source_ids  = [aws_db_instance.default.id]",
      "",
      "  event_categories = [",
      "    \"availability\",",
      "    \"deletion\",",
      "    \"failover\",",
      "    \"failure\",",
      "    \"low storage\",",
      "    \"maintenance\",",
      "    \"notification\",",
      "    \"read replica\",",
      "    \"recovery\",",
      "    \"restoration\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-db_instance": {
    "description": "Defines db_instance",
    "prefix": "tf-aws-resource-db_instance",
    "body": [
      "resource \"aws_db_instance\" \"default\" {",
      "  allocated_storage    = 10",
      "  engine               = \"mysql\"",
      "  engine_version       = \"5.7\"",
      "  instance_class       = \"db.t3.micro\"",
      "  name                 = \"mydb\"",
      "  username             = \"foo\"",
      "  password             = \"foobarbaz\"",
      "  parameter_group_name = \"default.mysql5.7\"",
      "  skip_final_snapshot  = true",
      "}"
    ]
  },
  "aws-resource-db_instance_role_association": {
    "description": "Defines db_instance_role_association",
    "prefix": "tf-aws-resource-db_instance_role_association",
    "body": [
      "resource \"aws_db_instance_role_association\" \"example\" {",
      "  db_instance_identifier = aws_db_instance.example.id",
      "  feature_name           = \"S3_INTEGRATION\"",
      "  role_arn               = aws_iam_role.example.arn",
      "}"
    ]
  },
  "aws-resource-db_option_group": {
    "description": "Defines db_option_group",
    "prefix": "tf-aws-resource-db_option_group",
    "body": [
      "resource \"aws_db_option_group\" \"example\" {",
      "  name                     = \"option-group-test-terraform\"",
      "  option_group_description = \"Terraform Option Group\"",
      "  engine_name              = \"sqlserver-ee\"",
      "  major_engine_version     = \"11.00\"",
      "",
      "  option {",
      "    option_name = \"Timezone\"",
      "",
      "    option_settings {",
      "      name  = \"TIME_ZONE\"",
      "      value = \"UTC\"",
      "    }",
      "  }",
      "",
      "  option {",
      "    option_name = \"SQLSERVER_BACKUP_RESTORE\"",
      "",
      "    option_settings {",
      "      name  = \"IAM_ROLE_ARN\"",
      "      value = aws_iam_role.example.arn",
      "    }",
      "  }",
      "",
      "  option {",
      "    option_name = \"TDE\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-db_parameter_group": {
    "description": "Defines db_parameter_group",
    "prefix": "tf-aws-resource-db_parameter_group",
    "body": [
      "resource \"aws_db_parameter_group\" \"default\" {",
      "  name   = \"rds-pg\"",
      "  family = \"mysql5.6\"",
      "",
      "  parameter {",
      "    name  = \"character_set_server\"",
      "    value = \"utf8\"",
      "  }",
      "",
      "  parameter {",
      "    name  = \"character_set_client\"",
      "    value = \"utf8\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-db_proxy": {
    "description": "Defines db_proxy",
    "prefix": "tf-aws-resource-db_proxy",
    "body": [
      "resource \"aws_db_proxy\" \"example\" {",
      "  name                   = \"example\"",
      "  debug_logging          = false",
      "  engine_family          = \"MYSQL\"",
      "  idle_client_timeout    = 1800",
      "  require_tls            = true",
      "  role_arn               = aws_iam_role.example.arn",
      "  vpc_security_group_ids = [aws_security_group.example.id]",
      "  vpc_subnet_ids         = [aws_subnet.example.id]",
      "",
      "  auth {",
      "    auth_scheme = \"SECRETS\"",
      "    description = \"example\"",
      "    iam_auth    = \"DISABLED\"",
      "    secret_arn  = aws_secretsmanager_secret.example.arn",
      "  }",
      "",
      "  tags = {",
      "    Name = \"example\"",
      "    Key  = \"value\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-db_proxy_default_target_group": {
    "description": "Defines db_proxy_default_target_group",
    "prefix": "tf-aws-resource-db_proxy_default_target_group",
    "body": [
      "resource \"aws_db_proxy\" \"example\" {",
      "  name                   = \"example\"",
      "  debug_logging          = false",
      "  engine_family          = \"MYSQL\"",
      "  idle_client_timeout    = 1800",
      "  require_tls            = true",
      "  role_arn               = aws_iam_role.example.arn",
      "  vpc_security_group_ids = [aws_security_group.example.id]",
      "  vpc_subnet_ids         = [aws_subnet.example.id]",
      "",
      "  auth {",
      "    auth_scheme = \"SECRETS\"",
      "    description = \"example\"",
      "    iam_auth    = \"DISABLED\"",
      "    secret_arn  = aws_secretsmanager_secret.example.arn",
      "  }",
      "",
      "  tags = {",
      "    Name = \"example\"",
      "    Key  = \"value\"",
      "  }",
      "}",
      "",
      "resource \"aws_db_proxy_default_target_group\" \"example\" {",
      "  db_proxy_name = aws_db_proxy.example.name",
      "",
      "  connection_pool_config {",
      "    connection_borrow_timeout    = 120",
      "    init_query                   = \"SET x=1, y=2\"",
      "    max_connections_percent      = 100",
      "    max_idle_connections_percent = 50",
      "    session_pinning_filters      = [\"EXCLUDE_VARIABLE_SETS\"]",
      "  }",
      "}"
    ]
  },
  "aws-resource-db_proxy_target": {
    "description": "Defines db_proxy_target",
    "prefix": "tf-aws-resource-db_proxy_target",
    "body": [
      "resource \"aws_db_proxy\" \"example\" {",
      "  name                   = \"example\"",
      "  debug_logging          = false",
      "  engine_family          = \"MYSQL\"",
      "  idle_client_timeout    = 1800",
      "  require_tls            = true",
      "  role_arn               = aws_iam_role.example.arn",
      "  vpc_security_group_ids = [aws_security_group.example.id]",
      "  vpc_subnet_ids         = [aws_subnet.example.id]",
      "",
      "  auth {",
      "    auth_scheme = \"SECRETS\"",
      "    description = \"example\"",
      "    iam_auth    = \"DISABLED\"",
      "    secret_arn  = aws_secretsmanager_secret.example.arn",
      "  }",
      "",
      "  tags = {",
      "    Name = \"example\"",
      "    Key  = \"value\"",
      "  }",
      "}",
      "",
      "resource \"aws_db_proxy_default_target_group\" \"example\" {",
      "  db_proxy_name = aws_db_proxy.example.name",
      "",
      "  connection_pool_config {",
      "    connection_borrow_timeout    = 120",
      "    init_query                   = \"SET x=1, y=2\"",
      "    max_connections_percent      = 100",
      "    max_idle_connections_percent = 50",
      "    session_pinning_filters      = [\"EXCLUDE_VARIABLE_SETS\"]",
      "  }",
      "}",
      "",
      "resource \"aws_db_proxy_target\" \"example\" {",
      "  db_instance_identifier = aws_db_instance.example.id",
      "  db_proxy_name          = aws_db_proxy.example.name",
      "  target_group_name      = aws_db_proxy_default_target_group.example.db_proxy_name",
      "}"
    ]
  },
  "aws-resource-db_security_group": {
    "description": "Defines db_security_group",
    "prefix": "tf-aws-resource-db_security_group",
    "body": [
      "resource \"aws_db_security_group\" \"default\" {",
      "  name = \"rds_sg\"",
      "",
      "  ingress {",
      "    cidr = \"10.0.0.0/24\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-db_snapshot": {
    "description": "Defines db_snapshot",
    "prefix": "tf-aws-resource-db_snapshot",
    "body": [
      "resource \"aws_db_instance\" \"bar\" {",
      "  allocated_storage = 10",
      "  engine            = \"MySQL\"",
      "  engine_version    = \"5.6.21\"",
      "  instance_class    = \"db.t2.micro\"",
      "  name              = \"baz\"",
      "  password          = \"barbarbarbar\"",
      "  username          = \"foo\"",
      "",
      "  maintenance_window      = \"Fri:09:00-Fri:09:30\"",
      "  backup_retention_period = 0",
      "  parameter_group_name    = \"default.mysql5.6\"",
      "}",
      "",
      "resource \"aws_db_snapshot\" \"test\" {",
      "  db_instance_identifier = aws_db_instance.bar.id",
      "  db_snapshot_identifier = \"testsnapshot1234\"",
      "}"
    ]
  },
  "aws-resource-db_subnet_group": {
    "description": "Defines db_subnet_group",
    "prefix": "tf-aws-resource-db_subnet_group",
    "body": [
      "resource \"aws_db_subnet_group\" \"default\" {",
      "  name       = \"main\"",
      "  subnet_ids = [aws_subnet.frontend.id, aws_subnet.backend.id]",
      "",
      "  tags = {",
      "    Name = \"My DB subnet group\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-default_network_acl": {
    "description": "Defines default_network_acl",
    "prefix": "tf-aws-resource-default_network_acl",
    "body": [
      "resource \"aws_vpc\" \"mainvpc\" {",
      "  cidr_block = \"10.1.0.0/16\"",
      "}",
      "",
      "resource \"aws_default_network_acl\" \"default\" {",
      "  default_network_acl_id = aws_vpc.mainvpc.default_network_acl_id",
      "",
      "  ingress {",
      "    protocol   = -1",
      "    rule_no    = 100",
      "    action     = \"allow\"",
      "    cidr_block = aws_vpc.mainvpc.cidr_block",
      "    from_port  = 0",
      "    to_port    = 0",
      "  }",
      "",
      "  egress {",
      "    protocol   = -1",
      "    rule_no    = 100",
      "    action     = \"allow\"",
      "    cidr_block = \"0.0.0.0/0\"",
      "    from_port  = 0",
      "    to_port    = 0",
      "  }",
      "}"
    ]
  },
  "aws-resource-default_route_table": {
    "description": "Defines default_route_table",
    "prefix": "tf-aws-resource-default_route_table",
    "body": [
      "resource \"aws_default_route_table\" \"r\" {",
      "  default_route_table_id = aws_vpc.foo.default_route_table_id",
      "",
      "  route {",
      "    # ...",
      "  }",
      "",
      "  tags = {",
      "    Name = \"default table\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-default_security_group": {
    "description": "Defines default_security_group",
    "prefix": "tf-aws-resource-default_security_group",
    "body": [
      "resource \"aws_vpc\" \"mainvpc\" {",
      "  cidr_block = \"10.1.0.0/16\"",
      "}",
      "",
      "resource \"aws_default_security_group\" \"default\" {",
      "  vpc_id = aws_vpc.mainvpc.id",
      "",
      "  ingress {",
      "    protocol  = -1",
      "    self      = true",
      "    from_port = 0",
      "    to_port   = 0",
      "  }",
      "",
      "  egress {",
      "    from_port   = 0",
      "    to_port     = 0",
      "    protocol    = \"-1\"",
      "    cidr_blocks = [\"0.0.0.0/0\"]",
      "  }",
      "}"
    ]
  },
  "aws-resource-default_subnet": {
    "description": "Defines default_subnet",
    "prefix": "tf-aws-resource-default_subnet",
    "body": [
      "resource \"aws_default_subnet\" \"default_az1\" {",
      "  availability_zone = \"us-west-2a\"",
      "",
      "  tags = {",
      "    Name = \"Default subnet for us-west-2a\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-default_vpc": {
    "description": "Defines default_vpc",
    "prefix": "tf-aws-resource-default_vpc",
    "body": [
      "resource \"aws_default_vpc\" \"default\" {",
      "  tags = {",
      "    Name = \"Default VPC\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-default_vpc_dhcp_options": {
    "description": "Defines default_vpc_dhcp_options",
    "prefix": "tf-aws-resource-default_vpc_dhcp_options",
    "body": [
      "resource \"aws_default_vpc_dhcp_options\" \"default\" {",
      "  tags = {",
      "    Name = \"Default DHCP Option Set\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-devicefarm_project": {
    "description": "Defines devicefarm_project",
    "prefix": "tf-aws-resource-devicefarm_project",
    "body": [
      "resource \"aws_devicefarm_project\" \"awesome_devices\" {",
      "  name = \"my-device-farm\"",
      "}"
    ]
  },
  "aws-resource-directory_service_conditional_forwarder": {
    "description": "Defines directory_service_conditional_forwarder",
    "prefix": "tf-aws-resource-directory_service_conditional_forwarder",
    "body": [
      "resource \"aws_directory_service_conditional_forwarder\" \"example\" {",
      "  directory_id       = aws_directory_service_directory.ad.id",
      "  remote_domain_name = \"example.com\"",
      "",
      "  dns_ips = [",
      "    \"8.8.8.8\",",
      "    \"8.8.4.4\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-directory_service_directory": {
    "description": "Defines directory_service_directory",
    "prefix": "tf-aws-resource-directory_service_directory",
    "body": [
      "resource \"aws_directory_service_directory\" \"bar\" {",
      "  name     = \"corp.notexample.com\"",
      "  password = \"SuperSecretPassw0rd\"",
      "  size     = \"Small\"",
      "",
      "  vpc_settings {",
      "    vpc_id     = aws_vpc.main.id",
      "    subnet_ids = [aws_subnet.foo.id, aws_subnet.bar.id]",
      "  }",
      "",
      "  tags = {",
      "    Project = \"foo\"",
      "  }",
      "}",
      "",
      "resource \"aws_vpc\" \"main\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_subnet\" \"foo\" {",
      "  vpc_id            = aws_vpc.main.id",
      "  availability_zone = \"us-west-2a\"",
      "  cidr_block        = \"10.0.1.0/24\"",
      "}",
      "",
      "resource \"aws_subnet\" \"bar\" {",
      "  vpc_id            = aws_vpc.main.id",
      "  availability_zone = \"us-west-2b\"",
      "  cidr_block        = \"10.0.2.0/24\"",
      "}"
    ]
  },
  "aws-resource-directory_service_log_subscription": {
    "description": "Defines directory_service_log_subscription",
    "prefix": "tf-aws-resource-directory_service_log_subscription",
    "body": [
      "resource \"aws_cloudwatch_log_group\" \"example\" {",
      "  name              = \"/aws/directoryservice/${aws_directory_service_directory.example.id}\"",
      "  retention_in_days = 14",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"ad-log-policy\" {",
      "  statement {",
      "    actions = [",
      "      \"logs:CreateLogStream\",",
      "      \"logs:PutLogEvents\",",
      "    ]",
      "",
      "    principals {",
      "      identifiers = [\"ds.amazonaws.com\"]",
      "      type        = \"Service\"",
      "    }",
      "",
      "    resources = [\"${aws_cloudwatch_log_group.example.arn}:*\"]",
      "",
      "    effect = \"Allow\"",
      "  }",
      "}",
      "",
      "resource \"aws_cloudwatch_log_resource_policy\" \"ad-log-policy\" {",
      "  policy_document = data.aws_iam_policy_document.ad-log-policy.json",
      "  policy_name     = \"ad-log-policy\"",
      "}",
      "",
      "resource \"aws_directory_service_log_subscription\" \"example\" {",
      "  directory_id   = aws_directory_service_directory.example.id",
      "  log_group_name = aws_cloudwatch_log_group.example.name",
      "}"
    ]
  },
  "aws-resource-dlm_lifecycle_policy": {
    "description": "Defines dlm_lifecycle_policy",
    "prefix": "tf-aws-resource-dlm_lifecycle_policy",
    "body": [
      "resource \"aws_iam_role\" \"dlm_lifecycle_role\" {",
      "  name = \"dlm-lifecycle-role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"dlm.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"dlm_lifecycle\" {",
      "  name = \"dlm-lifecycle-policy\"",
      "  role = aws_iam_role.dlm_lifecycle_role.id",
      "",
      "  policy = <<EOF",
      "{",
      "   \"Version\": \"2012-10-17\",",
      "   \"Statement\": [",
      "      {",
      "         \"Effect\": \"Allow\",",
      "         \"Action\": [",
      "            \"ec2:CreateSnapshot\",",
      "            \"ec2:CreateSnapshots\",",
      "            \"ec2:DeleteSnapshot\",",
      "            \"ec2:DescribeInstances\",",
      "            \"ec2:DescribeVolumes\",",
      "            \"ec2:DescribeSnapshots\"",
      "         ],",
      "         \"Resource\": \"*\"",
      "      },",
      "      {",
      "         \"Effect\": \"Allow\",",
      "         \"Action\": [",
      "            \"ec2:CreateTags\"",
      "         ],",
      "         \"Resource\": \"arn:aws:ec2:*::snapshot/*\"",
      "      }",
      "   ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_dlm_lifecycle_policy\" \"example\" {",
      "  description        = \"example DLM lifecycle policy\"",
      "  execution_role_arn = aws_iam_role.dlm_lifecycle_role.arn",
      "  state              = \"ENABLED\"",
      "",
      "  policy_details {",
      "    resource_types = [\"VOLUME\"]",
      "",
      "    schedule {",
      "      name = \"2 weeks of daily snapshots\"",
      "",
      "      create_rule {",
      "        interval      = 24",
      "        interval_unit = \"HOURS\"",
      "        times         = [\"23:45\"]",
      "      }",
      "",
      "      retain_rule {",
      "        count = 14",
      "      }",
      "",
      "      tags_to_add = {",
      "        SnapshotCreator = \"DLM\"",
      "      }",
      "",
      "      copy_tags = false",
      "    }",
      "",
      "    target_tags = {",
      "      Snapshot = \"true\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-dms_certificate": {
    "description": "Defines dms_certificate",
    "prefix": "tf-aws-resource-dms_certificate",
    "body": [
      "# Create a new certificate",
      "resource \"aws_dms_certificate\" \"test\" {",
      "  certificate_id  = \"test-dms-certificate-tf\"",
      "  certificate_pem = \"...\"",
      "",
      "  tags = {",
      "    Name = \"test\"",
      "  }",
      "",
      "}"
    ]
  },
  "aws-resource-dms_endpoint": {
    "description": "Defines dms_endpoint",
    "prefix": "tf-aws-resource-dms_endpoint",
    "body": [
      "# Create a new endpoint",
      "resource \"aws_dms_endpoint\" \"test\" {",
      "  certificate_arn             = \"arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012\"",
      "  database_name               = \"test\"",
      "  endpoint_id                 = \"test-dms-endpoint-tf\"",
      "  endpoint_type               = \"source\"",
      "  engine_name                 = \"aurora\"",
      "  extra_connection_attributes = \"\"",
      "  kms_key_arn                 = \"arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012\"",
      "  password                    = \"test\"",
      "  port                        = 3306",
      "  server_name                 = \"test\"",
      "  ssl_mode                    = \"none\"",
      "",
      "  tags = {",
      "    Name = \"test\"",
      "  }",
      "",
      "  username = \"test\"",
      "}"
    ]
  },
  "aws-resource-dms_event_subscription": {
    "description": "Defines dms_event_subscription",
    "prefix": "tf-aws-resource-dms_event_subscription",
    "body": [
      "resource \"aws_dms_event_subscription\" \"example\" {",
      "  enabled          = true",
      "  event_categories = [\"creation\", \"failure\"]",
      "  name             = \"my-favorite-event-subscription\"",
      "  sns_topic_arn    = aws_sns_topic.example.arn",
      "  source_ids       = [aws_dms_replication_task.example.replication_task_id]",
      "  source_type      = \"replication-task\"",
      "",
      "  tags = {",
      "    Name = \"example\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-dms_replication_instance": {
    "description": "Defines dms_replication_instance",
    "prefix": "tf-aws-resource-dms_replication_instance",
    "body": [
      "# Database Migration Service requires the below IAM Roles to be created before",
      "# replication instances can be created. See the DMS Documentation for",
      "# additional information: https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.APIRole",
      "#  * dms-vpc-role",
      "#  * dms-cloudwatch-logs-role",
      "#  * dms-access-for-endpoint",
      "",
      "data \"aws_iam_policy_document\" \"dms_assume_role\" {",
      "  statement {",
      "    actions = [\"sts:AssumeRole\"]",
      "",
      "    principals {",
      "      identifiers = [\"dms.amazonaws.com\"]",
      "      type        = \"Service\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_iam_role\" \"dms-access-for-endpoint\" {",
      "  assume_role_policy = data.aws_iam_policy_document.dms_assume_role.json",
      "  name               = \"dms-access-for-endpoint\"",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"dms-access-for-endpoint-AmazonDMSRedshiftS3Role\" {",
      "  policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonDMSRedshiftS3Role\"",
      "  role       = aws_iam_role.dms-access-for-endpoint.name",
      "}",
      "",
      "resource \"aws_iam_role\" \"dms-cloudwatch-logs-role\" {",
      "  assume_role_policy = data.aws_iam_policy_document.dms_assume_role.json",
      "  name               = \"dms-cloudwatch-logs-role\"",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"dms-cloudwatch-logs-role-AmazonDMSCloudWatchLogsRole\" {",
      "  policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonDMSCloudWatchLogsRole\"",
      "  role       = aws_iam_role.dms-cloudwatch-logs-role.name",
      "}",
      "",
      "resource \"aws_iam_role\" \"dms-vpc-role\" {",
      "  assume_role_policy = data.aws_iam_policy_document.dms_assume_role.json",
      "  name               = \"dms-vpc-role\"",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"dms-vpc-role-AmazonDMSVPCManagementRole\" {",
      "  policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole\"",
      "  role       = aws_iam_role.dms-vpc-role.name",
      "}",
      "",
      "# Create a new replication instance",
      "resource \"aws_dms_replication_instance\" \"test\" {",
      "  allocated_storage            = 20",
      "  apply_immediately            = true",
      "  auto_minor_version_upgrade   = true",
      "  availability_zone            = \"us-west-2c\"",
      "  engine_version               = \"3.1.4\"",
      "  kms_key_arn                  = \"arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012\"",
      "  multi_az                     = false",
      "  preferred_maintenance_window = \"sun:10:30-sun:14:30\"",
      "  publicly_accessible          = true",
      "  replication_instance_class   = \"dms.t2.micro\"",
      "  replication_instance_id      = \"test-dms-replication-instance-tf\"",
      "  replication_subnet_group_id  = aws_dms_replication_subnet_group.test-dms-replication-subnet-group-tf.id",
      "",
      "  tags = {",
      "    Name = \"test\"",
      "  }",
      "",
      "  vpc_security_group_ids = [",
      "    \"sg-12345678\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-dms_replication_subnet_group": {
    "description": "Defines dms_replication_subnet_group",
    "prefix": "tf-aws-resource-dms_replication_subnet_group",
    "body": [
      "# Create a new replication subnet group",
      "resource \"aws_dms_replication_subnet_group\" \"test\" {",
      "  replication_subnet_group_description = \"Test replication subnet group\"",
      "  replication_subnet_group_id          = \"test-dms-replication-subnet-group-tf\"",
      "",
      "  subnet_ids = [",
      "    \"subnet-12345678\",",
      "  ]",
      "",
      "  tags = {",
      "    Name = \"test\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-dms_replication_task": {
    "description": "Defines dms_replication_task",
    "prefix": "tf-aws-resource-dms_replication_task",
    "body": [
      "# Create a new replication task",
      "resource \"aws_dms_replication_task\" \"test\" {",
      "  cdc_start_time            = 1484346880",
      "  migration_type            = \"full-load\"",
      "  replication_instance_arn  = aws_dms_replication_instance.test-dms-replication-instance-tf.replication_instance_arn",
      "  replication_task_id       = \"test-dms-replication-task-tf\"",
      "  replication_task_settings = \"...\"",
      "  source_endpoint_arn       = aws_dms_endpoint.test-dms-source-endpoint-tf.endpoint_arn",
      "  table_mappings            = \"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"%\\\",\\\"table-name\\\":\\\"%\\\"},\\\"rule-action\\\":\\\"include\\\"}]}\"",
      "",
      "  tags = {",
      "    Name = \"test\"",
      "  }",
      "",
      "  target_endpoint_arn = aws_dms_endpoint.test-dms-target-endpoint-tf.endpoint_arn",
      "}"
    ]
  },
  "aws-resource-docdb_cluster": {
    "description": "Defines docdb_cluster",
    "prefix": "tf-aws-resource-docdb_cluster",
    "body": [
      "resource \"aws_docdb_cluster\" \"docdb\" {",
      "  cluster_identifier      = \"my-docdb-cluster\"",
      "  engine                  = \"docdb\"",
      "  master_username         = \"foo\"",
      "  master_password         = \"mustbeeightchars\"",
      "  backup_retention_period = 5",
      "  preferred_backup_window = \"07:00-09:00\"",
      "  skip_final_snapshot     = true",
      "}"
    ]
  },
  "aws-resource-docdb_cluster_instance": {
    "description": "Defines docdb_cluster_instance",
    "prefix": "tf-aws-resource-docdb_cluster_instance",
    "body": [
      "resource \"aws_docdb_cluster_instance\" \"cluster_instances\" {",
      "  count              = 2",
      "  identifier         = \"docdb-cluster-demo-${count.index}\"",
      "  cluster_identifier = aws_docdb_cluster.default.id",
      "  instance_class     = \"db.r5.large\"",
      "}",
      "",
      "resource \"aws_docdb_cluster\" \"default\" {",
      "  cluster_identifier = \"docdb-cluster-demo\"",
      "  availability_zones = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]",
      "  master_username    = \"foo\"",
      "  master_password    = \"barbut8chars\"",
      "}"
    ]
  },
  "aws-resource-docdb_cluster_parameter_group": {
    "description": "Defines docdb_cluster_parameter_group",
    "prefix": "tf-aws-resource-docdb_cluster_parameter_group",
    "body": [
      "resource \"aws_docdb_cluster_parameter_group\" \"example\" {",
      "  family      = \"docdb3.6\"",
      "  name        = \"example\"",
      "  description = \"docdb cluster parameter group\"",
      "",
      "  parameter {",
      "    name  = \"tls\"",
      "    value = \"enabled\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-docdb_cluster_snapshot": {
    "description": "Defines docdb_cluster_snapshot",
    "prefix": "tf-aws-resource-docdb_cluster_snapshot",
    "body": [
      "resource \"aws_docdb_cluster_snapshot\" \"example\" {",
      "  db_cluster_identifier          = aws_docdb_cluster.example.id",
      "  db_cluster_snapshot_identifier = \"resourcetestsnapshot1234\"",
      "}"
    ]
  },
  "aws-resource-docdb_subnet_group": {
    "description": "Defines docdb_subnet_group",
    "prefix": "tf-aws-resource-docdb_subnet_group",
    "body": [
      "resource \"aws_docdb_subnet_group\" \"default\" {",
      "  name       = \"main\"",
      "  subnet_ids = [aws_subnet.frontend.id, aws_subnet.backend.id]",
      "",
      "  tags = {",
      "    Name = \"My docdb subnet group\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-dx_bgp_peer": {
    "description": "Defines dx_bgp_peer",
    "prefix": "tf-aws-resource-dx_bgp_peer",
    "body": [
      "resource \"aws_dx_bgp_peer\" \"peer\" {",
      "  virtual_interface_id = aws_dx_private_virtual_interface.foo.id",
      "  address_family       = \"ipv6\"",
      "  bgp_asn              = 65351",
      "}"
    ]
  },
  "aws-resource-dx_connection": {
    "description": "Defines dx_connection",
    "prefix": "tf-aws-resource-dx_connection",
    "body": [
      "resource \"aws_dx_connection\" \"hoge\" {",
      "  name      = \"tf-dx-connection\"",
      "  bandwidth = \"1Gbps\"",
      "  location  = \"EqDC2\"",
      "}"
    ]
  },
  "aws-resource-dx_connection_association": {
    "description": "Defines dx_connection_association",
    "prefix": "tf-aws-resource-dx_connection_association",
    "body": [
      "resource \"aws_dx_connection\" \"example\" {",
      "  name      = \"example\"",
      "  bandwidth = \"1Gbps\"",
      "  location  = \"EqSe2-EQ\"",
      "}",
      "",
      "resource \"aws_dx_lag\" \"example\" {",
      "  name                  = \"example\"",
      "  connections_bandwidth = \"1Gbps\"",
      "  location              = \"EqSe2-EQ\"",
      "}",
      "",
      "resource \"aws_dx_connection_association\" \"example\" {",
      "  connection_id = aws_dx_connection.example.id",
      "  lag_id        = aws_dx_lag.example.id",
      "}"
    ]
  },
  "aws-resource-dx_gateway": {
    "description": "Defines dx_gateway",
    "prefix": "tf-aws-resource-dx_gateway",
    "body": [
      "resource \"aws_dx_gateway\" \"example\" {",
      "  name            = \"tf-dxg-example\"",
      "  amazon_side_asn = \"64512\"",
      "}"
    ]
  },
  "aws-resource-dx_gateway_association": {
    "description": "Defines dx_gateway_association",
    "prefix": "tf-aws-resource-dx_gateway_association",
    "body": [
      "resource \"aws_dx_gateway\" \"example\" {",
      "  name            = \"example\"",
      "  amazon_side_asn = \"64512\"",
      "}",
      "",
      "resource \"aws_vpc\" \"example\" {",
      "  cidr_block = \"10.255.255.0/28\"",
      "}",
      "",
      "resource \"aws_vpn_gateway\" \"example\" {",
      "  vpc_id = aws_vpc.example.id",
      "}",
      "",
      "resource \"aws_dx_gateway_association\" \"example\" {",
      "  dx_gateway_id         = aws_dx_gateway.example.id",
      "  associated_gateway_id = aws_vpn_gateway.example.id",
      "}"
    ]
  },
  "aws-resource-dx_gateway_association_proposal": {
    "description": "Defines dx_gateway_association_proposal",
    "prefix": "tf-aws-resource-dx_gateway_association_proposal",
    "body": [
      "resource \"aws_dx_gateway_association_proposal\" \"example\" {",
      "  dx_gateway_id               = aws_dx_gateway.example.id",
      "  dx_gateway_owner_account_id = aws_dx_gateway.example.owner_account_id",
      "  associated_gateway_id       = aws_vpn_gateway.example.id",
      "}"
    ]
  },
  "aws-resource-dx_hosted_private_virtual_interface": {
    "description": "Defines dx_hosted_private_virtual_interface",
    "prefix": "tf-aws-resource-dx_hosted_private_virtual_interface",
    "body": [
      "resource \"aws_dx_hosted_private_virtual_interface\" \"foo\" {",
      "  connection_id = \"dxcon-zzzzzzzz\"",
      "",
      "  name           = \"vif-foo\"",
      "  vlan           = 4094",
      "  address_family = \"ipv4\"",
      "  bgp_asn        = 65352",
      "}"
    ]
  },
  "aws-resource-dx_hosted_private_virtual_interface_accepter": {
    "description": "Defines dx_hosted_private_virtual_interface_accepter",
    "prefix": "tf-aws-resource-dx_hosted_private_virtual_interface_accepter",
    "body": [
      "provider \"aws\" {",
      "  # Creator's credentials.",
      "}",
      "",
      "provider \"aws\" {",
      "  alias = \"accepter\"",
      "",
      "  # Accepter's credentials.",
      "}",
      "",
      "data \"aws_caller_identity\" \"accepter\" {",
      "  provider = aws.accepter",
      "}",
      "",
      "# Creator's side of the VIF",
      "resource \"aws_dx_hosted_private_virtual_interface\" \"creator\" {",
      "  connection_id    = \"dxcon-zzzzzzzz\"",
      "  owner_account_id = data.aws_caller_identity.accepter.account_id",
      "",
      "  name           = \"vif-foo\"",
      "  vlan           = 4094",
      "  address_family = \"ipv4\"",
      "  bgp_asn        = 65352",
      "",
      "  # The aws_dx_hosted_private_virtual_interface",
      "  # must be destroyed before the aws_vpn_gateway.",
      "  depends_on = [aws_vpn_gateway.vpn_gw]",
      "}",
      "",
      "# Accepter's side of the VIF.",
      "resource \"aws_vpn_gateway\" \"vpn_gw\" {",
      "  provider = aws.accepter",
      "}",
      "",
      "resource \"aws_dx_hosted_private_virtual_interface_accepter\" \"accepter\" {",
      "  provider             = aws.accepter",
      "  virtual_interface_id = aws_dx_hosted_private_virtual_interface.creator.id",
      "  vpn_gateway_id       = aws_vpn_gateway.vpn_gw.id",
      "",
      "  tags = {",
      "    Side = \"Accepter\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-dx_hosted_public_virtual_interface": {
    "description": "Defines dx_hosted_public_virtual_interface",
    "prefix": "tf-aws-resource-dx_hosted_public_virtual_interface",
    "body": [
      "resource \"aws_dx_hosted_public_virtual_interface\" \"foo\" {",
      "  connection_id = \"dxcon-zzzzzzzz\"",
      "",
      "  name           = \"vif-foo\"",
      "  vlan           = 4094",
      "  address_family = \"ipv4\"",
      "  bgp_asn        = 65352",
      "",
      "  customer_address = \"175.45.176.1/30\"",
      "  amazon_address   = \"175.45.176.2/30\"",
      "",
      "  route_filter_prefixes = [",
      "    \"210.52.109.0/24\",",
      "    \"175.45.176.0/22\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-dx_hosted_public_virtual_interface_accepter": {
    "description": "Defines dx_hosted_public_virtual_interface_accepter",
    "prefix": "tf-aws-resource-dx_hosted_public_virtual_interface_accepter",
    "body": [
      "provider \"aws\" {",
      "  # Creator's credentials.",
      "}",
      "",
      "provider \"aws\" {",
      "  alias = \"accepter\"",
      "",
      "  # Accepter's credentials.",
      "}",
      "",
      "data \"aws_caller_identity\" \"accepter\" {",
      "  provider = aws.accepter",
      "}",
      "",
      "# Creator's side of the VIF",
      "resource \"aws_dx_hosted_public_virtual_interface\" \"creator\" {",
      "  connection_id    = \"dxcon-zzzzzzzz\"",
      "  owner_account_id = data.aws_caller_identity.accepter.account_id",
      "",
      "  name           = \"vif-foo\"",
      "  vlan           = 4094",
      "  address_family = \"ipv4\"",
      "  bgp_asn        = 65352",
      "",
      "  customer_address = \"175.45.176.1/30\"",
      "  amazon_address   = \"175.45.176.2/30\"",
      "",
      "  route_filter_prefixes = [",
      "    \"210.52.109.0/24\",",
      "    \"175.45.176.0/22\",",
      "  ]",
      "}",
      "",
      "# Accepter's side of the VIF.",
      "resource \"aws_dx_hosted_public_virtual_interface_accepter\" \"accepter\" {",
      "  provider             = aws.accepter",
      "  virtual_interface_id = aws_dx_hosted_public_virtual_interface.creator.id",
      "",
      "  tags = {",
      "    Side = \"Accepter\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-dx_hosted_transit_virtual_interface": {
    "description": "Defines dx_hosted_transit_virtual_interface",
    "prefix": "tf-aws-resource-dx_hosted_transit_virtual_interface",
    "body": [
      "resource \"aws_dx_hosted_transit_virtual_interface\" \"example\" {",
      "  connection_id = aws_dx_connection.example.id",
      "",
      "  name           = \"tf-transit-vif-example\"",
      "  vlan           = 4094",
      "  address_family = \"ipv4\"",
      "  bgp_asn        = 65352",
      "}"
    ]
  },
  "aws-resource-dx_hosted_transit_virtual_interface_accepter": {
    "description": "Defines dx_hosted_transit_virtual_interface_accepter",
    "prefix": "tf-aws-resource-dx_hosted_transit_virtual_interface_accepter",
    "body": [
      "provider \"aws\" {",
      "  # Creator's credentials.",
      "}",
      "",
      "provider \"aws\" {",
      "  alias = \"accepter\"",
      "",
      "  # Accepter's credentials.",
      "}",
      "",
      "data \"aws_caller_identity\" \"accepter\" {",
      "  provider = aws.accepter",
      "}",
      "",
      "# Creator's side of the VIF",
      "resource \"aws_dx_hosted_transit_virtual_interface\" \"creator\" {",
      "  connection_id    = \"dxcon-zzzzzzzz\"",
      "  owner_account_id = data.aws_caller_identity.accepter.account_id",
      "",
      "  name           = \"tf-transit-vif-example\"",
      "  vlan           = 4094",
      "  address_family = \"ipv4\"",
      "  bgp_asn        = 65352",
      "",
      "  # The aws_dx_hosted_transit_virtual_interface",
      "  # must be destroyed before the aws_dx_gateway.",
      "  depends_on = [aws_dx_gateway.example]",
      "}",
      "",
      "# Accepter's side of the VIF.",
      "resource \"aws_dx_gateway\" \"example\" {",
      "  provider = aws.accepter",
      "",
      "  name            = \"tf-dxg-example\"",
      "  amazon_side_asn = 64512",
      "}",
      "",
      "resource \"aws_dx_hosted_transit_virtual_interface_accepter\" \"accepter\" {",
      "  provider             = aws.accepter",
      "  virtual_interface_id = aws_dx_hosted_transit_virtual_interface.creator.id",
      "  dx_gateway_id        = aws_dx_gateway.example.id",
      "",
      "  tags = {",
      "    Side = \"Accepter\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-dx_lag": {
    "description": "Defines dx_lag",
    "prefix": "tf-aws-resource-dx_lag",
    "body": [
      "resource \"aws_dx_lag\" \"hoge\" {",
      "  name                  = \"tf-dx-lag\"",
      "  connections_bandwidth = \"1Gbps\"",
      "  location              = \"EqDC2\"",
      "  force_destroy         = true",
      "}"
    ]
  },
  "aws-resource-dx_private_virtual_interface": {
    "description": "Defines dx_private_virtual_interface",
    "prefix": "tf-aws-resource-dx_private_virtual_interface",
    "body": [
      "resource \"aws_dx_private_virtual_interface\" \"foo\" {",
      "  connection_id = \"dxcon-zzzzzzzz\"",
      "",
      "  name           = \"vif-foo\"",
      "  vlan           = 4094",
      "  address_family = \"ipv4\"",
      "  bgp_asn        = 65352",
      "}"
    ]
  },
  "aws-resource-dx_public_virtual_interface": {
    "description": "Defines dx_public_virtual_interface",
    "prefix": "tf-aws-resource-dx_public_virtual_interface",
    "body": [
      "resource \"aws_dx_public_virtual_interface\" \"foo\" {",
      "  connection_id = \"dxcon-zzzzzzzz\"",
      "",
      "  name           = \"vif-foo\"",
      "  vlan           = 4094",
      "  address_family = \"ipv4\"",
      "  bgp_asn        = 65352",
      "",
      "  customer_address = \"175.45.176.1/30\"",
      "  amazon_address   = \"175.45.176.2/30\"",
      "",
      "  route_filter_prefixes = [",
      "    \"210.52.109.0/24\",",
      "    \"175.45.176.0/22\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-dx_transit_virtual_interface": {
    "description": "Defines dx_transit_virtual_interface",
    "prefix": "tf-aws-resource-dx_transit_virtual_interface",
    "body": [
      "resource \"aws_dx_gateway\" \"example\" {",
      "  name            = \"tf-dxg-example\"",
      "  amazon_side_asn = 64512",
      "}",
      "",
      "resource \"aws_dx_transit_virtual_interface\" \"example\" {",
      "  connection_id = aws_dx_connection.example.id",
      "",
      "  dx_gateway_id  = aws_dx_gateway.example.id",
      "  name           = \"tf-transit-vif-example\"",
      "  vlan           = 4094",
      "  address_family = \"ipv4\"",
      "  bgp_asn        = 65352",
      "}"
    ]
  },
  "aws-resource-dynamodb_global_table": {
    "description": "Defines dynamodb_global_table",
    "prefix": "tf-aws-resource-dynamodb_global_table",
    "body": [
      "provider \"aws\" {",
      "  alias  = \"us-east-1\"",
      "  region = \"us-east-1\"",
      "}",
      "",
      "provider \"aws\" {",
      "  alias  = \"us-west-2\"",
      "  region = \"us-west-2\"",
      "}",
      "",
      "resource \"aws_dynamodb_table\" \"us-east-1\" {",
      "  provider = aws.us-east-1",
      "",
      "  hash_key         = \"myAttribute\"",
      "  name             = \"myTable\"",
      "  stream_enabled   = true",
      "  stream_view_type = \"NEW_AND_OLD_IMAGES\"",
      "  read_capacity    = 1",
      "  write_capacity   = 1",
      "",
      "  attribute {",
      "    name = \"myAttribute\"",
      "    type = \"S\"",
      "  }",
      "}",
      "",
      "resource \"aws_dynamodb_table\" \"us-west-2\" {",
      "  provider = aws.us-west-2",
      "",
      "  hash_key         = \"myAttribute\"",
      "  name             = \"myTable\"",
      "  stream_enabled   = true",
      "  stream_view_type = \"NEW_AND_OLD_IMAGES\"",
      "  read_capacity    = 1",
      "  write_capacity   = 1",
      "",
      "  attribute {",
      "    name = \"myAttribute\"",
      "    type = \"S\"",
      "  }",
      "}",
      "",
      "resource \"aws_dynamodb_global_table\" \"myTable\" {",
      "  depends_on = [",
      "    aws_dynamodb_table.us-east-1,",
      "    aws_dynamodb_table.us-west-2,",
      "  ]",
      "  provider = aws.us-east-1",
      "",
      "  name = \"myTable\"",
      "",
      "  replica {",
      "    region_name = \"us-east-1\"",
      "  }",
      "",
      "  replica {",
      "    region_name = \"us-west-2\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-dynamodb_table": {
    "description": "Defines dynamodb_table",
    "prefix": "tf-aws-resource-dynamodb_table",
    "body": [
      "resource \"aws_dynamodb_table\" \"basic-dynamodb-table\" {",
      "  name           = \"GameScores\"",
      "  billing_mode   = \"PROVISIONED\"",
      "  read_capacity  = 20",
      "  write_capacity = 20",
      "  hash_key       = \"UserId\"",
      "  range_key      = \"GameTitle\"",
      "",
      "  attribute {",
      "    name = \"UserId\"",
      "    type = \"S\"",
      "  }",
      "",
      "  attribute {",
      "    name = \"GameTitle\"",
      "    type = \"S\"",
      "  }",
      "",
      "  attribute {",
      "    name = \"TopScore\"",
      "    type = \"N\"",
      "  }",
      "",
      "  ttl {",
      "    attribute_name = \"TimeToExist\"",
      "    enabled        = false",
      "  }",
      "",
      "  global_secondary_index {",
      "    name               = \"GameTitleIndex\"",
      "    hash_key           = \"GameTitle\"",
      "    range_key          = \"TopScore\"",
      "    write_capacity     = 10",
      "    read_capacity      = 10",
      "    projection_type    = \"INCLUDE\"",
      "    non_key_attributes = [\"UserId\"]",
      "  }",
      "",
      "  tags = {",
      "    Name        = \"dynamodb-table-1\"",
      "    Environment = \"production\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-dynamodb_table_item": {
    "description": "Defines dynamodb_table_item",
    "prefix": "tf-aws-resource-dynamodb_table_item",
    "body": [
      "resource \"aws_dynamodb_table_item\" \"example\" {",
      "  table_name = aws_dynamodb_table.example.name",
      "  hash_key   = aws_dynamodb_table.example.hash_key",
      "",
      "  item = <<ITEM",
      "{",
      "  \"exampleHashKey\": {\"S\": \"something\"},",
      "  \"one\": {\"N\": \"11111\"},",
      "  \"two\": {\"N\": \"22222\"},",
      "  \"three\": {\"N\": \"33333\"},",
      "  \"four\": {\"N\": \"44444\"}",
      "}",
      "ITEM",
      "}",
      "",
      "resource \"aws_dynamodb_table\" \"example\" {",
      "  name           = \"example-name\"",
      "  read_capacity  = 10",
      "  write_capacity = 10",
      "  hash_key       = \"exampleHashKey\"",
      "",
      "  attribute {",
      "    name = \"exampleHashKey\"",
      "    type = \"S\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ebs_default_kms_key": {
    "description": "Defines ebs_default_kms_key",
    "prefix": "tf-aws-resource-ebs_default_kms_key",
    "body": [
      "resource \"aws_ebs_default_kms_key\" \"example\" {",
      "  key_arn = aws_kms_key.example.arn",
      "}"
    ]
  },
  "aws-resource-ebs_encryption_by_default": {
    "description": "Defines ebs_encryption_by_default",
    "prefix": "tf-aws-resource-ebs_encryption_by_default",
    "body": [
      "resource \"aws_ebs_encryption_by_default\" \"example\" {",
      "  enabled = true",
      "}"
    ]
  },
  "aws-resource-ebs_snapshot": {
    "description": "Defines ebs_snapshot",
    "prefix": "tf-aws-resource-ebs_snapshot",
    "body": [
      "resource \"aws_ebs_volume\" \"example\" {",
      "  availability_zone = \"us-west-2a\"",
      "  size              = 40",
      "",
      "  tags = {",
      "    Name = \"HelloWorld\"",
      "  }",
      "}",
      "",
      "resource \"aws_ebs_snapshot\" \"example_snapshot\" {",
      "  volume_id = aws_ebs_volume.example.id",
      "",
      "  tags = {",
      "    Name = \"HelloWorld_snap\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ebs_snapshot_copy": {
    "description": "Defines ebs_snapshot_copy",
    "prefix": "tf-aws-resource-ebs_snapshot_copy",
    "body": [
      "resource \"aws_ebs_volume\" \"example\" {",
      "  availability_zone = \"us-west-2a\"",
      "  size              = 40",
      "",
      "  tags = {",
      "    Name = \"HelloWorld\"",
      "  }",
      "}",
      "",
      "resource \"aws_ebs_snapshot\" \"example_snapshot\" {",
      "  volume_id = aws_ebs_volume.example.id",
      "",
      "  tags = {",
      "    Name = \"HelloWorld_snap\"",
      "  }",
      "}",
      "",
      "resource \"aws_ebs_snapshot_copy\" \"example_copy\" {",
      "  source_snapshot_id = aws_ebs_snapshot.example_snapshot.id",
      "  source_region      = \"us-west-2\"",
      "",
      "  tags = {",
      "    Name = \"HelloWorld_copy_snap\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ebs_volume": {
    "description": "Defines ebs_volume",
    "prefix": "tf-aws-resource-ebs_volume",
    "body": [
      "resource \"aws_ebs_volume\" \"example\" {",
      "  availability_zone = \"us-west-2a\"",
      "  size              = 40",
      "",
      "  tags = {",
      "    Name = \"HelloWorld\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ec2_availability_zone_group": {
    "description": "Defines ec2_availability_zone_group",
    "prefix": "tf-aws-resource-ec2_availability_zone_group",
    "body": [
      "resource \"aws_ec2_availability_zone_group\" \"example\" {",
      "  group_name    = \"us-west-2-lax-1\"",
      "  opt_in_status = \"opted-in\"",
      "}"
    ]
  },
  "aws-resource-ec2_capacity_reservation": {
    "description": "Defines ec2_capacity_reservation",
    "prefix": "tf-aws-resource-ec2_capacity_reservation",
    "body": [
      "resource \"aws_ec2_capacity_reservation\" \"default\" {",
      "  instance_type     = \"t2.micro\"",
      "  instance_platform = \"Linux/UNIX\"",
      "  availability_zone = \"eu-west-1a\"",
      "  instance_count    = 1",
      "}"
    ]
  },
  "aws-resource-ec2_carrier_gateway": {
    "description": "Defines ec2_carrier_gateway",
    "prefix": "tf-aws-resource-ec2_carrier_gateway",
    "body": [
      "resource \"aws_ec2_carrier_gateway\" \"example\" {",
      "  vpc_id = aws_vpc.example.id",
      "",
      "  tags = {",
      "    Name = \"example-carrier-gateway\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ec2_client_vpn_authorization_rule": {
    "description": "Defines ec2_client_vpn_authorization_rule",
    "prefix": "tf-aws-resource-ec2_client_vpn_authorization_rule",
    "body": [
      "resource \"aws_ec2_client_vpn_authorization_rule\" \"example\" {",
      "  client_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.example.id",
      "  target_network_cidr    = aws_subnet.example.cidr_block",
      "  authorize_all_groups   = true",
      "}"
    ]
  },
  "aws-resource-ec2_client_vpn_endpoint": {
    "description": "Defines ec2_client_vpn_endpoint",
    "prefix": "tf-aws-resource-ec2_client_vpn_endpoint",
    "body": [
      "resource \"aws_ec2_client_vpn_endpoint\" \"example\" {",
      "  description            = \"terraform-clientvpn-example\"",
      "  server_certificate_arn = aws_acm_certificate.cert.arn",
      "  client_cidr_block      = \"10.0.0.0/16\"",
      "",
      "  authentication_options {",
      "    type                       = \"certificate-authentication\"",
      "    root_certificate_chain_arn = aws_acm_certificate.root_cert.arn",
      "  }",
      "",
      "  connection_log_options {",
      "    enabled               = true",
      "    cloudwatch_log_group  = aws_cloudwatch_log_group.lg.name",
      "    cloudwatch_log_stream = aws_cloudwatch_log_stream.ls.name",
      "  }",
      "}"
    ]
  },
  "aws-resource-ec2_client_vpn_network_association": {
    "description": "Defines ec2_client_vpn_network_association",
    "prefix": "tf-aws-resource-ec2_client_vpn_network_association",
    "body": [
      "resource \"aws_ec2_client_vpn_network_association\" \"example\" {",
      "  client_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.example.id",
      "  subnet_id              = aws_subnet.example.id",
      "}"
    ]
  },
  "aws-resource-ec2_client_vpn_route": {
    "description": "Defines ec2_client_vpn_route",
    "prefix": "tf-aws-resource-ec2_client_vpn_route",
    "body": [
      "resource \"aws_ec2_client_vpn_route\" \"example\" {",
      "  client_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.example.id",
      "  destination_cidr_block = \"0.0.0.0/0\"",
      "  target_vpc_subnet_id   = aws_ec2_client_vpn_network_association.example.subnet_id",
      "}",
      "",
      "resource \"aws_ec2_client_vpn_network_association\" \"example\" {",
      "  client_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.example.id",
      "  subnet_id              = aws_subnet.example.id",
      "}",
      "",
      "resource \"aws_ec2_client_vpn_endpoint\" \"example\" {",
      "  description            = \"Example Client VPN endpoint\"",
      "  server_certificate_arn = aws_acm_certificate.example.arn",
      "  client_cidr_block      = \"10.0.0.0/16\"",
      "",
      "  authentication_options {",
      "    type                       = \"certificate-authentication\"",
      "    root_certificate_chain_arn = aws_acm_certificate.example.arn",
      "  }",
      "",
      "  connection_log_options {",
      "    enabled = false",
      "  }",
      "}"
    ]
  },
  "aws-resource-ec2_fleet": {
    "description": "Defines ec2_fleet",
    "prefix": "tf-aws-resource-ec2_fleet",
    "body": [
      "resource \"aws_ec2_fleet\" \"example\" {",
      "  launch_template_config {",
      "    launch_template_specification {",
      "      launch_template_id = aws_launch_template.example.id",
      "      version            = aws_launch_template.example.latest_version",
      "    }",
      "  }",
      "",
      "  target_capacity_specification {",
      "    default_target_capacity_type = \"spot\"",
      "    total_target_capacity        = 5",
      "  }",
      "}"
    ]
  },
  "aws-resource-ec2_local_gateway_route": {
    "description": "Defines ec2_local_gateway_route",
    "prefix": "tf-aws-resource-ec2_local_gateway_route",
    "body": [
      "resource \"aws_ec2_local_gateway_route\" \"example\" {",
      "  destination_cidr_block                   = \"172.16.0.0/16\"",
      "  local_gateway_route_table_id             = data.aws_ec2_local_gateway_route_table.example.id",
      "  local_gateway_virtual_interface_group_id = data.aws_ec2_local_gateway_virtual_interface_group.example.id",
      "}"
    ]
  },
  "aws-resource-ec2_local_gateway_route_table_vpc_association": {
    "description": "Defines ec2_local_gateway_route_table_vpc_association",
    "prefix": "tf-aws-resource-ec2_local_gateway_route_table_vpc_association",
    "body": [
      "data \"aws_ec2_local_gateway_route_table\" \"example\" {",
      "  outpost_arn = \"arn:aws:outposts:us-west-2:123456789012:outpost/op-1234567890abcdef\"",
      "}",
      "",
      "resource \"aws_vpc\" \"example\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_ec2_local_gateway_route_table_vpc_association\" \"example\" {",
      "  local_gateway_route_table_id = data.aws_ec2_local_gateway_route_table.example.id",
      "  vpc_id                       = aws_vpc.example.id",
      "}"
    ]
  },
  "aws-resource-ec2_managed_prefix_list": {
    "description": "Defines ec2_managed_prefix_list",
    "prefix": "tf-aws-resource-ec2_managed_prefix_list",
    "body": [
      "resource \"aws_ec2_managed_prefix_list\" \"example\" {",
      "  name           = \"All VPC CIDR-s\"",
      "  address_family = \"IPv4\"",
      "  max_entries    = 5",
      "",
      "  entry {",
      "    cidr        = aws_vpc.example.cidr_block",
      "    description = \"Primary\"",
      "  }",
      "",
      "  entry {",
      "    cidr        = aws_vpc_ipv4_cidr_block_association.example.cidr_block",
      "    description = \"Secondary\"",
      "  }",
      "",
      "  tags = {",
      "    Env = \"live\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ec2_tag": {
    "description": "Defines ec2_tag",
    "prefix": "tf-aws-resource-ec2_tag",
    "body": [
      "resource \"aws_ec2_transit_gateway\" \"example\" {}",
      "",
      "resource \"aws_customer_gateway\" \"example\" {",
      "  bgp_asn    = 65000",
      "  ip_address = \"172.0.0.1\"",
      "  type       = \"ipsec.1\"",
      "}",
      "",
      "resource \"aws_vpn_connection\" \"example\" {",
      "  customer_gateway_id = aws_customer_gateway.example.id",
      "  transit_gateway_id  = aws_ec2_transit_gateway.example.id",
      "  type                = aws_customer_gateway.example.type",
      "}",
      "",
      "resource \"aws_ec2_tag\" \"example\" {",
      "  resource_id = aws_vpn_connection.example.transit_gateway_attachment_id",
      "  key         = \"Name\"",
      "  value       = \"Hello World\"",
      "}"
    ]
  },
  "aws-resource-ec2_traffic_mirror_filter": {
    "description": "Defines ec2_traffic_mirror_filter",
    "prefix": "tf-aws-resource-ec2_traffic_mirror_filter",
    "body": [
      "resource \"aws_ec2_traffic_mirror_filter\" \"foo\" {",
      "  description      = \"traffic mirror filter - terraform example\"",
      "  network_services = [\"amazon-dns\"]",
      "}"
    ]
  },
  "aws-resource-ec2_traffic_mirror_filter_rule": {
    "description": "Defines ec2_traffic_mirror_filter_rule",
    "prefix": "tf-aws-resource-ec2_traffic_mirror_filter_rule",
    "body": [
      "resource \"aws_ec2_traffic_mirror_filter\" \"filter\" {",
      "  description      = \"traffic mirror filter - terraform example\"",
      "  network_services = [\"amazon-dns\"]",
      "}",
      "",
      "resource \"aws_ec2_traffic_mirror_filter_rule\" \"ruleout\" {",
      "  description              = \"test rule\"",
      "  traffic_mirror_filter_id = aws_ec2_traffic_mirror_filter.filter.id",
      "  destination_cidr_block   = \"10.0.0.0/8\"",
      "  source_cidr_block        = \"10.0.0.0/8\"",
      "  rule_number              = 1",
      "  rule_action              = \"accept\"",
      "  traffic_direction        = \"egress\"",
      "}",
      "",
      "resource \"aws_ec2_traffic_mirror_filter_rule\" \"rulein\" {",
      "  description              = \"test rule\"",
      "  traffic_mirror_filter_id = aws_ec2_traffic_mirror_filter.filter.id",
      "  destination_cidr_block   = \"10.0.0.0/8\"",
      "  source_cidr_block        = \"10.0.0.0/8\"",
      "  rule_number              = 1",
      "  rule_action              = \"accept\"",
      "  traffic_direction        = \"ingress\"",
      "  protocol                 = 6",
      "",
      "  destination_port_range {",
      "    from_port = 22",
      "    to_port   = 53",
      "  }",
      "",
      "  source_port_range {",
      "    from_port = 0",
      "    to_port   = 10",
      "  }",
      "}"
    ]
  },
  "aws-resource-ec2_traffic_mirror_session": {
    "description": "Defines ec2_traffic_mirror_session",
    "prefix": "tf-aws-resource-ec2_traffic_mirror_session",
    "body": [
      "resource \"aws_ec2_traffic_mirror_filter\" \"filter\" {",
      "  description      = \"traffic mirror filter - terraform example\"",
      "  network_services = [\"amazon-dns\"]",
      "}",
      "",
      "resource \"aws_ec2_traffic_mirror_target\" \"target\" {",
      "  network_load_balancer_arn = aws_lb.lb.arn",
      "}",
      "",
      "resource \"aws_ec2_traffic_mirror_session\" \"session\" {",
      "  description              = \"traffic mirror session - terraform example\"",
      "  network_interface_id     = aws_instance.test.primary_network_interface_id",
      "  traffic_mirror_filter_id = aws_ec2_traffic_mirror_filter.filter.id",
      "  traffic_mirror_target_id = aws_ec2_traffic_mirror_target.target.id",
      "}"
    ]
  },
  "aws-resource-ec2_traffic_mirror_target": {
    "description": "Defines ec2_traffic_mirror_target",
    "prefix": "tf-aws-resource-ec2_traffic_mirror_target",
    "body": [
      "resource \"aws_ec2_traffic_mirror_target\" \"nlb\" {",
      "  description               = \"NLB target\"",
      "  network_load_balancer_arn = aws_lb.lb.arn",
      "}",
      "",
      "resource \"aws_ec2_traffic_mirror_target\" \"eni\" {",
      "  description          = \"ENI target\"",
      "  network_interface_id = aws_instance.test.primary_network_interface_id",
      "}"
    ]
  },
  "aws-resource-ec2_transit_gateway": {
    "description": "Defines ec2_transit_gateway",
    "prefix": "tf-aws-resource-ec2_transit_gateway",
    "body": [
      "resource \"aws_ec2_transit_gateway\" \"example\" {",
      "  description = \"example\"",
      "}"
    ]
  },
  "aws-resource-ec2_transit_gateway_peering_attachment": {
    "description": "Defines ec2_transit_gateway_peering_attachment",
    "prefix": "tf-aws-resource-ec2_transit_gateway_peering_attachment",
    "body": [
      "provider \"aws\" {",
      "  alias  = \"local\"",
      "  region = \"us-east-1\"",
      "}",
      "",
      "provider \"aws\" {",
      "  alias  = \"peer\"",
      "  region = \"us-west-2\"",
      "}",
      "",
      "data \"aws_region\" \"peer\" {",
      "  provider = aws.peer",
      "}",
      "",
      "resource \"aws_ec2_transit_gateway\" \"local\" {",
      "  provider = aws.local",
      "",
      "  tags = {",
      "    Name = \"Local TGW\"",
      "  }",
      "}",
      "",
      "resource \"aws_ec2_transit_gateway\" \"peer\" {",
      "  provider = aws.peer",
      "",
      "  tags = {",
      "    Name = \"Peer TGW\"",
      "  }",
      "}",
      "",
      "resource \"aws_ec2_transit_gateway_peering_attachment\" \"example\" {",
      "  peer_account_id         = aws_ec2_transit_gateway.peer.owner_id",
      "  peer_region             = data.aws_region.peer.name",
      "  peer_transit_gateway_id = aws_ec2_transit_gateway.peer.id",
      "  transit_gateway_id      = aws_ec2_transit_gateway.local.id",
      "",
      "  tags = {",
      "    Name = \"TGW Peering Requestor\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ec2_transit_gateway_peering_attachment_accepter": {
    "description": "Defines ec2_transit_gateway_peering_attachment_accepter",
    "prefix": "tf-aws-resource-ec2_transit_gateway_peering_attachment_accepter",
    "body": [
      "resource \"aws_ec2_transit_gateway_peering_attachment_accepter\" \"example\" {",
      "  transit_gateway_attachment_id = aws_ec2_transit_gateway_peering_attachment.example.id",
      "",
      "  tags = {",
      "    Name = \"Example cross-account attachment\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ec2_transit_gateway_prefix_list_reference": {
    "description": "Defines ec2_transit_gateway_prefix_list_reference",
    "prefix": "tf-aws-resource-ec2_transit_gateway_prefix_list_reference",
    "body": [
      "resource \"aws_ec2_transit_gateway_prefix_list_reference\" \"example\" {",
      "  prefix_list_id                 = aws_ec2_managed_prefix_list.example.id",
      "  transit_gateway_attachment_id  = aws_ec2_transit_gateway_vpc_attachment.example.id",
      "  transit_gateway_route_table_id = aws_ec2_transit_gateway.example.association_default_route_table_id",
      "}"
    ]
  },
  "aws-resource-ec2_transit_gateway_route": {
    "description": "Defines ec2_transit_gateway_route",
    "prefix": "tf-aws-resource-ec2_transit_gateway_route",
    "body": [
      "resource \"aws_ec2_transit_gateway_route\" \"example\" {",
      "  destination_cidr_block         = \"0.0.0.0/0\"",
      "  transit_gateway_attachment_id  = aws_ec2_transit_gateway_vpc_attachment.example.id",
      "  transit_gateway_route_table_id = aws_ec2_transit_gateway.example.association_default_route_table_id",
      "}"
    ]
  },
  "aws-resource-ec2_transit_gateway_route_table": {
    "description": "Defines ec2_transit_gateway_route_table",
    "prefix": "tf-aws-resource-ec2_transit_gateway_route_table",
    "body": [
      "resource \"aws_ec2_transit_gateway_route_table\" \"example\" {",
      "  transit_gateway_id = aws_ec2_transit_gateway.example.id",
      "}"
    ]
  },
  "aws-resource-ec2_transit_gateway_route_table_association": {
    "description": "Defines ec2_transit_gateway_route_table_association",
    "prefix": "tf-aws-resource-ec2_transit_gateway_route_table_association",
    "body": [
      "resource \"aws_ec2_transit_gateway_route_table_association\" \"example\" {",
      "  transit_gateway_attachment_id  = aws_ec2_transit_gateway_vpc_attachment.example.id",
      "  transit_gateway_route_table_id = aws_ec2_transit_gateway_route_table.example.id",
      "}"
    ]
  },
  "aws-resource-ec2_transit_gateway_route_table_propagation": {
    "description": "Defines ec2_transit_gateway_route_table_propagation",
    "prefix": "tf-aws-resource-ec2_transit_gateway_route_table_propagation",
    "body": [
      "resource \"aws_ec2_transit_gateway_route_table_propagation\" \"example\" {",
      "  transit_gateway_attachment_id  = aws_ec2_transit_gateway_vpc_attachment.example.id",
      "  transit_gateway_route_table_id = aws_ec2_transit_gateway_route_table.example.id",
      "}"
    ]
  },
  "aws-resource-ec2_transit_gateway_vpc_attachment": {
    "description": "Defines ec2_transit_gateway_vpc_attachment",
    "prefix": "tf-aws-resource-ec2_transit_gateway_vpc_attachment",
    "body": [
      "resource \"aws_ec2_transit_gateway_vpc_attachment\" \"example\" {",
      "  subnet_ids         = [aws_subnet.example.id]",
      "  transit_gateway_id = aws_ec2_transit_gateway.example.id",
      "  vpc_id             = aws_vpc.example.id",
      "}"
    ]
  },
  "aws-resource-ec2_transit_gateway_vpc_attachment_accepter": {
    "description": "Defines ec2_transit_gateway_vpc_attachment_accepter",
    "prefix": "tf-aws-resource-ec2_transit_gateway_vpc_attachment_accepter",
    "body": [
      "resource \"aws_ec2_transit_gateway_vpc_attachment_accepter\" \"example\" {",
      "  transit_gateway_attachment_id = aws_ec2_transit_gateway_vpc_attachment.example.id",
      "",
      "  tags = {",
      "    Name = \"Example cross-account attachment\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ecr_lifecycle_policy": {
    "description": "Defines ecr_lifecycle_policy",
    "prefix": "tf-aws-resource-ecr_lifecycle_policy",
    "body": [
      "resource \"aws_ecr_repository\" \"foo\" {",
      "  name = \"bar\"",
      "}",
      "",
      "resource \"aws_ecr_lifecycle_policy\" \"foopolicy\" {",
      "  repository = aws_ecr_repository.foo.name",
      "",
      "  policy = <<EOF",
      "{",
      "    \"rules\": [",
      "        {",
      "            \"rulePriority\": 1,",
      "            \"description\": \"Expire images older than 14 days\",",
      "            \"selection\": {",
      "                \"tagStatus\": \"untagged\",",
      "                \"countType\": \"sinceImagePushed\",",
      "                \"countUnit\": \"days\",",
      "                \"countNumber\": 14",
      "            },",
      "            \"action\": {",
      "                \"type\": \"expire\"",
      "            }",
      "        }",
      "    ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-ecr_repository": {
    "description": "Defines ecr_repository",
    "prefix": "tf-aws-resource-ecr_repository",
    "body": [
      "resource \"aws_ecr_repository\" \"foo\" {",
      "  name                 = \"bar\"",
      "  image_tag_mutability = \"MUTABLE\"",
      "",
      "  image_scanning_configuration {",
      "    scan_on_push = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-ecr_repository_policy": {
    "description": "Defines ecr_repository_policy",
    "prefix": "tf-aws-resource-ecr_repository_policy",
    "body": [
      "resource \"aws_ecr_repository\" \"foo\" {",
      "  name = \"bar\"",
      "}",
      "",
      "resource \"aws_ecr_repository_policy\" \"foopolicy\" {",
      "  repository = aws_ecr_repository.foo.name",
      "",
      "  policy = <<EOF",
      "{",
      "    \"Version\": \"2008-10-17\",",
      "    \"Statement\": [",
      "        {",
      "            \"Sid\": \"new policy\",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": \"*\",",
      "            \"Action\": [",
      "                \"ecr:GetDownloadUrlForLayer\",",
      "                \"ecr:BatchGetImage\",",
      "                \"ecr:BatchCheckLayerAvailability\",",
      "                \"ecr:PutImage\",",
      "                \"ecr:InitiateLayerUpload\",",
      "                \"ecr:UploadLayerPart\",",
      "                \"ecr:CompleteLayerUpload\",",
      "                \"ecr:DescribeRepositories\",",
      "                \"ecr:GetRepositoryPolicy\",",
      "                \"ecr:ListImages\",",
      "                \"ecr:DeleteRepository\",",
      "                \"ecr:BatchDeleteImage\",",
      "                \"ecr:SetRepositoryPolicy\",",
      "                \"ecr:DeleteRepositoryPolicy\"",
      "            ]",
      "        }",
      "    ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-ecrpublic_repository": {
    "description": "Defines ecrpublic_repository",
    "prefix": "tf-aws-resource-ecrpublic_repository",
    "body": [
      "resource \"aws_ecrpublic_repository\" \"foo\" {",
      "  repository_name = \"bar\"",
      "",
      "  catalog_data {",
      "    about_text        = \"About Text\"",
      "    architectures     = [\"Linux\"]",
      "    description       = \"Description\"",
      "    logo_image_blob   = filebase64(image.png)",
      "    operating_systems = [\"ARM\"]",
      "    usage_text        = \"Usage Text\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ecs_capacity_provider": {
    "description": "Defines ecs_capacity_provider",
    "prefix": "tf-aws-resource-ecs_capacity_provider",
    "body": [
      "resource \"aws_autoscaling_group\" \"test\" {",
      "  # ... other configuration, including potentially other tags ...",
      "",
      "  tag {",
      "    key                 = \"AmazonECSManaged\"",
      "    value               = \"\"",
      "    propagate_at_launch = true",
      "  }",
      "}",
      "",
      "resource \"aws_ecs_capacity_provider\" \"test\" {",
      "  name = \"test\"",
      "",
      "  auto_scaling_group_provider {",
      "    auto_scaling_group_arn         = aws_autoscaling_group.test.arn",
      "    managed_termination_protection = \"ENABLED\"",
      "",
      "    managed_scaling {",
      "      maximum_scaling_step_size = 1000",
      "      minimum_scaling_step_size = 1",
      "      status                    = \"ENABLED\"",
      "      target_capacity           = 10",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-ecs_cluster": {
    "description": "Defines ecs_cluster",
    "prefix": "tf-aws-resource-ecs_cluster",
    "body": [
      "resource \"aws_ecs_cluster\" \"foo\" {",
      "  name = \"white-hart\"",
      "}"
    ]
  },
  "aws-resource-ecs_service": {
    "description": "Defines ecs_service",
    "prefix": "tf-aws-resource-ecs_service",
    "body": [
      "resource \"aws_ecs_service\" \"mongo\" {",
      "  name            = \"mongodb\"",
      "  cluster         = aws_ecs_cluster.foo.id",
      "  task_definition = aws_ecs_task_definition.mongo.arn",
      "  desired_count   = 3",
      "  iam_role        = aws_iam_role.foo.arn",
      "  depends_on      = [aws_iam_role_policy.foo]",
      "",
      "  ordered_placement_strategy {",
      "    type  = \"binpack\"",
      "    field = \"cpu\"",
      "  }",
      "",
      "  load_balancer {",
      "    target_group_arn = aws_lb_target_group.foo.arn",
      "    container_name   = \"mongo\"",
      "    container_port   = 8080",
      "  }",
      "",
      "  placement_constraints {",
      "    type       = \"memberOf\"",
      "    expression = \"attribute:ecs.availability-zone in [us-west-2a, us-west-2b]\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ecs_task_definition": {
    "description": "Defines ecs_task_definition",
    "prefix": "tf-aws-resource-ecs_task_definition",
    "body": [
      "resource \"aws_ecs_task_definition\" \"service\" {",
      "  family                = \"service\"",
      "  container_definitions = file(\"task-definitions/service.json\")",
      "",
      "  volume {",
      "    name      = \"service-storage\"",
      "    host_path = \"/ecs/service-storage\"",
      "  }",
      "",
      "  placement_constraints {",
      "    type       = \"memberOf\"",
      "    expression = \"attribute:ecs.availability-zone in [us-west-2a, us-west-2b]\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-efs_access_point": {
    "description": "Defines efs_access_point",
    "prefix": "tf-aws-resource-efs_access_point",
    "body": [
      "resource \"aws_efs_access_point\" \"test\" {",
      "  file_system_id = aws_efs_file_system.foo.id",
      "}"
    ]
  },
  "aws-resource-efs_file_system": {
    "description": "Defines efs_file_system",
    "prefix": "tf-aws-resource-efs_file_system",
    "body": [
      "resource \"aws_efs_file_system\" \"foo\" {",
      "  creation_token = \"my-product\"",
      "",
      "  tags = {",
      "    Name = \"MyProduct\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-efs_file_system_policy": {
    "description": "Defines efs_file_system_policy",
    "prefix": "tf-aws-resource-efs_file_system_policy",
    "body": [
      "resource \"aws_efs_file_system\" \"fs\" {",
      "  creation_token = \"my-product\"",
      "}",
      "",
      "resource \"aws_efs_file_system_policy\" \"policy\" {",
      "  file_system_id = aws_efs_file_system.fs.id",
      "",
      "  policy = <<POLICY",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Id\": \"ExamplePolicy01\",",
      "    \"Statement\": [",
      "        {",
      "            \"Sid\": \"ExampleStatement01\",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": {",
      "                \"AWS\": \"*\"",
      "            },",
      "            \"Resource\": \"${aws_efs_file_system.test.arn}\",",
      "            \"Action\": [",
      "                \"elasticfilesystem:ClientMount\",",
      "                \"elasticfilesystem:ClientWrite\"",
      "            ],",
      "            \"Condition\": {",
      "                \"Bool\": {",
      "                    \"aws:SecureTransport\": \"true\"",
      "                }",
      "            }",
      "        }",
      "    ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-efs_mount_target": {
    "description": "Defines efs_mount_target",
    "prefix": "tf-aws-resource-efs_mount_target",
    "body": [
      "resource \"aws_efs_mount_target\" \"alpha\" {",
      "  file_system_id = aws_efs_file_system.foo.id",
      "  subnet_id      = aws_subnet.alpha.id",
      "}",
      "",
      "resource \"aws_vpc\" \"foo\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_subnet\" \"alpha\" {",
      "  vpc_id            = aws_vpc.foo.id",
      "  availability_zone = \"us-west-2a\"",
      "  cidr_block        = \"10.0.1.0/24\"",
      "}"
    ]
  },
  "aws-resource-egress_only_internet_gateway": {
    "description": "Defines egress_only_internet_gateway",
    "prefix": "tf-aws-resource-egress_only_internet_gateway",
    "body": [
      "resource \"aws_vpc\" \"example\" {",
      "  cidr_block                       = \"10.1.0.0/16\"",
      "  assign_generated_ipv6_cidr_block = true",
      "}",
      "",
      "resource \"aws_egress_only_internet_gateway\" \"example\" {",
      "  vpc_id = aws_vpc.example.id",
      "",
      "  tags = {",
      "    Name = \"main\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-eip": {
    "description": "Defines eip",
    "prefix": "tf-aws-resource-eip",
    "body": [
      "resource \"aws_eip\" \"lb\" {",
      "  instance = aws_instance.web.id",
      "  vpc      = true",
      "}"
    ]
  },
  "aws-resource-eip_association": {
    "description": "Defines eip_association",
    "prefix": "tf-aws-resource-eip_association",
    "body": [
      "resource \"aws_eip_association\" \"eip_assoc\" {",
      "  instance_id   = aws_instance.web.id",
      "  allocation_id = aws_eip.example.id",
      "}",
      "",
      "resource \"aws_instance\" \"web\" {",
      "  ami               = \"ami-21f78e11\"",
      "  availability_zone = \"us-west-2a\"",
      "  instance_type     = \"t2.micro\"",
      "",
      "  tags = {",
      "    Name = \"HelloWorld\"",
      "  }",
      "}",
      "",
      "resource \"aws_eip\" \"example\" {",
      "  vpc = true",
      "}"
    ]
  },
  "aws-resource-eks_cluster": {
    "description": "Defines eks_cluster",
    "prefix": "tf-aws-resource-eks_cluster",
    "body": [
      "resource \"aws_eks_cluster\" \"example\" {",
      "  name     = \"example\"",
      "  role_arn = aws_iam_role.example.arn",
      "",
      "  vpc_config {",
      "    subnet_ids = [aws_subnet.example1.id, aws_subnet.example2.id]",
      "  }",
      "",
      "  # Ensure that IAM Role permissions are created before and deleted after EKS Cluster handling.",
      "  # Otherwise, EKS will not be able to properly delete EKS managed EC2 infrastructure such as Security Groups.",
      "  depends_on = [",
      "    aws_iam_role_policy_attachment.example-AmazonEKSClusterPolicy,",
      "    aws_iam_role_policy_attachment.example-AmazonEKSVPCResourceController,",
      "  ]",
      "}",
      "",
      "output \"endpoint\" {",
      "  value = aws_eks_cluster.example.endpoint",
      "}",
      "",
      "output \"kubeconfig-certificate-authority-data\" {",
      "  value = aws_eks_cluster.example.certificate_authority[0].data",
      "}"
    ]
  },
  "aws-resource-eks_fargate_profile": {
    "description": "Defines eks_fargate_profile",
    "prefix": "tf-aws-resource-eks_fargate_profile",
    "body": [
      "resource \"aws_eks_fargate_profile\" \"example\" {",
      "  cluster_name           = aws_eks_cluster.example.name",
      "  fargate_profile_name   = \"example\"",
      "  pod_execution_role_arn = aws_iam_role.example.arn",
      "  subnet_ids             = aws_subnet.example[*].id",
      "",
      "  selector {",
      "    namespace = \"example\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-eks_node_group": {
    "description": "Defines eks_node_group",
    "prefix": "tf-aws-resource-eks_node_group",
    "body": [
      "resource \"aws_eks_node_group\" \"example\" {",
      "  cluster_name    = aws_eks_cluster.example.name",
      "  node_group_name = \"example\"",
      "  node_role_arn   = aws_iam_role.example.arn",
      "  subnet_ids      = aws_subnet.example[*].id",
      "",
      "  scaling_config {",
      "    desired_size = 1",
      "    max_size     = 1",
      "    min_size     = 1",
      "  }",
      "",
      "  # Ensure that IAM Role permissions are created before and deleted after EKS Node Group handling.",
      "  # Otherwise, EKS will not be able to properly delete EC2 Instances and Elastic Network Interfaces.",
      "  depends_on = [",
      "    aws_iam_role_policy_attachment.example-AmazonEKSWorkerNodePolicy,",
      "    aws_iam_role_policy_attachment.example-AmazonEKS_CNI_Policy,",
      "    aws_iam_role_policy_attachment.example-AmazonEC2ContainerRegistryReadOnly,",
      "  ]",
      "}"
    ]
  },
  "aws-resource-elastic_beanstalk_application": {
    "description": "Defines elastic_beanstalk_application",
    "prefix": "tf-aws-resource-elastic_beanstalk_application",
    "body": [
      "resource \"aws_elastic_beanstalk_application\" \"tftest\" {",
      "  name        = \"tf-test-name\"",
      "  description = \"tf-test-desc\"",
      "",
      "  appversion_lifecycle {",
      "    service_role          = aws_iam_role.beanstalk_service.arn",
      "    max_count             = 128",
      "    delete_source_from_s3 = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-elastic_beanstalk_application_version": {
    "description": "Defines elastic_beanstalk_application_version",
    "prefix": "tf-aws-resource-elastic_beanstalk_application_version",
    "body": [
      "resource \"aws_s3_bucket\" \"default\" {",
      "  bucket = \"tftest.applicationversion.bucket\"",
      "}",
      "",
      "resource \"aws_s3_bucket_object\" \"default\" {",
      "  bucket = aws_s3_bucket.default.id",
      "  key    = \"beanstalk/go-v1.zip\"",
      "  source = \"go-v1.zip\"",
      "}",
      "",
      "resource \"aws_elastic_beanstalk_application\" \"default\" {",
      "  name        = \"tf-test-name\"",
      "  description = \"tf-test-desc\"",
      "}",
      "",
      "resource \"aws_elastic_beanstalk_application_version\" \"default\" {",
      "  name        = \"tf-test-version-label\"",
      "  application = \"tf-test-name\"",
      "  description = \"application version created by terraform\"",
      "  bucket      = aws_s3_bucket.default.id",
      "  key         = aws_s3_bucket_object.default.id",
      "}"
    ]
  },
  "aws-resource-elastic_beanstalk_configuration_template": {
    "description": "Defines elastic_beanstalk_configuration_template",
    "prefix": "tf-aws-resource-elastic_beanstalk_configuration_template",
    "body": [
      "resource \"aws_elastic_beanstalk_application\" \"tftest\" {",
      "  name        = \"tf-test-name\"",
      "  description = \"tf-test-desc\"",
      "}",
      "",
      "resource \"aws_elastic_beanstalk_configuration_template\" \"tf_template\" {",
      "  name                = \"tf-test-template-config\"",
      "  application         = aws_elastic_beanstalk_application.tftest.name",
      "  solution_stack_name = \"64bit Amazon Linux 2015.09 v2.0.8 running Go 1.4\"",
      "}"
    ]
  },
  "aws-resource-elastic_beanstalk_environment": {
    "description": "Defines elastic_beanstalk_environment",
    "prefix": "tf-aws-resource-elastic_beanstalk_environment",
    "body": [
      "resource \"aws_elastic_beanstalk_application\" \"tftest\" {",
      "  name        = \"tf-test-name\"",
      "  description = \"tf-test-desc\"",
      "}",
      "",
      "resource \"aws_elastic_beanstalk_environment\" \"tfenvtest\" {",
      "  name                = \"tf-test-name\"",
      "  application         = aws_elastic_beanstalk_application.tftest.name",
      "  solution_stack_name = \"64bit Amazon Linux 2015.03 v2.0.3 running Go 1.4\"",
      "}"
    ]
  },
  "aws-resource-elasticache_cluster": {
    "description": "Defines elasticache_cluster",
    "prefix": "tf-aws-resource-elasticache_cluster",
    "body": [
      "resource \"aws_elasticache_cluster\" \"example\" {",
      "  cluster_id           = \"cluster-example\"",
      "  engine               = \"memcached\"",
      "  node_type            = \"cache.m4.large\"",
      "  num_cache_nodes      = 2",
      "  parameter_group_name = \"default.memcached1.4\"",
      "  port                 = 11211",
      "}"
    ]
  },
  "aws-resource-elasticache_global_replication_group": {
    "description": "Defines elasticache_global_replication_group",
    "prefix": "tf-aws-resource-elasticache_global_replication_group",
    "body": [
      "resource \"aws_elasticache_global_replication_group\" \"replication_group\" {",
      "  global_replication_group_id_suffix = \"example\"",
      "  primary_replication_group_id       = aws_elasticache_replication_group.primary.id",
      "}",
      "",
      "resource \"aws_elasticache_replication_group\" \"primary\" {",
      "  replication_group_id          = \"example\"",
      "  replication_group_description = \"test example\"",
      "",
      "  engine                = \"redis\"",
      "  engine_version        = \"5.0.6\"",
      "  node_type             = \"cache.m5.large\"",
      "  number_cache_clusters = 1",
      "}"
    ]
  },
  "aws-resource-elasticache_parameter_group": {
    "description": "Defines elasticache_parameter_group",
    "prefix": "tf-aws-resource-elasticache_parameter_group",
    "body": [
      "resource \"aws_elasticache_parameter_group\" \"default\" {",
      "  name   = \"cache-params\"",
      "  family = \"redis2.8\"",
      "",
      "  parameter {",
      "    name  = \"activerehashing\"",
      "    value = \"yes\"",
      "  }",
      "",
      "  parameter {",
      "    name  = \"min-slaves-to-write\"",
      "    value = \"2\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-elasticache_replication_group": {
    "description": "Defines elasticache_replication_group",
    "prefix": "tf-aws-resource-elasticache_replication_group",
    "body": [
      "resource \"aws_elasticache_replication_group\" \"example\" {",
      "  automatic_failover_enabled    = true",
      "  availability_zones            = [\"us-west-2a\", \"us-west-2b\"]",
      "  replication_group_id          = \"tf-rep-group-1\"",
      "  replication_group_description = \"test description\"",
      "  node_type                     = \"cache.m4.large\"",
      "  number_cache_clusters         = 2",
      "  parameter_group_name          = \"default.redis3.2\"",
      "  port                          = 6379",
      "}"
    ]
  },
  "aws-resource-elasticache_security_group": {
    "description": "Defines elasticache_security_group",
    "prefix": "tf-aws-resource-elasticache_security_group",
    "body": [
      "resource \"aws_security_group\" \"bar\" {",
      "  name = \"security-group\"",
      "}",
      "",
      "resource \"aws_elasticache_security_group\" \"bar\" {",
      "  name                 = \"elasticache-security-group\"",
      "  security_group_names = [aws_security_group.bar.name]",
      "}"
    ]
  },
  "aws-resource-elasticache_subnet_group": {
    "description": "Defines elasticache_subnet_group",
    "prefix": "tf-aws-resource-elasticache_subnet_group",
    "body": [
      "resource \"aws_vpc\" \"foo\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "",
      "  tags = {",
      "    Name = \"tf-test\"",
      "  }",
      "}",
      "",
      "resource \"aws_subnet\" \"foo\" {",
      "  vpc_id            = aws_vpc.foo.id",
      "  cidr_block        = \"10.0.0.0/24\"",
      "  availability_zone = \"us-west-2a\"",
      "",
      "  tags = {",
      "    Name = \"tf-test\"",
      "  }",
      "}",
      "",
      "resource \"aws_elasticache_subnet_group\" \"bar\" {",
      "  name       = \"tf-test-cache-subnet\"",
      "  subnet_ids = [aws_subnet.foo.id]",
      "}"
    ]
  },
  "aws-resource-elasticsearch_domain": {
    "description": "Defines elasticsearch_domain",
    "prefix": "tf-aws-resource-elasticsearch_domain",
    "body": [
      "resource \"aws_elasticsearch_domain\" \"example\" {",
      "  domain_name           = \"example\"",
      "  elasticsearch_version = \"1.5\"",
      "",
      "  cluster_config {",
      "    instance_type = \"r4.large.elasticsearch\"",
      "  }",
      "",
      "  snapshot_options {",
      "    automated_snapshot_start_hour = 23",
      "  }",
      "",
      "  tags = {",
      "    Domain = \"TestDomain\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-elasticsearch_domain_policy": {
    "description": "Defines elasticsearch_domain_policy",
    "prefix": "tf-aws-resource-elasticsearch_domain_policy",
    "body": [
      "resource \"aws_elasticsearch_domain\" \"example\" {",
      "  domain_name           = \"tf-test\"",
      "  elasticsearch_version = \"2.3\"",
      "}",
      "",
      "resource \"aws_elasticsearch_domain_policy\" \"main\" {",
      "  domain_name = aws_elasticsearch_domain.example.domain_name",
      "",
      "  access_policies = <<POLICIES",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "        {",
      "            \"Action\": \"es:*\",",
      "            \"Principal\": \"*\",",
      "            \"Effect\": \"Allow\",",
      "            \"Condition\": {",
      "                \"IpAddress\": {\"aws:SourceIp\": \"127.0.0.1/32\"}",
      "            },",
      "            \"Resource\": \"${aws_elasticsearch_domain.example.arn}/*\"",
      "        }",
      "    ]",
      "}",
      "POLICIES",
      "}"
    ]
  },
  "aws-resource-elastictranscoder_pipeline": {
    "description": "Defines elastictranscoder_pipeline",
    "prefix": "tf-aws-resource-elastictranscoder_pipeline",
    "body": [
      "resource \"aws_elastictranscoder_pipeline\" \"bar\" {",
      "  input_bucket = aws_s3_bucket.input_bucket.bucket",
      "  name         = \"aws_elastictranscoder_pipeline_tf_test_\"",
      "  role         = aws_iam_role.test_role.arn",
      "",
      "  content_config {",
      "    bucket        = aws_s3_bucket.content_bucket.bucket",
      "    storage_class = \"Standard\"",
      "  }",
      "",
      "  thumbnail_config {",
      "    bucket        = aws_s3_bucket.thumb_bucket.bucket",
      "    storage_class = \"Standard\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-elastictranscoder_preset": {
    "description": "Defines elastictranscoder_preset",
    "prefix": "tf-aws-resource-elastictranscoder_preset",
    "body": [
      "resource \"aws_elastictranscoder_preset\" \"bar\" {",
      "  container   = \"mp4\"",
      "  description = \"Sample Preset\"",
      "  name        = \"sample_preset\"",
      "",
      "  audio {",
      "    audio_packing_mode = \"SingleTrack\"",
      "    bit_rate           = 96",
      "    channels           = 2",
      "    codec              = \"AAC\"",
      "    sample_rate        = 44100",
      "  }",
      "",
      "  audio_codec_options {",
      "    profile = \"AAC-LC\"",
      "  }",
      "",
      "  video {",
      "    bit_rate             = \"1600\"",
      "    codec                = \"H.264\"",
      "    display_aspect_ratio = \"16:9\"",
      "    fixed_gop            = \"false\"",
      "    frame_rate           = \"auto\"",
      "    max_frame_rate       = \"60\"",
      "    keyframes_max_dist   = 240",
      "    max_height           = \"auto\"",
      "    max_width            = \"auto\"",
      "    padding_policy       = \"Pad\"",
      "    sizing_policy        = \"Fit\"",
      "  }",
      "",
      "  video_codec_options = {",
      "    Profile                  = \"main\"",
      "    Level                    = \"2.2\"",
      "    MaxReferenceFrames       = 3",
      "    InterlacedMode           = \"Progressive\"",
      "    ColorSpaceConversionMode = \"None\"",
      "  }",
      "",
      "  video_watermarks {",
      "    id                = \"Terraform Test\"",
      "    max_width         = \"20%\"",
      "    max_height        = \"20%\"",
      "    sizing_policy     = \"ShrinkToFit\"",
      "    horizontal_align  = \"Right\"",
      "    horizontal_offset = \"10px\"",
      "    vertical_align    = \"Bottom\"",
      "    vertical_offset   = \"10px\"",
      "    opacity           = \"55.5\"",
      "    target            = \"Content\"",
      "  }",
      "",
      "  thumbnails {",
      "    format         = \"png\"",
      "    interval       = 120",
      "    max_width      = \"auto\"",
      "    max_height     = \"auto\"",
      "    padding_policy = \"Pad\"",
      "    sizing_policy  = \"Fit\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-elb": {
    "description": "Defines elb",
    "prefix": "tf-aws-resource-elb",
    "body": [
      "# Create a new load balancer",
      "resource \"aws_elb\" \"bar\" {",
      "  name               = \"foobar-terraform-elb\"",
      "  availability_zones = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]",
      "",
      "  access_logs {",
      "    bucket        = \"foo\"",
      "    bucket_prefix = \"bar\"",
      "    interval      = 60",
      "  }",
      "",
      "  listener {",
      "    instance_port     = 8000",
      "    instance_protocol = \"http\"",
      "    lb_port           = 80",
      "    lb_protocol       = \"http\"",
      "  }",
      "",
      "  listener {",
      "    instance_port      = 8000",
      "    instance_protocol  = \"http\"",
      "    lb_port            = 443",
      "    lb_protocol        = \"https\"",
      "    ssl_certificate_id = \"arn:aws:iam::123456789012:server-certificate/certName\"",
      "  }",
      "",
      "  health_check {",
      "    healthy_threshold   = 2",
      "    unhealthy_threshold = 2",
      "    timeout             = 3",
      "    target              = \"HTTP:8000/\"",
      "    interval            = 30",
      "  }",
      "",
      "  instances                   = [aws_instance.foo.id]",
      "  cross_zone_load_balancing   = true",
      "  idle_timeout                = 400",
      "  connection_draining         = true",
      "  connection_draining_timeout = 400",
      "",
      "  tags = {",
      "    Name = \"foobar-terraform-elb\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-elb_attachment": {
    "description": "Defines elb_attachment",
    "prefix": "tf-aws-resource-elb_attachment",
    "body": [
      "# Create a new load balancer attachment",
      "resource \"aws_elb_attachment\" \"baz\" {",
      "  elb      = aws_elb.bar.id",
      "  instance = aws_instance.foo.id",
      "}"
    ]
  },
  "aws-resource-emr_cluster": {
    "description": "Defines emr_cluster",
    "prefix": "tf-aws-resource-emr_cluster",
    "body": [
      "resource \"aws_emr_cluster\" \"cluster\" {",
      "  name          = \"emr-test-arn\"",
      "  release_label = \"emr-4.6.0\"",
      "  applications  = [\"Spark\"]",
      "",
      "  additional_info = <<EOF",
      "{",
      "  \"instanceAwsClientConfiguration\": {",
      "    \"proxyPort\": 8099,",
      "    \"proxyHost\": \"myproxy.example.com\"",
      "  }",
      "}",
      "EOF",
      "",
      "  termination_protection            = false",
      "  keep_job_flow_alive_when_no_steps = true",
      "",
      "  ec2_attributes {",
      "    subnet_id                         = aws_subnet.main.id",
      "    emr_managed_master_security_group = aws_security_group.sg.id",
      "    emr_managed_slave_security_group  = aws_security_group.sg.id",
      "    instance_profile                  = aws_iam_instance_profile.emr_profile.arn",
      "  }",
      "",
      "  master_instance_group {",
      "    instance_type = \"m4.large\"",
      "  }",
      "",
      "  core_instance_group {",
      "    instance_type  = \"c4.large\"",
      "    instance_count = 1",
      "",
      "    ebs_config {",
      "      size                 = \"40\"",
      "      type                 = \"gp2\"",
      "      volumes_per_instance = 1",
      "    }",
      "",
      "    bid_price = \"0.30\"",
      "",
      "    autoscaling_policy = <<EOF",
      "{",
      "\"Constraints\": {",
      "  \"MinCapacity\": 1,",
      "  \"MaxCapacity\": 2",
      "},",
      "\"Rules\": [",
      "  {",
      "    \"Name\": \"ScaleOutMemoryPercentage\",",
      "    \"Description\": \"Scale out if YARNMemoryAvailablePercentage is less than 15\",",
      "    \"Action\": {",
      "      \"SimpleScalingPolicyConfiguration\": {",
      "        \"AdjustmentType\": \"CHANGE_IN_CAPACITY\",",
      "        \"ScalingAdjustment\": 1,",
      "        \"CoolDown\": 300",
      "      }",
      "    },",
      "    \"Trigger\": {",
      "      \"CloudWatchAlarmDefinition\": {",
      "        \"ComparisonOperator\": \"LESS_THAN\",",
      "        \"EvaluationPeriods\": 1,",
      "        \"MetricName\": \"YARNMemoryAvailablePercentage\",",
      "        \"Namespace\": \"AWS/ElasticMapReduce\",",
      "        \"Period\": 300,",
      "        \"Statistic\": \"AVERAGE\",",
      "        \"Threshold\": 15.0,",
      "        \"Unit\": \"PERCENT\"",
      "      }",
      "    }",
      "  }",
      "]",
      "}",
      "EOF",
      "  }",
      "",
      "  ebs_root_volume_size = 100",
      "",
      "  tags = {",
      "    role = \"rolename\"",
      "    env  = \"env\"",
      "  }",
      "",
      "  bootstrap_action {",
      "    path = \"s3://elasticmapreduce/bootstrap-actions/run-if\"",
      "    name = \"runif\"",
      "    args = [\"instance.isMaster=true\", \"echo running on master node\"]",
      "  }",
      "",
      "  configurations_json = <<EOF",
      "  [",
      "    {",
      "      \"Classification\": \"hadoop-env\",",
      "      \"Configurations\": [",
      "        {",
      "          \"Classification\": \"export\",",
      "          \"Properties\": {",
      "            \"JAVA_HOME\": \"/usr/lib/jvm/java-1.8.0\"",
      "          }",
      "        }",
      "      ],",
      "      \"Properties\": {}",
      "    },",
      "    {",
      "      \"Classification\": \"spark-env\",",
      "      \"Configurations\": [",
      "        {",
      "          \"Classification\": \"export\",",
      "          \"Properties\": {",
      "            \"JAVA_HOME\": \"/usr/lib/jvm/java-1.8.0\"",
      "          }",
      "        }",
      "      ],",
      "      \"Properties\": {}",
      "    }",
      "  ]",
      "EOF",
      "",
      "  service_role = aws_iam_role.iam_emr_service_role.arn",
      "}"
    ]
  },
  "aws-resource-emr_instance_fleet": {
    "description": "Defines emr_instance_fleet",
    "prefix": "tf-aws-resource-emr_instance_fleet",
    "body": [
      "resource \"aws_emr_instance_fleet\" \"task\" {",
      "  cluster_id = aws_emr_cluster.cluster.id",
      "  instance_type_configs {",
      "    bid_price_as_percentage_of_on_demand_price = 100",
      "    ebs_config {",
      "      size                 = 100",
      "      type                 = \"gp2\"",
      "      volumes_per_instance = 1",
      "    }",
      "    instance_type     = \"m4.xlarge\"",
      "    weighted_capacity = 1",
      "  }",
      "  instance_type_configs {",
      "    bid_price_as_percentage_of_on_demand_price = 100",
      "    ebs_config {",
      "      size                 = 100",
      "      type                 = \"gp2\"",
      "      volumes_per_instance = 1",
      "    }",
      "    instance_type     = \"m4.2xlarge\"",
      "    weighted_capacity = 2",
      "  }",
      "  launch_specifications {",
      "    spot_specification {",
      "      allocation_strategy      = \"capacity-optimized\"",
      "      block_duration_minutes   = 0",
      "      timeout_action           = \"TERMINATE_CLUSTER\"",
      "      timeout_duration_minutes = 10",
      "    }",
      "  }",
      "  name                      = \"task fleet\"",
      "  target_on_demand_capacity = 1",
      "  target_spot_capacity      = 1",
      "}"
    ]
  },
  "aws-resource-emr_instance_group": {
    "description": "Defines emr_instance_group",
    "prefix": "tf-aws-resource-emr_instance_group",
    "body": [
      "resource \"aws_emr_instance_group\" \"task\" {",
      "  cluster_id     = aws_emr_cluster.tf-test-cluster.id",
      "  instance_count = 1",
      "  instance_type  = \"m5.xlarge\"",
      "  name           = \"my little instance group\"",
      "}"
    ]
  },
  "aws-resource-emr_managed_scaling_policy": {
    "description": "Defines emr_managed_scaling_policy",
    "prefix": "tf-aws-resource-emr_managed_scaling_policy",
    "body": [
      "resource \"aws_emr_cluster\" \"sample\" {",
      "  name          = \"emr-sample-cluster\"",
      "  release_label = \"emr-5.30.0\"",
      "",
      "  master_instance_group {",
      "    instance_type = \"m4.large\"",
      "  }",
      "",
      "  core_instance_group {",
      "    instance_type = \"c4.large\"",
      "  }",
      "  # skip ...",
      "}",
      "",
      "resource \"aws_emr_managed_scaling_policy\" \"samplepolicy\" {",
      "  cluster_id = aws_emr_cluster.sample.id",
      "  compute_limits {",
      "    unit_type                       = \"Instances\"",
      "    minimum_capacity_units          = 2",
      "    maximum_capacity_units          = 10",
      "    maximum_ondemand_capacity_units = 2",
      "    maximum_core_capacity_units     = 10",
      "  }",
      "}"
    ]
  },
  "aws-resource-emr_security_configuration": {
    "description": "Defines emr_security_configuration",
    "prefix": "tf-aws-resource-emr_security_configuration",
    "body": [
      "resource \"aws_emr_security_configuration\" \"foo\" {",
      "  name = \"emrsc_other\"",
      "",
      "  configuration = <<EOF",
      "{",
      "  \"EncryptionConfiguration\": {",
      "    \"AtRestEncryptionConfiguration\": {",
      "      \"S3EncryptionConfiguration\": {",
      "        \"EncryptionMode\": \"SSE-S3\"",
      "      },",
      "      \"LocalDiskEncryptionConfiguration\": {",
      "        \"EncryptionKeyProviderType\": \"AwsKms\",",
      "        \"AwsKmsKey\": \"arn:aws:kms:us-west-2:187416307283:alias/tf_emr_test_key\"",
      "      }",
      "    },",
      "    \"EnableInTransitEncryption\": false,",
      "    \"EnableAtRestEncryption\": true",
      "  }",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-flow_log": {
    "description": "Defines flow_log",
    "prefix": "tf-aws-resource-flow_log",
    "body": [
      "resource \"aws_flow_log\" \"example\" {",
      "  iam_role_arn    = aws_iam_role.example.arn",
      "  log_destination = aws_cloudwatch_log_group.example.arn",
      "  traffic_type    = \"ALL\"",
      "  vpc_id          = aws_vpc.example.id",
      "}",
      "",
      "resource \"aws_cloudwatch_log_group\" \"example\" {",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"example\" {",
      "  name = \"example\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Service\": \"vpc-flow-logs.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"example\" {",
      "  name = \"example\"",
      "  role = aws_iam_role.example.id",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"logs:CreateLogGroup\",",
      "        \"logs:CreateLogStream\",",
      "        \"logs:PutLogEvents\",",
      "        \"logs:DescribeLogGroups\",",
      "        \"logs:DescribeLogStreams\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-fms_admin_account": {
    "description": "Defines fms_admin_account",
    "prefix": "tf-aws-resource-fms_admin_account",
    "body": [
      "resource \"aws_fms_admin_account\" \"example\" {}"
    ]
  },
  "aws-resource-fms_policy": {
    "description": "Defines fms_policy",
    "prefix": "tf-aws-resource-fms_policy",
    "body": [
      "resource \"aws_fms_policy\" \"example\" {",
      "  name                  = \"FMS-Policy-Example\"",
      "  exclude_resource_tags = false",
      "  remediation_enabled   = false",
      "  resource_type_list    = [\"AWS::ElasticLoadBalancingV2::LoadBalancer\"]",
      "",
      "  security_service_policy_data {",
      "    type = \"WAF\"",
      "",
      "    managed_service_data = jsonencode({",
      "      type = \"WAF\",",
      "      ruleGroups = [{",
      "        id = aws_wafregional_rule_group.example.id",
      "        overrideAction = {",
      "          type = \"COUNT\"",
      "        }",
      "      }]",
      "      defaultAction = {",
      "        type = \"BLOCK\"",
      "      }",
      "      overrideCustomerWebACLAssociation = false",
      "    })",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_rule_group\" \"example\" {",
      "  metric_name = \"WAFRuleGroupExample\"",
      "  name        = \"WAF-Rule-Group-Example\"",
      "}"
    ]
  },
  "aws-resource-fsx_lustre_file_system": {
    "description": "Defines fsx_lustre_file_system",
    "prefix": "tf-aws-resource-fsx_lustre_file_system",
    "body": [
      "resource \"aws_fsx_lustre_file_system\" \"example\" {",
      "  import_path      = \"s3://${aws_s3_bucket.example.bucket}\"",
      "  storage_capacity = 1200",
      "  subnet_ids       = [aws_subnet.example.id]",
      "}"
    ]
  },
  "aws-resource-fsx_windows_file_system": {
    "description": "Defines fsx_windows_file_system",
    "prefix": "tf-aws-resource-fsx_windows_file_system",
    "body": [
      "resource \"aws_fsx_windows_file_system\" \"example\" {",
      "  active_directory_id = aws_directory_service_directory.example.id",
      "  kms_key_id          = aws_kms_key.example.arn",
      "  storage_capacity    = 300",
      "  subnet_ids          = [aws_subnet.example.id]",
      "  throughput_capacity = 1024",
      "}"
    ]
  },
  "aws-resource-gamelift_alias": {
    "description": "Defines gamelift_alias",
    "prefix": "tf-aws-resource-gamelift_alias",
    "body": [
      "resource \"aws_gamelift_alias\" \"example\" {",
      "  name        = \"example-alias\"",
      "  description = \"Example Description\"",
      "",
      "  routing_strategy {",
      "    message = \"Example Message\"",
      "    type    = \"TERMINAL\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-gamelift_build": {
    "description": "Defines gamelift_build",
    "prefix": "tf-aws-resource-gamelift_build",
    "body": [
      "resource \"aws_gamelift_build\" \"test\" {",
      "  name             = \"example-build\"",
      "  operating_system = \"WINDOWS_2012\"",
      "",
      "  storage_location {",
      "    bucket   = aws_s3_bucket.test.bucket",
      "    key      = aws_s3_bucket_object.test.key",
      "    role_arn = aws_iam_role.test.arn",
      "  }",
      "",
      "  depends_on = [aws_iam_role_policy.test]",
      "}"
    ]
  },
  "aws-resource-gamelift_fleet": {
    "description": "Defines gamelift_fleet",
    "prefix": "tf-aws-resource-gamelift_fleet",
    "body": [
      "resource \"aws_gamelift_fleet\" \"example\" {",
      "  build_id          = aws_gamelift_build.example.id",
      "  ec2_instance_type = \"t2.micro\"",
      "  fleet_type        = \"ON_DEMAND\"",
      "  name              = \"example-fleet-name\"",
      "",
      "  runtime_configuration {",
      "    server_process {",
      "      concurrent_executions = 1",
      "      launch_path           = \"C:\\\\game\\\\GomokuServer.exe\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-gamelift_game_session_queue": {
    "description": "Defines gamelift_game_session_queue",
    "prefix": "tf-aws-resource-gamelift_game_session_queue",
    "body": [
      "resource \"aws_gamelift_game_session_queue\" \"test\" {",
      "  name = \"example-session-queue\"",
      "",
      "  destinations = [",
      "    aws_gamelift_fleet.us_west_2_fleet.arn,",
      "    aws_gamelift_fleet.eu_central_1_fleet.arn,",
      "  ]",
      "",
      "  player_latency_policy {",
      "    maximum_individual_player_latency_milliseconds = 100",
      "    policy_duration_seconds                        = 5",
      "  }",
      "",
      "  player_latency_policy {",
      "    maximum_individual_player_latency_milliseconds = 200",
      "  }",
      "",
      "  timeout_in_seconds = 60",
      "}"
    ]
  },
  "aws-resource-glacier_vault": {
    "description": "Defines glacier_vault",
    "prefix": "tf-aws-resource-glacier_vault",
    "body": [
      "resource \"aws_sns_topic\" \"aws_sns_topic\" {",
      "  name = \"glacier-sns-topic\"",
      "}",
      "",
      "resource \"aws_glacier_vault\" \"my_archive\" {",
      "  name = \"MyArchive\"",
      "",
      "  notification {",
      "    sns_topic = aws_sns_topic.aws_sns_topic.arn",
      "    events    = [\"ArchiveRetrievalCompleted\", \"InventoryRetrievalCompleted\"]",
      "  }",
      "",
      "  access_policy = <<EOF",
      "{",
      "    \"Version\":\"2012-10-17\",",
      "    \"Statement\":[",
      "       {",
      "          \"Sid\": \"add-read-only-perm\",",
      "          \"Principal\": \"*\",",
      "          \"Effect\": \"Allow\",",
      "          \"Action\": [",
      "             \"glacier:InitiateJob\",",
      "             \"glacier:GetJobOutput\"",
      "          ],",
      "          \"Resource\": \"arn:aws:glacier:eu-west-1:432981146916:vaults/MyArchive\"",
      "       }",
      "    ]",
      "}",
      "EOF",
      "",
      "  tags = {",
      "    Test = \"MyArchive\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-glacier_vault_lock": {
    "description": "Defines glacier_vault_lock",
    "prefix": "tf-aws-resource-glacier_vault_lock",
    "body": [
      "resource \"aws_glacier_vault\" \"example\" {",
      "  name = \"example\"",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"example\" {",
      "  statement {",
      "    actions   = [\"glacier:DeleteArchive\"]",
      "    effect    = \"Deny\"",
      "    resources = [aws_glacier_vault.example.arn]",
      "",
      "    condition {",
      "      test     = \"NumericLessThanEquals\"",
      "      variable = \"glacier:ArchiveAgeinDays\"",
      "      values   = [\"365\"]",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_glacier_vault_lock\" \"example\" {",
      "  complete_lock = false",
      "  policy        = data.aws_iam_policy_document.example.json",
      "  vault_name    = aws_glacier_vault.example.name",
      "}"
    ]
  },
  "aws-resource-globalaccelerator_accelerator": {
    "description": "Defines globalaccelerator_accelerator",
    "prefix": "tf-aws-resource-globalaccelerator_accelerator",
    "body": [
      "resource \"aws_globalaccelerator_accelerator\" \"example\" {",
      "  name            = \"Example\"",
      "  ip_address_type = \"IPV4\"",
      "  enabled         = true",
      "",
      "  attributes {",
      "    flow_logs_enabled   = true",
      "    flow_logs_s3_bucket = \"example-bucket\"",
      "    flow_logs_s3_prefix = \"flow-logs/\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-globalaccelerator_endpoint_group": {
    "description": "Defines globalaccelerator_endpoint_group",
    "prefix": "tf-aws-resource-globalaccelerator_endpoint_group",
    "body": [
      "resource \"aws_globalaccelerator_endpoint_group\" \"example\" {",
      "  listener_arn = aws_globalaccelerator_listener.example.id",
      "",
      "  endpoint_configuration {",
      "    endpoint_id = aws_lb.example.arn",
      "    weight      = 100",
      "  }",
      "}"
    ]
  },
  "aws-resource-globalaccelerator_listener": {
    "description": "Defines globalaccelerator_listener",
    "prefix": "tf-aws-resource-globalaccelerator_listener",
    "body": [
      "resource \"aws_globalaccelerator_accelerator\" \"example\" {",
      "  name            = \"Example\"",
      "  ip_address_type = \"IPV4\"",
      "  enabled         = true",
      "",
      "  attributes {",
      "    flow_logs_enabled   = true",
      "    flow_logs_s3_bucket = \"example-bucket\"",
      "    flow_logs_s3_prefix = \"flow-logs/\"",
      "  }",
      "}",
      "",
      "resource \"aws_globalaccelerator_listener\" \"example\" {",
      "  accelerator_arn = aws_globalaccelerator_accelerator.example.id",
      "  client_affinity = \"SOURCE_IP\"",
      "  protocol        = \"TCP\"",
      "",
      "  port_range {",
      "    from_port = 80",
      "    to_port   = 80",
      "  }",
      "}"
    ]
  },
  "aws-resource-glue_catalog_database": {
    "description": "Defines glue_catalog_database",
    "prefix": "tf-aws-resource-glue_catalog_database",
    "body": [
      "resource \"aws_glue_catalog_database\" \"aws_glue_catalog_database\" {",
      "  name = \"MyCatalogDatabase\"",
      "}"
    ]
  },
  "aws-resource-glue_catalog_table": {
    "description": "Defines glue_catalog_table",
    "prefix": "tf-aws-resource-glue_catalog_table",
    "body": [
      "resource \"aws_glue_catalog_table\" \"aws_glue_catalog_table\" {",
      "  name          = \"MyCatalogTable\"",
      "  database_name = \"MyCatalogDatabase\"",
      "}"
    ]
  },
  "aws-resource-glue_classifier": {
    "description": "Defines glue_classifier",
    "prefix": "tf-aws-resource-glue_classifier",
    "body": [
      "resource \"aws_glue_classifier\" \"example\" {",
      "  name = \"example\"",
      "",
      "  csv_classifier {",
      "    allow_single_column    = false",
      "    contains_header        = \"PRESENT\"",
      "    delimiter              = \",\"",
      "    disable_value_trimming = false",
      "    header                 = [\"example1\", \"example2\"]",
      "    quote_symbol           = \"'\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-glue_connection": {
    "description": "Defines glue_connection",
    "prefix": "tf-aws-resource-glue_connection",
    "body": [
      "resource \"aws_glue_connection\" \"example\" {",
      "  connection_properties = {",
      "    JDBC_CONNECTION_URL = \"jdbc:mysql://example.com/exampledatabase\"",
      "    PASSWORD            = \"examplepassword\"",
      "    USERNAME            = \"exampleusername\"",
      "  }",
      "",
      "  name = \"example\"",
      "}"
    ]
  },
  "aws-resource-glue_crawler": {
    "description": "Defines glue_crawler",
    "prefix": "tf-aws-resource-glue_crawler",
    "body": [
      "resource \"aws_glue_crawler\" \"example\" {",
      "  database_name = aws_glue_catalog_database.example.name",
      "  name          = \"example\"",
      "  role          = aws_iam_role.example.arn",
      "",
      "  dynamodb_target {",
      "    path = \"table-name\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-glue_data_catalog_encryption_settings": {
    "description": "Defines glue_data_catalog_encryption_settings",
    "prefix": "tf-aws-resource-glue_data_catalog_encryption_settings",
    "body": [
      "resource \"aws_glue_data_catalog_encryption_settings\" \"example\" {",
      "  data_catalog_encryption_settings {",
      "    connection_password_encryption {",
      "      aws_kms_key_id                       = aws_kms_key.test.arn",
      "      return_connection_password_encrypted = true",
      "    }",
      "",
      "    encryption_at_rest {",
      "      catalog_encryption_mode = \"SSE-KMS\"",
      "      sse_aws_kms_key_id      = aws_kms_key.test.arn",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-glue_dev_endpoint": {
    "description": "Defines glue_dev_endpoint",
    "prefix": "tf-aws-resource-glue_dev_endpoint",
    "body": [
      "resource \"aws_glue_dev_endpoint\" \"example\" {",
      "  name     = \"foo\"",
      "  role_arn = aws_iam_role.example.arn",
      "}",
      "",
      "resource \"aws_iam_role\" \"example\" {",
      "  name               = \"AWSGlueServiceRole-foo\"",
      "  assume_role_policy = data.aws_iam_policy_document.example.json",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"example\" {",
      "  statement {",
      "    actions = [\"sts:AssumeRole\"]",
      "",
      "    principals {",
      "      type        = \"Service\"",
      "      identifiers = [\"glue.amazonaws.com\"]",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"example-AWSGlueServiceRole\" {",
      "  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole\"",
      "  role       = aws_iam_role.example.name",
      "}"
    ]
  },
  "aws-resource-glue_job": {
    "description": "Defines glue_job",
    "prefix": "tf-aws-resource-glue_job",
    "body": [
      "resource \"aws_glue_job\" \"example\" {",
      "  name     = \"example\"",
      "  role_arn = aws_iam_role.example.arn",
      "",
      "  command {",
      "    script_location = \"s3://${aws_s3_bucket.example.bucket}/example.py\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-glue_ml_transform": {
    "description": "Defines glue_ml_transform",
    "prefix": "tf-aws-resource-glue_ml_transform",
    "body": [
      "resource \"aws_glue_ml_transform\" \"test\" {",
      "  name     = \"example\"",
      "  role_arn = aws_iam_role.test.arn",
      "",
      "  input_record_tables {",
      "    database_name = aws_glue_catalog_table.test.database_name",
      "    table_name    = aws_glue_catalog_table.test.name",
      "  }",
      "",
      "  parameters {",
      "    transform_type = \"FIND_MATCHES\"",
      "",
      "    find_matches_parameters {",
      "      primary_key_column_name = \"my_column_1\"",
      "    }",
      "  }",
      "",
      "  depends_on = [aws_iam_role_policy_attachment.test]",
      "}",
      "",
      "resource \"aws_glue_catalog_database\" \"test\" {",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_glue_catalog_table\" \"test\" {",
      "  name               = \"example\"",
      "  database_name      = aws_glue_catalog_database.test.name",
      "  owner              = \"my_owner\"",
      "  retention          = 1",
      "  table_type         = \"VIRTUAL_VIEW\"",
      "  view_expanded_text = \"view_expanded_text_1\"",
      "  view_original_text = \"view_original_text_1\"",
      "",
      "  storage_descriptor {",
      "    bucket_columns            = [\"bucket_column_1\"]",
      "    compressed                = false",
      "    input_format              = \"SequenceFileInputFormat\"",
      "    location                  = \"my_location\"",
      "    number_of_buckets         = 1",
      "    output_format             = \"SequenceFileInputFormat\"",
      "    stored_as_sub_directories = false",
      "",
      "    parameters = {",
      "      param1 = \"param1_val\"",
      "    }",
      "",
      "    columns {",
      "      name    = \"my_column_1\"",
      "      type    = \"int\"",
      "      comment = \"my_column1_comment\"",
      "    }",
      "",
      "    columns {",
      "      name    = \"my_column_2\"",
      "      type    = \"string\"",
      "      comment = \"my_column2_comment\"",
      "    }",
      "",
      "    ser_de_info {",
      "      name = \"ser_de_name\"",
      "",
      "      parameters = {",
      "        param1 = \"param_val_1\"",
      "      }",
      "",
      "      serialization_library = \"org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe\"",
      "    }",
      "",
      "    sort_columns {",
      "      column     = \"my_column_1\"",
      "      sort_order = 1",
      "    }",
      "",
      "    skewed_info {",
      "      skewed_column_names = [",
      "        \"my_column_1\",",
      "      ]",
      "",
      "      skewed_column_value_location_maps = {",
      "        my_column_1 = \"my_column_1_val_loc_map\"",
      "      }",
      "",
      "      skewed_column_values = [",
      "        \"skewed_val_1\",",
      "      ]",
      "    }",
      "  }",
      "",
      "  partition_keys {",
      "    name    = \"my_column_1\"",
      "    type    = \"int\"",
      "    comment = \"my_column_1_comment\"",
      "  }",
      "",
      "  partition_keys {",
      "    name    = \"my_column_2\"",
      "    type    = \"string\"",
      "    comment = \"my_column_2_comment\"",
      "  }",
      "",
      "  parameters = {",
      "    param1 = \"param1_val\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-glue_partition": {
    "description": "Defines glue_partition",
    "prefix": "tf-aws-resource-glue_partition",
    "body": [
      "resource \"aws_glue_partition\" \"example\" {",
      "  database_name = \"some-database\"",
      "  table_name    = \"some-table\"",
      "  values        = [\"some-value\"]",
      "}"
    ]
  },
  "aws-resource-glue_registry": {
    "description": "Defines glue_registry",
    "prefix": "tf-aws-resource-glue_registry",
    "body": [
      "resource \"aws_glue_registry\" \"example\" {",
      "  registry_name = \"example\"",
      "}"
    ]
  },
  "aws-resource-glue_resource_policy": {
    "description": "Defines glue_resource_policy",
    "prefix": "tf-aws-resource-glue_resource_policy",
    "body": [
      "data \"aws_caller_identity\" \"current\" {}",
      "",
      "data \"aws_partition\" \"current\" {}",
      "",
      "data \"aws_region\" \"current\" {}",
      "",
      "data \"aws_iam_policy_document\" \"glue-example-policy\" {",
      "  statement {",
      "    actions = [",
      "      \"glue:CreateTable\",",
      "    ]",
      "    resources = [\"arn:${data.aws_partition.current.partition}:glue:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:*\"]",
      "    principals {",
      "      identifiers = [\"*\"]",
      "      type        = \"AWS\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_glue_resource_policy\" \"example\" {",
      "  policy = data.aws_iam_policy_document.glue-example-policy.json",
      "}"
    ]
  },
  "aws-resource-glue_schema": {
    "description": "Defines glue_schema",
    "prefix": "tf-aws-resource-glue_schema",
    "body": [
      "resource \"aws_glue_schema\" \"example\" {",
      "  schema_name       = \"example\"",
      "  registry_arn      = aws_glue_registry.test.arn",
      "  data_format       = \"AVRO\"",
      "  compatibility     = \"NONE\"",
      "  schema_definition = \"{\\\"type\\\": \\\"record\\\", \\\"name\\\": \\\"r1\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"f1\\\", \\\"type\\\": \\\"int\\\"}, {\\\"name\\\": \\\"f2\\\", \\\"type\\\": \\\"string\\\"} ]}\"",
      "}"
    ]
  },
  "aws-resource-glue_security_configuration": {
    "description": "Defines glue_security_configuration",
    "prefix": "tf-aws-resource-glue_security_configuration",
    "body": [
      "resource \"aws_glue_security_configuration\" \"example\" {",
      "  name = \"example\"",
      "",
      "  encryption_configuration {",
      "    cloudwatch_encryption {",
      "      cloudwatch_encryption_mode = \"DISABLED\"",
      "    }",
      "",
      "    job_bookmarks_encryption {",
      "      job_bookmarks_encryption_mode = \"DISABLED\"",
      "    }",
      "",
      "    s3_encryption {",
      "      kms_key_arn        = data.aws_kms_key.example.arn",
      "      s3_encryption_mode = \"SSE-KMS\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-glue_trigger": {
    "description": "Defines glue_trigger",
    "prefix": "tf-aws-resource-glue_trigger",
    "body": [
      "resource \"aws_glue_trigger\" \"example\" {",
      "  name = \"example\"",
      "  type = \"CONDITIONAL\"",
      "",
      "  actions {",
      "    job_name = aws_glue_job.example1.name",
      "  }",
      "",
      "  predicate {",
      "    conditions {",
      "      job_name = aws_glue_job.example2.name",
      "      state    = \"SUCCEEDED\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-glue_user_defined_function": {
    "description": "Defines glue_user_defined_function",
    "prefix": "tf-aws-resource-glue_user_defined_function",
    "body": [
      "resource \"aws_glue_catalog_database\" \"example\" {",
      "  name = \"my_database\"",
      "}",
      "",
      "resource \"aws_glue_user_defined_function\" \"example\" {",
      "  name          = \"my_func\"",
      "  catalog_id    = aws_glue_catalog_database.example.catalog_id",
      "  database_name = aws_glue_catalog_database.example.name",
      "  class_name    = \"class\"",
      "  owner_name    = \"owner\"",
      "  owner_type    = \"GROUP\"",
      "",
      "  resource_uris {",
      "    resource_type = \"ARCHIVE\"",
      "    uri           = \"uri\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-glue_workflow": {
    "description": "Defines glue_workflow",
    "prefix": "tf-aws-resource-glue_workflow",
    "body": [
      "resource \"aws_glue_workflow\" \"example\" {",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_glue_trigger\" \"example-start\" {",
      "  name          = \"trigger-start\"",
      "  type          = \"ON_DEMAND\"",
      "  workflow_name = aws_glue_workflow.example.name",
      "",
      "  actions {",
      "    job_name = \"example-job\"",
      "  }",
      "}",
      "",
      "resource \"aws_glue_trigger\" \"example-inner\" {",
      "  name          = \"trigger-inner\"",
      "  type          = \"CONDITIONAL\"",
      "  workflow_name = aws_glue_workflow.example.name",
      "",
      "  predicate {",
      "    conditions {",
      "      job_name = \"example-job\"",
      "      state    = \"SUCCEEDED\"",
      "    }",
      "  }",
      "",
      "  actions {",
      "    job_name = \"another-example-job\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-guardduty_detector": {
    "description": "Defines guardduty_detector",
    "prefix": "tf-aws-resource-guardduty_detector",
    "body": [
      "resource \"aws_guardduty_detector\" \"MyDetector\" {",
      "  enable = true",
      "}"
    ]
  },
  "aws-resource-guardduty_filter": {
    "description": "Defines guardduty_filter",
    "prefix": "tf-aws-resource-guardduty_filter",
    "body": [
      "resource \"aws_guardduty_filter\" \"MyFilter\" {",
      "  name        = \"MyFilter\"",
      "  action      = \"ARCHIVE\"",
      "  detector_id = aws_guardduty_detector.example.id",
      "  rank        = 1",
      "",
      "  finding_criteria {",
      "    criterion {",
      "      field  = \"region\"",
      "      equals = [\"eu-west-1\"]",
      "    }",
      "",
      "    criterion {",
      "      field      = \"service.additionalInfo.threatListName\"",
      "      not_equals = [\"some-threat\", \"another-threat\"]",
      "    }",
      "",
      "    criterion {",
      "      field        = \"updatedAt\"",
      "      greater_than = \"2020-01-01T00:00:00Z\"",
      "      less_than    = \"2020-02-01T00:00:00Z\"",
      "    }",
      "",
      "    criterion {",
      "      field                 = \"severity\"",
      "      greater_than_or_equal = \"4\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-guardduty_invite_accepter": {
    "description": "Defines guardduty_invite_accepter",
    "prefix": "tf-aws-resource-guardduty_invite_accepter",
    "body": [
      "provider \"aws\" {",
      "  alias = \"primary\"",
      "}",
      "",
      "provider \"aws\" {",
      "  alias = \"member\"",
      "}",
      "",
      "resource \"aws_guardduty_invite_accepter\" \"member\" {",
      "  depends_on = [aws_guardduty_member.member]",
      "  provider   = aws.member",
      "",
      "  detector_id       = aws_guardduty_detector.member.id",
      "  master_account_id = aws_guardduty_detector.primary.account_id",
      "}",
      "",
      "resource \"aws_guardduty_member\" \"member\" {",
      "  provider    = aws.primary",
      "  account_id  = aws_guardduty_detector.member.account_id",
      "  detector_id = aws_guardduty_detector.primary.id",
      "  email       = \"required@example.com\"",
      "  invite      = true",
      "}",
      "",
      "resource \"aws_guardduty_detector\" \"primary\" {",
      "  provider = aws.primary",
      "}",
      "",
      "resource \"aws_guardduty_detector\" \"member\" {",
      "  provider = aws.member",
      "}"
    ]
  },
  "aws-resource-guardduty_ipset": {
    "description": "Defines guardduty_ipset",
    "prefix": "tf-aws-resource-guardduty_ipset",
    "body": [
      "resource \"aws_guardduty_ipset\" \"example\" {",
      "  activate    = true",
      "  detector_id = aws_guardduty_detector.primary.id",
      "  format      = \"TXT\"",
      "  location    = \"https://s3.amazonaws.com/${aws_s3_bucket_object.MyIPSet.bucket}/${aws_s3_bucket_object.MyIPSet.key}\"",
      "  name        = \"MyIPSet\"",
      "}",
      "",
      "resource \"aws_guardduty_detector\" \"primary\" {",
      "  enable = true",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"bucket\" {",
      "  acl = \"private\"",
      "}",
      "",
      "resource \"aws_s3_bucket_object\" \"MyIPSet\" {",
      "  acl     = \"public-read\"",
      "  content = \"10.0.0.0/8\\n\"",
      "  bucket  = aws_s3_bucket.bucket.id",
      "  key     = \"MyIPSet\"",
      "}"
    ]
  },
  "aws-resource-guardduty_member": {
    "description": "Defines guardduty_member",
    "prefix": "tf-aws-resource-guardduty_member",
    "body": [
      "resource \"aws_guardduty_detector\" \"primary\" {",
      "  enable = true",
      "}",
      "",
      "resource \"aws_guardduty_detector\" \"member\" {",
      "  provider = aws.dev",
      "",
      "  enable = true",
      "}",
      "",
      "resource \"aws_guardduty_member\" \"member\" {",
      "  account_id         = aws_guardduty_detector.member.account_id",
      "  detector_id        = aws_guardduty_detector.primary.id",
      "  email              = \"required@example.com\"",
      "  invite             = true",
      "  invitation_message = \"please accept guardduty invitation\"",
      "}"
    ]
  },
  "aws-resource-guardduty_organization_admin_account": {
    "description": "Defines guardduty_organization_admin_account",
    "prefix": "tf-aws-resource-guardduty_organization_admin_account",
    "body": [
      "resource \"aws_organizations_organization\" \"example\" {",
      "  aws_service_access_principals = [\"guardduty.amazonaws.com\"]",
      "  feature_set                   = \"ALL\"",
      "}",
      "",
      "resource \"aws_guardduty_detector\" \"example\" {}",
      "",
      "resource \"aws_guardduty_organization_admin_account\" \"example\" {",
      "  depends_on = [aws_organizations_organization.example]",
      "",
      "  admin_account_id = \"123456789012\"",
      "}"
    ]
  },
  "aws-resource-guardduty_organization_configuration": {
    "description": "Defines guardduty_organization_configuration",
    "prefix": "tf-aws-resource-guardduty_organization_configuration",
    "body": [
      "resource \"aws_guardduty_detector\" \"example\" {",
      "  enable = true",
      "}",
      "",
      "resource \"aws_guardduty_organization_configuration\" \"example\" {",
      "  auto_enable = true",
      "  detector_id = aws_guardduty_detector.example.id",
      "}"
    ]
  },
  "aws-resource-guardduty_publishing_destination": {
    "description": "Defines guardduty_publishing_destination",
    "prefix": "tf-aws-resource-guardduty_publishing_destination",
    "body": [
      "data \"aws_caller_identity\" \"current\" {}",
      "",
      "data \"aws_region\" \"current\" {}",
      "",
      "data \"aws_iam_policy_document\" \"bucket_pol\" {",
      "  statement {",
      "    sid = \"Allow PutObject\"",
      "    actions = [",
      "      \"s3:PutObject\"",
      "    ]",
      "",
      "    resources = [",
      "      \"${aws_s3_bucket.gd_bucket.arn}/*\"",
      "    ]",
      "",
      "    principals {",
      "      type        = \"Service\"",
      "      identifiers = [\"guardduty.amazonaws.com\"]",
      "    }",
      "  }",
      "",
      "  statement {",
      "    sid = \"Allow GetBucketLocation\"",
      "    actions = [",
      "      \"s3:GetBucketLocation\"",
      "    ]",
      "",
      "    resources = [",
      "      aws_s3_bucket.gd_bucket.arn",
      "    ]",
      "",
      "    principals {",
      "      type        = \"Service\"",
      "      identifiers = [\"guardduty.amazonaws.com\"]",
      "    }",
      "  }",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"kms_pol\" {",
      "",
      "  statement {",
      "    sid = \"Allow GuardDuty to encrypt findings\"",
      "    actions = [",
      "      \"kms:GenerateDataKey\"",
      "    ]",
      "",
      "    resources = [",
      "      \"arn:aws:kms:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:key/*\"",
      "    ]",
      "",
      "    principals {",
      "      type        = \"Service\"",
      "      identifiers = [\"guardduty.amazonaws.com\"]",
      "    }",
      "  }",
      "",
      "  statement {",
      "    sid = \"Allow all users to modify/delete key (test only)\"",
      "    actions = [",
      "      \"kms:*\"",
      "    ]",
      "",
      "    resources = [",
      "      \"arn:aws:kms:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:key/*\"",
      "    ]",
      "",
      "    principals {",
      "      type        = \"AWS\"",
      "      identifiers = [\"arn:aws:iam::${data.aws_caller_identity.current.account_id}:root\"]",
      "    }",
      "  }",
      "",
      "}",
      "",
      "resource \"aws_guardduty_detector\" \"test_gd\" {",
      "  enable = true",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"gd_bucket\" {",
      "  bucket        = \"example\"",
      "  acl           = \"private\"",
      "  force_destroy = true",
      "}",
      "",
      "resource \"aws_s3_bucket_policy\" \"gd_bucket_policy\" {",
      "  bucket = aws_s3_bucket.gd_bucket.id",
      "  policy = data.aws_iam_policy_document.bucket_pol.json",
      "}",
      "",
      "resource \"aws_kms_key\" \"gd_key\" {",
      "  description             = \"Temporary key for AccTest of TF\"",
      "  deletion_window_in_days = 7",
      "  policy                  = data.aws_iam_policy_document.kms_pol.json",
      "}",
      "",
      "resource \"aws_guardduty_publishing_destination\" \"test\" {",
      "  detector_id     = aws_guardduty_detector.test_gd.id",
      "  destination_arn = aws_s3_bucket.gd_bucket.arn",
      "  kms_key_arn     = aws_kms_key.gd_key.arn",
      "",
      "  depends_on = [",
      "    aws_s3_bucket_policy.gd_bucket_policy,",
      "  ]",
      "}"
    ]
  },
  "aws-resource-guardduty_threatintelset": {
    "description": "Defines guardduty_threatintelset",
    "prefix": "tf-aws-resource-guardduty_threatintelset",
    "body": [
      "resource \"aws_guardduty_detector\" \"primary\" {",
      "  enable = true",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"bucket\" {",
      "  acl = \"private\"",
      "}",
      "",
      "resource \"aws_s3_bucket_object\" \"MyThreatIntelSet\" {",
      "  acl     = \"public-read\"",
      "  content = \"10.0.0.0/8\\n\"",
      "  bucket  = aws_s3_bucket.bucket.id",
      "  key     = \"MyThreatIntelSet\"",
      "}",
      "",
      "resource \"aws_guardduty_threatintelset\" \"MyThreatIntelSet\" {",
      "  activate    = true",
      "  detector_id = aws_guardduty_detector.primary.id",
      "  format      = \"TXT\"",
      "  location    = \"https://s3.amazonaws.com/${aws_s3_bucket_object.MyThreatIntelSet.bucket}/${aws_s3_bucket_object.MyThreatIntelSet.key}\"",
      "  name        = \"MyThreatIntelSet\"",
      "}"
    ]
  },
  "aws-resource-iam_access_key": {
    "description": "Defines iam_access_key",
    "prefix": "tf-aws-resource-iam_access_key",
    "body": [
      "resource \"aws_iam_access_key\" \"lb\" {",
      "  user    = aws_iam_user.lb.name",
      "  pgp_key = \"keybase:some_person_that_exists\"",
      "}",
      "",
      "resource \"aws_iam_user\" \"lb\" {",
      "  name = \"loadbalancer\"",
      "  path = \"/system/\"",
      "}",
      "",
      "resource \"aws_iam_user_policy\" \"lb_ro\" {",
      "  name = \"test\"",
      "  user = aws_iam_user.lb.name",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"ec2:Describe*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "output \"secret\" {",
      "  value = aws_iam_access_key.lb.encrypted_secret",
      "}"
    ]
  },
  "aws-resource-iam_account_alias": {
    "description": "Defines iam_account_alias",
    "prefix": "tf-aws-resource-iam_account_alias",
    "body": [
      "resource \"aws_iam_account_alias\" \"alias\" {",
      "  account_alias = \"my-account-alias\"",
      "}"
    ]
  },
  "aws-resource-iam_account_password_policy": {
    "description": "Defines iam_account_password_policy",
    "prefix": "tf-aws-resource-iam_account_password_policy",
    "body": [
      "resource \"aws_iam_account_password_policy\" \"strict\" {",
      "  minimum_password_length        = 8",
      "  require_lowercase_characters   = true",
      "  require_numbers                = true",
      "  require_uppercase_characters   = true",
      "  require_symbols                = true",
      "  allow_users_to_change_password = true",
      "}"
    ]
  },
  "aws-resource-iam_group": {
    "description": "Defines iam_group",
    "prefix": "tf-aws-resource-iam_group",
    "body": [
      "resource \"aws_iam_group\" \"developers\" {",
      "  name = \"developers\"",
      "  path = \"/users/\"",
      "}"
    ]
  },
  "aws-resource-iam_group_membership": {
    "description": "Defines iam_group_membership",
    "prefix": "tf-aws-resource-iam_group_membership",
    "body": [
      "resource \"aws_iam_group_membership\" \"team\" {",
      "  name = \"tf-testing-group-membership\"",
      "",
      "  users = [",
      "    aws_iam_user.user_one.name,",
      "    aws_iam_user.user_two.name,",
      "  ]",
      "",
      "  group = aws_iam_group.group.name",
      "}",
      "",
      "resource \"aws_iam_group\" \"group\" {",
      "  name = \"test-group\"",
      "}",
      "",
      "resource \"aws_iam_user\" \"user_one\" {",
      "  name = \"test-user\"",
      "}",
      "",
      "resource \"aws_iam_user\" \"user_two\" {",
      "  name = \"test-user-two\"",
      "}"
    ]
  },
  "aws-resource-iam_group_policy": {
    "description": "Defines iam_group_policy",
    "prefix": "tf-aws-resource-iam_group_policy",
    "body": [
      "resource \"aws_iam_group_policy\" \"my_developer_policy\" {",
      "  name  = \"my_developer_policy\"",
      "  group = aws_iam_group.my_developers.name",
      "",
      "  # Terraform's \"jsonencode\" function converts a",
      "  # Terraform expression result to valid JSON syntax.",
      "  policy = jsonencode({",
      "    Version = \"2012-10-17\"",
      "    Statement = [",
      "      {",
      "        Action = [",
      "          \"ec2:Describe*\",",
      "        ]",
      "        Effect   = \"Allow\"",
      "        Resource = \"*\"",
      "      },",
      "    ]",
      "  })",
      "}",
      "",
      "resource \"aws_iam_group\" \"my_developers\" {",
      "  name = \"developers\"",
      "  path = \"/users/\"",
      "}"
    ]
  },
  "aws-resource-iam_group_policy_attachment": {
    "description": "Defines iam_group_policy_attachment",
    "prefix": "tf-aws-resource-iam_group_policy_attachment",
    "body": [
      "resource \"aws_iam_group\" \"group\" {",
      "  name = \"test-group\"",
      "}",
      "",
      "resource \"aws_iam_policy\" \"policy\" {",
      "  name        = \"test-policy\"",
      "  description = \"A test policy\"",
      "  policy      = \"{ ... policy JSON ... }\"",
      "}",
      "",
      "resource \"aws_iam_group_policy_attachment\" \"test-attach\" {",
      "  group      = aws_iam_group.group.name",
      "  policy_arn = aws_iam_policy.policy.arn",
      "}"
    ]
  },
  "aws-resource-iam_instance_profile": {
    "description": "Defines iam_instance_profile",
    "prefix": "tf-aws-resource-iam_instance_profile",
    "body": [
      "resource \"aws_iam_instance_profile\" \"test_profile\" {",
      "  name = \"test_profile\"",
      "  role = aws_iam_role.role.name",
      "}",
      "",
      "resource \"aws_iam_role\" \"role\" {",
      "  name = \"test_role\"",
      "  path = \"/\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "        {",
      "            \"Action\": \"sts:AssumeRole\",",
      "            \"Principal\": {",
      "               \"Service\": \"ec2.amazonaws.com\"",
      "            },",
      "            \"Effect\": \"Allow\",",
      "            \"Sid\": \"\"",
      "        }",
      "    ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-iam_openid_connect_provider": {
    "description": "Defines iam_openid_connect_provider",
    "prefix": "tf-aws-resource-iam_openid_connect_provider",
    "body": [
      "resource \"aws_iam_openid_connect_provider\" \"default\" {",
      "  url = \"https://accounts.google.com\"",
      "",
      "  client_id_list = [",
      "    \"266362248691-342342xasdasdasda-apps.googleusercontent.com\",",
      "  ]",
      "",
      "  thumbprint_list = []",
      "}"
    ]
  },
  "aws-resource-iam_policy": {
    "description": "Defines iam_policy",
    "prefix": "tf-aws-resource-iam_policy",
    "body": [
      "resource \"aws_iam_policy\" \"policy\" {",
      "  name        = \"test_policy\"",
      "  path        = \"/\"",
      "  description = \"My test policy\"",
      "",
      "  # Terraform's \"jsonencode\" function converts a",
      "  # Terraform expression result to valid JSON syntax.",
      "  policy = jsonencode({",
      "    Version = \"2012-10-17\"",
      "    Statement = [",
      "      {",
      "        Action = [",
      "          \"ec2:Describe*\",",
      "        ]",
      "        Effect   = \"Allow\"",
      "        Resource = \"*\"",
      "      },",
      "    ]",
      "  })",
      "}"
    ]
  },
  "aws-resource-iam_policy_attachment": {
    "description": "Defines iam_policy_attachment",
    "prefix": "tf-aws-resource-iam_policy_attachment",
    "body": [
      "resource \"aws_iam_user\" \"user\" {",
      "  name = \"test-user\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"role\" {",
      "  name = \"test-role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"ec2.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_group\" \"group\" {",
      "  name = \"test-group\"",
      "}",
      "",
      "resource \"aws_iam_policy\" \"policy\" {",
      "  name        = \"test-policy\"",
      "  description = \"A test policy\"",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"ec2:Describe*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_policy_attachment\" \"test-attach\" {",
      "  name       = \"test-attachment\"",
      "  users      = [aws_iam_user.user.name]",
      "  roles      = [aws_iam_role.role.name]",
      "  groups     = [aws_iam_group.group.name]",
      "  policy_arn = aws_iam_policy.policy.arn",
      "}"
    ]
  },
  "aws-resource-iam_role": {
    "description": "Defines iam_role",
    "prefix": "tf-aws-resource-iam_role",
    "body": [
      "resource \"aws_iam_role\" \"test_role\" {",
      "  name = \"test_role\"",
      "",
      "  # Terraform's \"jsonencode\" function converts a",
      "  # Terraform expression result to valid JSON syntax.",
      "  assume_role_policy = jsonencode({",
      "    Version = \"2012-10-17\"",
      "    Statement = [",
      "      {",
      "        Action = \"sts:AssumeRole\"",
      "        Effect = \"Allow\"",
      "        Sid    = \"\"",
      "        Principal = {",
      "          Service = \"ec2.amazonaws.com\"",
      "        }",
      "      },",
      "    ]",
      "  })",
      "",
      "  tags = {",
      "    tag-key = \"tag-value\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-iam_role_policy": {
    "description": "Defines iam_role_policy",
    "prefix": "tf-aws-resource-iam_role_policy",
    "body": [
      "resource \"aws_iam_role_policy\" \"test_policy\" {",
      "  name = \"test_policy\"",
      "  role = aws_iam_role.test_role.id",
      "",
      "  # Terraform's \"jsonencode\" function converts a",
      "  # Terraform expression result to valid JSON syntax.",
      "  policy = jsonencode({",
      "    Version = \"2012-10-17\"",
      "    Statement = [",
      "      {",
      "        Action = [",
      "          \"ec2:Describe*\",",
      "        ]",
      "        Effect   = \"Allow\"",
      "        Resource = \"*\"",
      "      },",
      "    ]",
      "  })",
      "}",
      "",
      "resource \"aws_iam_role\" \"test_role\" {",
      "  name = \"test_role\"",
      "",
      "  assume_role_policy = jsonencode({",
      "    Version = \"2012-10-17\"",
      "    Statement = [",
      "      {",
      "        Action = \"sts:AssumeRole\"",
      "        Effect = \"Allow\"",
      "        Sid    = \"\"",
      "        Principal = {",
      "          Service = \"ec2.amazonaws.com\"",
      "        }",
      "      },",
      "    ]",
      "  })",
      "}"
    ]
  },
  "aws-resource-iam_role_policy_attachment": {
    "description": "Defines iam_role_policy_attachment",
    "prefix": "tf-aws-resource-iam_role_policy_attachment",
    "body": [
      "resource \"aws_iam_role\" \"role\" {",
      "  name = \"test-role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"ec2.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_policy\" \"policy\" {",
      "  name        = \"test-policy\"",
      "  description = \"A test policy\"",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"ec2:Describe*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"test-attach\" {",
      "  role       = aws_iam_role.role.name",
      "  policy_arn = aws_iam_policy.policy.arn",
      "}"
    ]
  },
  "aws-resource-iam_saml_provider": {
    "description": "Defines iam_saml_provider",
    "prefix": "tf-aws-resource-iam_saml_provider",
    "body": [
      "resource \"aws_iam_saml_provider\" \"default\" {",
      "  name                   = \"myprovider\"",
      "  saml_metadata_document = file(\"saml-metadata.xml\")",
      "}"
    ]
  },
  "aws-resource-iam_server_certificate": {
    "description": "Defines iam_server_certificate",
    "prefix": "tf-aws-resource-iam_server_certificate",
    "body": [
      "resource \"aws_iam_server_certificate\" \"test_cert\" {",
      "  name             = \"some_test_cert\"",
      "  certificate_body = file(\"self-ca-cert.pem\")",
      "  private_key      = file(\"test-key.pem\")",
      "}"
    ]
  },
  "aws-resource-iam_service_linked_role": {
    "description": "Defines iam_service_linked_role",
    "prefix": "tf-aws-resource-iam_service_linked_role",
    "body": [
      "resource \"aws_iam_service_linked_role\" \"elasticbeanstalk\" {",
      "  aws_service_name = \"elasticbeanstalk.amazonaws.com\"",
      "}"
    ]
  },
  "aws-resource-iam_user": {
    "description": "Defines iam_user",
    "prefix": "tf-aws-resource-iam_user",
    "body": [
      "resource \"aws_iam_user\" \"lb\" {",
      "  name = \"loadbalancer\"",
      "  path = \"/system/\"",
      "",
      "  tags = {",
      "    tag-key = \"tag-value\"",
      "  }",
      "}",
      "",
      "resource \"aws_iam_access_key\" \"lb\" {",
      "  user = aws_iam_user.lb.name",
      "}",
      "",
      "resource \"aws_iam_user_policy\" \"lb_ro\" {",
      "  name = \"test\"",
      "  user = aws_iam_user.lb.name",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"ec2:Describe*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-iam_user_group_membership": {
    "description": "Defines iam_user_group_membership",
    "prefix": "tf-aws-resource-iam_user_group_membership",
    "body": [
      "resource \"aws_iam_user_group_membership\" \"example1\" {",
      "  user = aws_iam_user.user1.name",
      "",
      "  groups = [",
      "    aws_iam_group.group1.name,",
      "    aws_iam_group.group2.name,",
      "  ]",
      "}",
      "",
      "resource \"aws_iam_user_group_membership\" \"example2\" {",
      "  user = aws_iam_user.user1.name",
      "",
      "  groups = [",
      "    aws_iam_group.group3.name,",
      "  ]",
      "}",
      "",
      "resource \"aws_iam_user\" \"user1\" {",
      "  name = \"user1\"",
      "}",
      "",
      "resource \"aws_iam_group\" \"group1\" {",
      "  name = \"group1\"",
      "}",
      "",
      "resource \"aws_iam_group\" \"group2\" {",
      "  name = \"group2\"",
      "}",
      "",
      "resource \"aws_iam_group\" \"group3\" {",
      "  name = \"group3\"",
      "}"
    ]
  },
  "aws-resource-iam_user_login_profile": {
    "description": "Defines iam_user_login_profile",
    "prefix": "tf-aws-resource-iam_user_login_profile",
    "body": [
      "resource \"aws_iam_user\" \"example\" {",
      "  name          = \"example\"",
      "  path          = \"/\"",
      "  force_destroy = true",
      "}",
      "",
      "resource \"aws_iam_user_login_profile\" \"example\" {",
      "  user    = aws_iam_user.example.name",
      "  pgp_key = \"keybase:some_person_that_exists\"",
      "}",
      "",
      "output \"password\" {",
      "  value = aws_iam_user_login_profile.example.encrypted_password",
      "}"
    ]
  },
  "aws-resource-iam_user_policy": {
    "description": "Defines iam_user_policy",
    "prefix": "tf-aws-resource-iam_user_policy",
    "body": [
      "resource \"aws_iam_user_policy\" \"lb_ro\" {",
      "  name = \"test\"",
      "  user = aws_iam_user.lb.name",
      "",
      "  # Terraform's \"jsonencode\" function converts a",
      "  # Terraform expression result to valid JSON syntax.",
      "  policy = jsonencode({",
      "    Version = \"2012-10-17\"",
      "    Statement = [",
      "      {",
      "        Action = [",
      "          \"ec2:Describe*\",",
      "        ]",
      "        Effect   = \"Allow\"",
      "        Resource = \"*\"",
      "      },",
      "    ]",
      "  })",
      "}",
      "",
      "resource \"aws_iam_user\" \"lb\" {",
      "  name = \"loadbalancer\"",
      "  path = \"/system/\"",
      "}",
      "",
      "resource \"aws_iam_access_key\" \"lb\" {",
      "  user = aws_iam_user.lb.name",
      "}"
    ]
  },
  "aws-resource-iam_user_policy_attachment": {
    "description": "Defines iam_user_policy_attachment",
    "prefix": "tf-aws-resource-iam_user_policy_attachment",
    "body": [
      "resource \"aws_iam_user\" \"user\" {",
      "  name = \"test-user\"",
      "}",
      "",
      "resource \"aws_iam_policy\" \"policy\" {",
      "  name        = \"test-policy\"",
      "  description = \"A test policy\"",
      "  policy      = \"{ ... policy JSON ... }\"",
      "}",
      "",
      "resource \"aws_iam_user_policy_attachment\" \"test-attach\" {",
      "  user       = aws_iam_user.user.name",
      "  policy_arn = aws_iam_policy.policy.arn",
      "}"
    ]
  },
  "aws-resource-iam_user_ssh_key": {
    "description": "Defines iam_user_ssh_key",
    "prefix": "tf-aws-resource-iam_user_ssh_key",
    "body": [
      "resource \"aws_iam_user\" \"user\" {",
      "  name = \"test-user\"",
      "  path = \"/\"",
      "}",
      "",
      "resource \"aws_iam_user_ssh_key\" \"user\" {",
      "  username   = aws_iam_user.user.name",
      "  encoding   = \"SSH\"",
      "  public_key = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD3F6tyPEFEzV0LX3X8BsXdMsQz1x2cEikKDEY0aIj41qgxMCP/iteneqXSIFZBp5vizPvaoIR3Um9xK7PGoW8giupGn+EPuxIA4cDM4vzOqOkiMPhz5XK0whEjkVzTo4+S0puvDZuwIsdiW9mxhJc7tgBNL0cYlWSYVkz4G/fslNfRPW5mYAM49f4fhtxPb5ok4Q2Lg9dPKVHO/Bgeu5woMc7RY0p1ej6D4CKFE6lymSDJpW0YHX/wqE9+cfEauh7xZcG0q9t2ta6F6fmX0agvpFyZo8aFbXeUBr7osSCJNgvavWbM/06niWrOvYX2xwWdhXmXSrbX8ZbabVohBK41 mytest@mydomain.com\"",
      "}"
    ]
  },
  "aws-resource-imagebuilder_component": {
    "description": "Defines imagebuilder_component",
    "prefix": "tf-aws-resource-imagebuilder_component",
    "body": [
      "resource \"aws_imagebuilder_component\" \"example\" {",
      "  data = yamlencode({",
      "    phases = [{",
      "      name = \"build\"",
      "      steps = [{",
      "        action = \"ExecuteBash\"",
      "        inputs = {",
      "          commands = [\"echo 'hello world'\"]",
      "        }",
      "        name      = \"example\"",
      "        onFailure = \"Continue\"",
      "      }]",
      "    }]",
      "    schemaVersion = 1.0",
      "  })",
      "  name     = \"example\"",
      "  platform = \"Linux\"",
      "  version  = \"1.0.0\"",
      "}"
    ]
  },
  "aws-resource-imagebuilder_distribution_configuration": {
    "description": "Defines imagebuilder_distribution_configuration",
    "prefix": "tf-aws-resource-imagebuilder_distribution_configuration",
    "body": [
      "resource \"aws_imagebuilder_distribution_configuration\" \"example\" {",
      "  name = \"example\"",
      "",
      "  distribution {",
      "    ami_distribution_configuration {",
      "      ami_tags = {",
      "        CostCenter = \"IT\"",
      "      }",
      "",
      "      name = \"example-{{ imagebuilder:buildDate }}\"",
      "",
      "      launch_permission {",
      "        user_ids = [\"123456789012\"]",
      "      }",
      "    }",
      "",
      "    region = \"us-east-1\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-imagebuilder_image": {
    "description": "Defines imagebuilder_image",
    "prefix": "tf-aws-resource-imagebuilder_image",
    "body": [
      "resource \"aws_imagebuilder_image\" \"example\" {",
      "  distribution_configuration_arn   = aws_imagebuilder_distribution_configuration.example.arn",
      "  image_recipe_arn                 = aws_imagebuilder_image_recipe.example.arn",
      "  infrastructure_configuration_arn = aws_imagebuilder_infrastructure_configuration.example.arn",
      "}"
    ]
  },
  "aws-resource-imagebuilder_image_pipeline": {
    "description": "Defines imagebuilder_image_pipeline",
    "prefix": "tf-aws-resource-imagebuilder_image_pipeline",
    "body": [
      "resource \"aws_imagebuilder_image_pipeline\" \"example\" {",
      "  image_recipe_arn                 = aws_imagebuilder_image_recipe.example.arn",
      "  infrastructure_configuration_arn = aws_imagebuilder_infrastructure_configuration.example.arn",
      "  name                             = \"example\"",
      "",
      "  schedule {",
      "    schedule_expression = \"cron(0 0 * * ? *)\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-imagebuilder_image_recipe": {
    "description": "Defines imagebuilder_image_recipe",
    "prefix": "tf-aws-resource-imagebuilder_image_recipe",
    "body": [
      "resource \"aws_imagebuilder_image_recipe\" \"example\" {",
      "  block_device_mapping {",
      "    device_name = \"/dev/xvdb\"",
      "",
      "    ebs {",
      "      delete_on_termination = true",
      "      volume_size           = 100",
      "      volume_type           = \"gp2\"",
      "    }",
      "  }",
      "",
      "  component {",
      "    component_arn = aws_imagebuilder_component.example.arn",
      "  }",
      "",
      "  name         = \"example\"",
      "  parent_image = \"arn:${data.aws_partition.current.partition}:imagebuilder:${data.aws_region.current.name}:aws:image/amazon-linux-2-x86/x.x.x\"",
      "  version      = \"1.0.0\"",
      "}"
    ]
  },
  "aws-resource-imagebuilder_infrastructure_configuration": {
    "description": "Defines imagebuilder_infrastructure_configuration",
    "prefix": "tf-aws-resource-imagebuilder_infrastructure_configuration",
    "body": [
      "resource \"aws_imagebuilder_infrastructure_configuration\" \"example\" {",
      "  description                   = \"example description\"",
      "  instance_profile_name         = aws_iam_instance_profile.example.name",
      "  instance_types                = [\"t2.nano\", \"t3.micro\"]",
      "  key_pair                      = aws_key_pair.example.key_name",
      "  name                          = \"example\"",
      "  security_group_ids            = [aws_security_group.example.id]",
      "  sns_topic_arn                 = aws_sns_topic.example.arn",
      "  subnet_id                     = aws_subnet.main.id",
      "  terminate_instance_on_failure = true",
      "",
      "  logging {",
      "    s3_logs {",
      "      s3_bucket_name = aws_s3_bucket.example.bucket",
      "      s3_key_prefix  = \"logs\"",
      "    }",
      "  }",
      "",
      "  tags = {",
      "    foo = \"bar\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-inspector_assessment_target": {
    "description": "Defines inspector_assessment_target",
    "prefix": "tf-aws-resource-inspector_assessment_target",
    "body": [
      "resource \"aws_inspector_resource_group\" \"bar\" {",
      "  tags = {",
      "    Name = \"foo\"",
      "    Env  = \"bar\"",
      "  }",
      "}",
      "",
      "resource \"aws_inspector_assessment_target\" \"foo\" {",
      "  name               = \"assessment target\"",
      "  resource_group_arn = aws_inspector_resource_group.bar.arn",
      "}"
    ]
  },
  "aws-resource-inspector_assessment_template": {
    "description": "Defines inspector_assessment_template",
    "prefix": "tf-aws-resource-inspector_assessment_template",
    "body": [
      "resource \"aws_inspector_assessment_template\" \"example\" {",
      "  name       = \"example\"",
      "  target_arn = aws_inspector_assessment_target.example.arn",
      "  duration   = 3600",
      "",
      "  rules_package_arns = [",
      "    \"arn:aws:inspector:us-west-2:758058086616:rulespackage/0-9hgA516p\",",
      "    \"arn:aws:inspector:us-west-2:758058086616:rulespackage/0-H5hpSawc\",",
      "    \"arn:aws:inspector:us-west-2:758058086616:rulespackage/0-JJOtZiqQ\",",
      "    \"arn:aws:inspector:us-west-2:758058086616:rulespackage/0-vg5GGHSD\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-inspector_resource_group": {
    "description": "Defines inspector_resource_group",
    "prefix": "tf-aws-resource-inspector_resource_group",
    "body": [
      "resource \"aws_inspector_resource_group\" \"example\" {",
      "  tags = {",
      "    Name = \"foo\"",
      "    Env  = \"bar\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-instance": {
    "description": "Defines instance",
    "prefix": "tf-aws-resource-instance",
    "body": [
      "data \"aws_ami\" \"ubuntu\" {",
      "  most_recent = true",
      "",
      "  filter {",
      "    name   = \"name\"",
      "    values = [\"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"virtualization-type\"",
      "    values = [\"hvm\"]",
      "  }",
      "",
      "  owners = [\"099720109477\"] # Canonical",
      "}",
      "",
      "resource \"aws_instance\" \"web\" {",
      "  ami           = data.aws_ami.ubuntu.id",
      "  instance_type = \"t3.micro\"",
      "",
      "  tags = {",
      "    Name = \"HelloWorld\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-internet_gateway": {
    "description": "Defines internet_gateway",
    "prefix": "tf-aws-resource-internet_gateway",
    "body": [
      "resource \"aws_internet_gateway\" \"gw\" {",
      "  vpc_id = aws_vpc.main.id",
      "",
      "  tags = {",
      "    Name = \"main\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-iot_certificate": {
    "description": "Defines iot_certificate",
    "prefix": "tf-aws-resource-iot_certificate",
    "body": [
      "resource \"aws_iot_certificate\" \"cert\" {",
      "  csr    = file(\"/my/csr.pem\")",
      "  active = true",
      "}"
    ]
  },
  "aws-resource-iot_policy": {
    "description": "Defines iot_policy",
    "prefix": "tf-aws-resource-iot_policy",
    "body": [
      "resource \"aws_iot_policy\" \"pubsub\" {",
      "  name = \"PubSubToAnyTopic\"",
      "",
      "  # Terraform's \"jsonencode\" function converts a",
      "  # Terraform expression result to valid JSON syntax.",
      "  policy = jsonencode({",
      "    Version = \"2012-10-17\"",
      "    Statement = [",
      "      {",
      "        Action = [",
      "          \"iot:*\",",
      "        ]",
      "        Effect   = \"Allow\"",
      "        Resource = \"*\"",
      "      },",
      "    ]",
      "  })",
      "}"
    ]
  },
  "aws-resource-iot_policy_attachment": {
    "description": "Defines iot_policy_attachment",
    "prefix": "tf-aws-resource-iot_policy_attachment",
    "body": [
      "resource \"aws_iot_policy\" \"pubsub\" {",
      "  name = \"PubSubToAnyTopic\"",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"iot:*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iot_certificate\" \"cert\" {",
      "  csr    = file(\"csr.pem\")",
      "  active = true",
      "}",
      "",
      "resource \"aws_iot_policy_attachment\" \"att\" {",
      "  policy = aws_iot_policy.pubsub.name",
      "  target = aws_iot_certificate.cert.arn",
      "}"
    ]
  },
  "aws-resource-iot_role_alias": {
    "description": "Defines iot_role_alias",
    "prefix": "tf-aws-resource-iot_role_alias",
    "body": [
      "resource \"aws_iam_role\" \"role\" {",
      "  name = \"dynamodb-access-role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {\"Service\": \"credentials.iot.amazonaws.com\",",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iot_role_alias\" \"alias\" {",
      "  alias    = \"Thermostat-dynamodb-access-role-alias\"",
      "  role_arn = aws_iam_role.role.arn",
      "}"
    ]
  },
  "aws-resource-iot_thing": {
    "description": "Defines iot_thing",
    "prefix": "tf-aws-resource-iot_thing",
    "body": [
      "resource \"aws_iot_thing\" \"example\" {",
      "  name = \"example\"",
      "",
      "  attributes = {",
      "    First = \"examplevalue\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-iot_thing_principal_attachment": {
    "description": "Defines iot_thing_principal_attachment",
    "prefix": "tf-aws-resource-iot_thing_principal_attachment",
    "body": [
      "resource \"aws_iot_thing\" \"example\" {",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_iot_certificate\" \"cert\" {",
      "  csr    = file(\"csr.pem\")",
      "  active = true",
      "}",
      "",
      "resource \"aws_iot_thing_principal_attachment\" \"att\" {",
      "  principal = aws_iot_certificate.cert.arn",
      "  thing     = aws_iot_thing.example.name",
      "}"
    ]
  },
  "aws-resource-iot_thing_type": {
    "description": "Defines iot_thing_type",
    "prefix": "tf-aws-resource-iot_thing_type",
    "body": [
      "resource \"aws_iot_thing_type\" \"foo\" {",
      "  name = \"my_iot_thing\"",
      "}"
    ]
  },
  "aws-resource-iot_topic_rule": {
    "description": "Defines iot_topic_rule",
    "prefix": "tf-aws-resource-iot_topic_rule",
    "body": [
      "resource \"aws_iot_topic_rule\" \"rule\" {",
      "  name        = \"MyRule\"",
      "  description = \"Example rule\"",
      "  enabled     = true",
      "  sql         = \"SELECT * FROM 'topic/test'\"",
      "  sql_version = \"2016-03-23\"",
      "",
      "  sns {",
      "    message_format = \"RAW\"",
      "    role_arn       = aws_iam_role.role.arn",
      "    target_arn     = aws_sns_topic.mytopic.arn",
      "  }",
      "",
      "  error_action {",
      "    sns {",
      "      message_format = \"RAW\"",
      "      role_arn       = aws_iam_role.role.arn",
      "      target_arn     = aws_sns_topic.myerrortopic.arn",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_sns_topic\" \"mytopic\" {",
      "  name = \"mytopic\"",
      "}",
      "",
      "resource \"aws_sns_topic\" \"myerrortopic\" {",
      "  name = \"myerrortopic\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"role\" {",
      "  name = \"myrole\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Service\": \"iot.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"iam_policy_for_lambda\" {",
      "  name = \"mypolicy\"",
      "  role = aws_iam_role.role.id",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "        \"Effect\": \"Allow\",",
      "        \"Action\": [",
      "            \"sns:Publish\"",
      "        ],",
      "        \"Resource\": \"${aws_sns_topic.mytopic.arn}\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-key_pair": {
    "description": "Defines key_pair",
    "prefix": "tf-aws-resource-key_pair",
    "body": [
      "resource \"aws_key_pair\" \"deployer\" {",
      "  key_name   = \"deployer-key\"",
      "  public_key = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD3F6tyPEFEzV0LX3X8BsXdMsQz1x2cEikKDEY0aIj41qgxMCP/iteneqXSIFZBp5vizPvaoIR3Um9xK7PGoW8giupGn+EPuxIA4cDM4vzOqOkiMPhz5XK0whEjkVzTo4+S0puvDZuwIsdiW9mxhJc7tgBNL0cYlWSYVkz4G/fslNfRPW5mYAM49f4fhtxPb5ok4Q2Lg9dPKVHO/Bgeu5woMc7RY0p1ej6D4CKFE6lymSDJpW0YHX/wqE9+cfEauh7xZcG0q9t2ta6F6fmX0agvpFyZo8aFbXeUBr7osSCJNgvavWbM/06niWrOvYX2xwWdhXmXSrbX8ZbabVohBK41 email@example.com\"",
      "}"
    ]
  },
  "aws-resource-kinesis_analytics_application": {
    "description": "Defines kinesis_analytics_application",
    "prefix": "tf-aws-resource-kinesis_analytics_application",
    "body": [
      "resource \"aws_kinesis_stream\" \"test_stream\" {",
      "  name        = \"terraform-kinesis-test\"",
      "  shard_count = 1",
      "}",
      "",
      "resource \"aws_kinesis_analytics_application\" \"test_application\" {",
      "  name = \"kinesis-analytics-application-test\"",
      "",
      "  inputs {",
      "    name_prefix = \"test_prefix\"",
      "",
      "    kinesis_stream {",
      "      resource_arn = aws_kinesis_stream.test_stream.arn",
      "      role_arn     = aws_iam_role.test.arn",
      "    }",
      "",
      "    parallelism {",
      "      count = 1",
      "    }",
      "",
      "    schema {",
      "      record_columns {",
      "        mapping  = \"$.test\"",
      "        name     = \"test\"",
      "        sql_type = \"VARCHAR(8)\"",
      "      }",
      "",
      "      record_encoding = \"UTF-8\"",
      "",
      "      record_format {",
      "        mapping_parameters {",
      "          json {",
      "            record_row_path = \"$\"",
      "          }",
      "        }",
      "      }",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-kinesis_firehose_delivery_stream": {
    "description": "Defines kinesis_firehose_delivery_stream",
    "prefix": "tf-aws-resource-kinesis_firehose_delivery_stream",
    "body": [
      "resource \"aws_kinesis_firehose_delivery_stream\" \"extended_s3_stream\" {",
      "  name        = \"terraform-kinesis-firehose-extended-s3-test-stream\"",
      "  destination = \"extended_s3\"",
      "",
      "  extended_s3_configuration {",
      "    role_arn   = aws_iam_role.firehose_role.arn",
      "    bucket_arn = aws_s3_bucket.bucket.arn",
      "",
      "    processing_configuration {",
      "      enabled = \"true\"",
      "",
      "      processors {",
      "        type = \"Lambda\"",
      "",
      "        parameters {",
      "          parameter_name  = \"LambdaArn\"",
      "          parameter_value = \"${aws_lambda_function.lambda_processor.arn}:$LATEST\"",
      "        }",
      "      }",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"bucket\" {",
      "  bucket = \"tf-test-bucket\"",
      "  acl    = \"private\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"firehose_role\" {",
      "  name = \"firehose_test_role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"firehose.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role\" \"lambda_iam\" {",
      "  name = \"lambda_iam\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"lambda.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_lambda_function\" \"lambda_processor\" {",
      "  filename      = \"lambda.zip\"",
      "  function_name = \"firehose_lambda_processor\"",
      "  role          = aws_iam_role.lambda_iam.arn",
      "  handler       = \"exports.handler\"",
      "  runtime       = \"nodejs12.x\"",
      "}"
    ]
  },
  "aws-resource-kinesis_stream": {
    "description": "Defines kinesis_stream",
    "prefix": "tf-aws-resource-kinesis_stream",
    "body": [
      "resource \"aws_kinesis_stream\" \"test_stream\" {",
      "  name             = \"terraform-kinesis-test\"",
      "  shard_count      = 1",
      "  retention_period = 48",
      "",
      "  shard_level_metrics = [",
      "    \"IncomingBytes\",",
      "    \"OutgoingBytes\",",
      "  ]",
      "",
      "  tags = {",
      "    Environment = \"test\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-kinesis_video_stream": {
    "description": "Defines kinesis_video_stream",
    "prefix": "tf-aws-resource-kinesis_video_stream",
    "body": [
      "resource \"aws_kinesis_video_stream\" \"default\" {",
      "  name                    = \"terraform-kinesis-video-stream\"",
      "  data_retention_in_hours = 1",
      "  device_name             = \"kinesis-video-device-name\"",
      "  media_type              = \"video/h264\"",
      "",
      "  tags = {",
      "    Name = \"terraform-kinesis-video-stream\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-kinesisanalyticsv2_application": {
    "description": "Defines kinesisanalyticsv2_application",
    "prefix": "tf-aws-resource-kinesisanalyticsv2_application",
    "body": [
      "resource \"aws_s3_bucket\" \"example\" {",
      "  bucket = \"example-flink-application\"",
      "}",
      "",
      "resource \"aws_s3_bucket_object\" \"example\" {",
      "  bucket = aws_s3_bucket.example.bucket",
      "  key    = \"example-flink-application\"",
      "  source = \"flink-app.jar\"",
      "}",
      "",
      "resource \"aws_kinesisanalyticsv2_application\" \"example\" {",
      "  name                   = \"example-flink-application\"",
      "  runtime_environment    = \"FLINK-1_8\"",
      "  service_execution_role = aws_iam_role.example.arn",
      "",
      "  application_configuration {",
      "    application_code_configuration {",
      "      code_content {",
      "        s3_content_location {",
      "          bucket_arn = aws_s3_bucket.example.arn",
      "          file_key   = aws_s3_bucket_object.example.key",
      "        }",
      "      }",
      "",
      "      code_content_type = \"ZIPFILE\"",
      "    }",
      "",
      "    environment_properties {",
      "      property_group {",
      "        property_group_id = \"PROPERTY-GROUP-1\"",
      "",
      "        property_map = {",
      "          Key1 = \"Value1\"",
      "        }",
      "      }",
      "",
      "      property_group {",
      "        property_group_id = \"PROPERTY-GROUP-2\"",
      "",
      "        property_map = {",
      "          KeyA = \"ValueA\"",
      "          KeyB = \"ValueB\"",
      "        }",
      "      }",
      "    }",
      "",
      "    flink_application_configuration {",
      "      checkpoint_configuration {",
      "        configuration_type = \"DEFAULT\"",
      "      }",
      "",
      "      monitoring_configuration {",
      "        configuration_type = \"CUSTOM\"",
      "        log_level          = \"DEBUG\"",
      "        metrics_level      = \"TASK\"",
      "      }",
      "",
      "      parallelism_configuration {",
      "        auto_scaling_enabled = true",
      "        configuration_type   = \"CUSTOM\"",
      "        parallelism          = 10",
      "        parallelism_per_kpu  = 4",
      "      }",
      "    }",
      "  }",
      "",
      "  tags = {",
      "    Environment = \"test\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-kms_alias": {
    "description": "Defines kms_alias",
    "prefix": "tf-aws-resource-kms_alias",
    "body": [
      "resource \"aws_kms_key\" \"a\" {}",
      "",
      "resource \"aws_kms_alias\" \"a\" {",
      "  name          = \"alias/my-key-alias\"",
      "  target_key_id = aws_kms_key.a.key_id",
      "}"
    ]
  },
  "aws-resource-kms_ciphertext": {
    "description": "Defines kms_ciphertext",
    "prefix": "tf-aws-resource-kms_ciphertext",
    "body": [
      "resource \"aws_kms_key\" \"oauth_config\" {",
      "  description = \"oauth config\"",
      "  is_enabled  = true",
      "}",
      "",
      "resource \"aws_kms_ciphertext\" \"oauth\" {",
      "  key_id = aws_kms_key.oauth_config.key_id",
      "",
      "  plaintext = <<EOF",
      "{",
      "  \"client_id\": \"e587dbae22222f55da22\",",
      "  \"client_secret\": \"8289575d00000ace55e1815ec13673955721b8a5\"",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-kms_external_key": {
    "description": "Defines kms_external_key",
    "prefix": "tf-aws-resource-kms_external_key",
    "body": [
      "resource \"aws_kms_external_key\" \"example\" {",
      "  description = \"KMS EXTERNAL for AMI encryption\"",
      "}"
    ]
  },
  "aws-resource-kms_grant": {
    "description": "Defines kms_grant",
    "prefix": "tf-aws-resource-kms_grant",
    "body": [
      "resource \"aws_kms_key\" \"a\" {}",
      "",
      "resource \"aws_iam_role\" \"a\" {",
      "  name = \"iam-role-for-grant\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"lambda.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_kms_grant\" \"a\" {",
      "  name              = \"my-grant\"",
      "  key_id            = aws_kms_key.a.key_id",
      "  grantee_principal = aws_iam_role.a.arn",
      "  operations        = [\"Encrypt\", \"Decrypt\", \"GenerateDataKey\"]",
      "",
      "  constraints {",
      "    encryption_context_equals = {",
      "      Department = \"Finance\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-kms_key": {
    "description": "Defines kms_key",
    "prefix": "tf-aws-resource-kms_key",
    "body": [
      "resource \"aws_kms_key\" \"a\" {",
      "  description             = \"KMS key 1\"",
      "  deletion_window_in_days = 10",
      "}"
    ]
  },
  "aws-resource-lakeformation_data_lake_settings": {
    "description": "Defines lakeformation_data_lake_settings",
    "prefix": "tf-aws-resource-lakeformation_data_lake_settings",
    "body": [
      "resource \"aws_lakeformation_data_lake_settings\" \"example\" {",
      "  admins = [aws_iam_user.test.arn, aws_iam_role.test.arn]",
      "}"
    ]
  },
  "aws-resource-lakeformation_permissions": {
    "description": "Defines lakeformation_permissions",
    "prefix": "tf-aws-resource-lakeformation_permissions",
    "body": [
      "resource \"aws_lakeformation_permissions\" \"test\" {",
      "  principal   = aws_iam_role.workflow_role.arn",
      "  permissions = [\"ALL\"]",
      "",
      "  data_location {",
      "    arn = aws_lakeformation_resource.test.arn",
      "  }",
      "}"
    ]
  },
  "aws-resource-lakeformation_resource": {
    "description": "Defines lakeformation_resource",
    "prefix": "tf-aws-resource-lakeformation_resource",
    "body": [
      "data \"aws_s3_bucket\" \"example\" {",
      "  bucket = \"an-example-bucket\"",
      "}",
      "",
      "resource \"aws_lakeformation_resource\" \"example\" {",
      "  arn = data.aws_s3_bucket.example.arn",
      "}"
    ]
  },
  "aws-resource-lambda_alias": {
    "description": "Defines lambda_alias",
    "prefix": "tf-aws-resource-lambda_alias",
    "body": [
      "resource \"aws_lambda_alias\" \"test_lambda_alias\" {",
      "  name             = \"my_alias\"",
      "  description      = \"a sample description\"",
      "  function_name    = aws_lambda_function.lambda_function_test.arn",
      "  function_version = \"1\"",
      "",
      "  routing_config {",
      "    additional_version_weights = {",
      "      \"2\" = 0.5",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-lambda_code_signing_config": {
    "description": "Defines lambda_code_signing_config",
    "prefix": "tf-aws-resource-lambda_code_signing_config",
    "body": [
      "resource \"aws_lambda_code_signing_config\" \"new_csc\" {",
      "  allowed_publishers {",
      "    signing_profile_version_arns = [",
      "      aws_signer_signing_profile.example1.arn,",
      "      aws_signer_signing_profile.example2.arn,",
      "    ]",
      "  }",
      "",
      "  policies {",
      "    untrusted_artifact_on_deployment = \"Warn\"",
      "  }",
      "",
      "  description = \"My awesome code signing config.\"",
      "}"
    ]
  },
  "aws-resource-lambda_event_source_mapping": {
    "description": "Defines lambda_event_source_mapping",
    "prefix": "tf-aws-resource-lambda_event_source_mapping",
    "body": [
      "resource \"aws_lambda_event_source_mapping\" \"example\" {",
      "  event_source_arn  = aws_dynamodb_table.example.stream_arn",
      "  function_name     = aws_lambda_function.example.arn",
      "  starting_position = \"LATEST\"",
      "}"
    ]
  },
  "aws-resource-lambda_function": {
    "description": "Defines lambda_function",
    "prefix": "tf-aws-resource-lambda_function",
    "body": [
      "resource \"aws_iam_role\" \"iam_for_lambda\" {",
      "  name = \"iam_for_lambda\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"lambda.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_lambda_function\" \"test_lambda\" {",
      "  filename      = \"lambda_function_payload.zip\"",
      "  function_name = \"lambda_function_name\"",
      "  role          = aws_iam_role.iam_for_lambda.arn",
      "  handler       = \"exports.test\"",
      "",
      "  # The filebase64sha256() function is available in Terraform 0.11.12 and later",
      "  # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function:",
      "  # source_code_hash = \"${base64sha256(file(\"lambda_function_payload.zip\"))}\"",
      "  source_code_hash = filebase64sha256(\"lambda_function_payload.zip\")",
      "",
      "  runtime = \"nodejs12.x\"",
      "",
      "  environment {",
      "    variables = {",
      "      foo = \"bar\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-lambda_function_event_invoke_config": {
    "description": "Defines lambda_function_event_invoke_config",
    "prefix": "tf-aws-resource-lambda_function_event_invoke_config",
    "body": [
      "resource \"aws_lambda_function_event_invoke_config\" \"example\" {",
      "  function_name = aws_lambda_alias.example.function_name",
      "",
      "  destination_config {",
      "    on_failure {",
      "      destination = aws_sqs_queue.example.arn",
      "    }",
      "",
      "    on_success {",
      "      destination = aws_sns_topic.example.arn",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-lambda_layer_version": {
    "description": "Defines lambda_layer_version",
    "prefix": "tf-aws-resource-lambda_layer_version",
    "body": [
      "resource \"aws_lambda_layer_version\" \"lambda_layer\" {",
      "  filename   = \"lambda_layer_payload.zip\"",
      "  layer_name = \"lambda_layer_name\"",
      "",
      "  compatible_runtimes = [\"nodejs12.x\"]",
      "}"
    ]
  },
  "aws-resource-lambda_permission": {
    "description": "Defines lambda_permission",
    "prefix": "tf-aws-resource-lambda_permission",
    "body": [
      "resource \"aws_lambda_permission\" \"allow_cloudwatch\" {",
      "  statement_id  = \"AllowExecutionFromCloudWatch\"",
      "  action        = \"lambda:InvokeFunction\"",
      "  function_name = aws_lambda_function.test_lambda.function_name",
      "  principal     = \"events.amazonaws.com\"",
      "  source_arn    = \"arn:aws:events:eu-west-1:111122223333:rule/RunDaily\"",
      "  qualifier     = aws_lambda_alias.test_alias.name",
      "}",
      "",
      "resource \"aws_lambda_alias\" \"test_alias\" {",
      "  name             = \"testalias\"",
      "  description      = \"a sample description\"",
      "  function_name    = aws_lambda_function.test_lambda.function_name",
      "  function_version = \"$LATEST\"",
      "}",
      "",
      "resource \"aws_lambda_function\" \"test_lambda\" {",
      "  filename      = \"lambdatest.zip\"",
      "  function_name = \"lambda_function_name\"",
      "  role          = aws_iam_role.iam_for_lambda.arn",
      "  handler       = \"exports.handler\"",
      "  runtime       = \"nodejs12.x\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"iam_for_lambda\" {",
      "  name = \"iam_for_lambda\"",
      "",
      "  # Terraform's \"jsonencode\" function converts a",
      "  # Terraform expression result to valid JSON syntax.",
      "  assume_role_policy = jsonencode({",
      "    Version = \"2012-10-17\"",
      "    Statement = [",
      "      {",
      "        Action = \"sts:AssumeRole\"",
      "        Effect = \"Allow\"",
      "        Sid    = \"\"",
      "        Principal = {",
      "          Service = \"lambda.amazonaws.com\"",
      "        }",
      "      },",
      "    ]",
      "  })",
      "}"
    ]
  },
  "aws-resource-lambda_provisioned_concurrency_config": {
    "description": "Defines lambda_provisioned_concurrency_config",
    "prefix": "tf-aws-resource-lambda_provisioned_concurrency_config",
    "body": [
      "resource \"aws_lambda_provisioned_concurrency_config\" \"example\" {",
      "  function_name                     = aws_lambda_alias.example.function_name",
      "  provisioned_concurrent_executions = 1",
      "  qualifier                         = aws_lambda_alias.example.name",
      "}"
    ]
  },
  "aws-resource-launch_configuration": {
    "description": "Defines launch_configuration",
    "prefix": "tf-aws-resource-launch_configuration",
    "body": [
      "data \"aws_ami\" \"ubuntu\" {",
      "  most_recent = true",
      "",
      "  filter {",
      "    name   = \"name\"",
      "    values = [\"ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"virtualization-type\"",
      "    values = [\"hvm\"]",
      "  }",
      "",
      "  owners = [\"099720109477\"] # Canonical",
      "}",
      "",
      "resource \"aws_launch_configuration\" \"as_conf\" {",
      "  name          = \"web_config\"",
      "  image_id      = data.aws_ami.ubuntu.id",
      "  instance_type = \"t2.micro\"",
      "}"
    ]
  },
  "aws-resource-launch_template": {
    "description": "Defines launch_template",
    "prefix": "tf-aws-resource-launch_template",
    "body": [
      "resource \"aws_launch_template\" \"foo\" {",
      "  name = \"foo\"",
      "",
      "  block_device_mappings {",
      "    device_name = \"/dev/sda1\"",
      "",
      "    ebs {",
      "      volume_size = 20",
      "    }",
      "  }",
      "",
      "  capacity_reservation_specification {",
      "    capacity_reservation_preference = \"open\"",
      "  }",
      "",
      "  cpu_options {",
      "    core_count       = 4",
      "    threads_per_core = 2",
      "  }",
      "",
      "  credit_specification {",
      "    cpu_credits = \"standard\"",
      "  }",
      "",
      "  disable_api_termination = true",
      "",
      "  ebs_optimized = true",
      "",
      "  elastic_gpu_specifications {",
      "    type = \"test\"",
      "  }",
      "",
      "  elastic_inference_accelerator {",
      "    type = \"eia1.medium\"",
      "  }",
      "",
      "  iam_instance_profile {",
      "    name = \"test\"",
      "  }",
      "",
      "  image_id = \"ami-test\"",
      "",
      "  instance_initiated_shutdown_behavior = \"terminate\"",
      "",
      "  instance_market_options {",
      "    market_type = \"spot\"",
      "  }",
      "",
      "  instance_type = \"t2.micro\"",
      "",
      "  kernel_id = \"test\"",
      "",
      "  key_name = \"test\"",
      "",
      "  license_specification {",
      "    license_configuration_arn = \"arn:aws:license-manager:eu-west-1:123456789012:license-configuration:lic-0123456789abcdef0123456789abcdef\"",
      "  }",
      "",
      "  metadata_options {",
      "    http_endpoint               = \"enabled\"",
      "    http_tokens                 = \"required\"",
      "    http_put_response_hop_limit = 1",
      "  }",
      "",
      "  monitoring {",
      "    enabled = true",
      "  }",
      "",
      "  network_interfaces {",
      "    associate_public_ip_address = true",
      "  }",
      "",
      "  placement {",
      "    availability_zone = \"us-west-2a\"",
      "  }",
      "",
      "  ram_disk_id = \"test\"",
      "",
      "  vpc_security_group_ids = [\"sg-12345678\"]",
      "",
      "  tag_specifications {",
      "    resource_type = \"instance\"",
      "",
      "    tags = {",
      "      Name = \"test\"",
      "    }",
      "  }",
      "",
      "  user_data = filebase64(\"${path.module}/example.sh\")",
      "}"
    ]
  },
  "aws-resource-lb": {
    "description": "Defines lb",
    "prefix": "tf-aws-resource-lb",
    "body": [
      "resource \"aws_lb\" \"test\" {",
      "  name               = \"test-lb-tf\"",
      "  internal           = false",
      "  load_balancer_type = \"application\"",
      "  security_groups    = [aws_security_group.lb_sg.id]",
      "  subnets            = aws_subnet.public.*.id",
      "",
      "  enable_deletion_protection = true",
      "",
      "  access_logs {",
      "    bucket  = aws_s3_bucket.lb_logs.bucket",
      "    prefix  = \"test-lb\"",
      "    enabled = true",
      "  }",
      "",
      "  tags = {",
      "    Environment = \"production\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-lb_cookie_stickiness_policy": {
    "description": "Defines lb_cookie_stickiness_policy",
    "prefix": "tf-aws-resource-lb_cookie_stickiness_policy",
    "body": [
      "resource \"aws_elb\" \"lb\" {",
      "  name               = \"test-lb\"",
      "  availability_zones = [\"us-east-1a\"]",
      "",
      "  listener {",
      "    instance_port     = 8000",
      "    instance_protocol = \"http\"",
      "    lb_port           = 80",
      "    lb_protocol       = \"http\"",
      "  }",
      "}",
      "",
      "resource \"aws_lb_cookie_stickiness_policy\" \"foo\" {",
      "  name                     = \"foo-policy\"",
      "  load_balancer            = aws_elb.lb.id",
      "  lb_port                  = 80",
      "  cookie_expiration_period = 600",
      "}"
    ]
  },
  "aws-resource-lb_listener": {
    "description": "Defines lb_listener",
    "prefix": "tf-aws-resource-lb_listener",
    "body": [
      "resource \"aws_lb\" \"front_end\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_lb_target_group\" \"front_end\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_lb_listener\" \"front_end\" {",
      "  load_balancer_arn = aws_lb.front_end.arn",
      "  port              = \"443\"",
      "  protocol          = \"HTTPS\"",
      "  ssl_policy        = \"ELBSecurityPolicy-2016-08\"",
      "  certificate_arn   = \"arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4\"",
      "",
      "  default_action {",
      "    type             = \"forward\"",
      "    target_group_arn = aws_lb_target_group.front_end.arn",
      "  }",
      "}"
    ]
  },
  "aws-resource-lb_listener_certificate": {
    "description": "Defines lb_listener_certificate",
    "prefix": "tf-aws-resource-lb_listener_certificate",
    "body": [
      "resource \"aws_acm_certificate\" \"example\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_lb\" \"front_end\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_lb_listener\" \"front_end\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_lb_listener_certificate\" \"example\" {",
      "  listener_arn    = aws_lb_listener.front_end.arn",
      "  certificate_arn = aws_acm_certificate.example.arn",
      "}"
    ]
  },
  "aws-resource-lb_listener_rule": {
    "description": "Defines lb_listener_rule",
    "prefix": "tf-aws-resource-lb_listener_rule",
    "body": [
      "resource \"aws_lb\" \"front_end\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_lb_listener\" \"front_end\" {",
      "  # Other parameters",
      "}",
      "",
      "resource \"aws_lb_listener_rule\" \"static\" {",
      "  listener_arn = aws_lb_listener.front_end.arn",
      "  priority     = 100",
      "",
      "  action {",
      "    type             = \"forward\"",
      "    target_group_arn = aws_lb_target_group.static.arn",
      "  }",
      "",
      "  condition {",
      "    path_pattern {",
      "      values = [\"/static/*\"]",
      "    }",
      "  }",
      "",
      "  condition {",
      "    host_header {",
      "      values = [\"example.com\"]",
      "    }",
      "  }",
      "}",
      "",
      "# Forward action",
      "",
      "resource \"aws_lb_listener_rule\" \"host_based_weighted_routing\" {",
      "  listener_arn = aws_lb_listener.front_end.arn",
      "  priority     = 99",
      "",
      "  action {",
      "    type             = \"forward\"",
      "    target_group_arn = aws_lb_target_group.static.arn",
      "  }",
      "",
      "  condition {",
      "    host_header {",
      "      values = [\"my-service.*.terraform.io\"]",
      "    }",
      "  }",
      "}",
      "",
      "# Weighted Forward action",
      "",
      "resource \"aws_lb_listener_rule\" \"host_based_routing\" {",
      "  listener_arn = aws_lb_listener.front_end.arn",
      "  priority     = 99",
      "",
      "  action {",
      "    type = \"forward\"",
      "    forward {",
      "      target_group {",
      "        arn    = aws_lb_target_group.main.arn",
      "        weight = 80",
      "      }",
      "",
      "      target_group {",
      "        arn    = aws_lb_target_group.canary.arn",
      "        weight = 20",
      "      }",
      "",
      "      stickiness {",
      "        enabled  = true",
      "        duration = 600",
      "      }",
      "    }",
      "  }",
      "",
      "  condition {",
      "    host_header {",
      "      values = [\"my-service.*.terraform.io\"]",
      "    }",
      "  }",
      "}",
      "",
      "# Redirect action",
      "",
      "resource \"aws_lb_listener_rule\" \"redirect_http_to_https\" {",
      "  listener_arn = aws_lb_listener.front_end.arn",
      "",
      "  action {",
      "    type = \"redirect\"",
      "",
      "    redirect {",
      "      port        = \"443\"",
      "      protocol    = \"HTTPS\"",
      "      status_code = \"HTTP_301\"",
      "    }",
      "  }",
      "",
      "  condition {",
      "    http_header {",
      "      http_header_name = \"X-Forwarded-For\"",
      "      values           = [\"192.168.1.*\"]",
      "    }",
      "  }",
      "}",
      "",
      "# Fixed-response action",
      "",
      "resource \"aws_lb_listener_rule\" \"health_check\" {",
      "  listener_arn = aws_lb_listener.front_end.arn",
      "",
      "  action {",
      "    type = \"fixed-response\"",
      "",
      "    fixed_response {",
      "      content_type = \"text/plain\"",
      "      message_body = \"HEALTHY\"",
      "      status_code  = \"200\"",
      "    }",
      "  }",
      "",
      "  condition {",
      "    query_string {",
      "      key   = \"health\"",
      "      value = \"check\"",
      "    }",
      "",
      "    query_string {",
      "      value = \"bar\"",
      "    }",
      "  }",
      "}",
      "",
      "# Authenticate-cognito Action",
      "",
      "resource \"aws_cognito_user_pool\" \"pool\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_cognito_user_pool_client\" \"client\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_cognito_user_pool_domain\" \"domain\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_lb_listener_rule\" \"admin\" {",
      "  listener_arn = aws_lb_listener.front_end.arn",
      "",
      "  action {",
      "    type = \"authenticate-cognito\"",
      "",
      "    authenticate_cognito {",
      "      user_pool_arn       = aws_cognito_user_pool.pool.arn",
      "      user_pool_client_id = aws_cognito_user_pool_client.client.id",
      "      user_pool_domain    = aws_cognito_user_pool_domain.domain.domain",
      "    }",
      "  }",
      "",
      "  action {",
      "    type             = \"forward\"",
      "    target_group_arn = aws_lb_target_group.static.arn",
      "  }",
      "}",
      "",
      "# Authenticate-oidc Action",
      "",
      "resource \"aws_lb_listener_rule\" \"oidc\" {",
      "  listener_arn = aws_lb_listener.front_end.arn",
      "",
      "  action {",
      "    type = \"authenticate-oidc\"",
      "",
      "    authenticate_oidc {",
      "      authorization_endpoint = \"https://example.com/authorization_endpoint\"",
      "      client_id              = \"client_id\"",
      "      client_secret          = \"client_secret\"",
      "      issuer                 = \"https://example.com\"",
      "      token_endpoint         = \"https://example.com/token_endpoint\"",
      "      user_info_endpoint     = \"https://example.com/user_info_endpoint\"",
      "    }",
      "  }",
      "",
      "  action {",
      "    type             = \"forward\"",
      "    target_group_arn = aws_lb_target_group.static.arn",
      "  }",
      "}"
    ]
  },
  "aws-resource-lb_ssl_negotiation_policy": {
    "description": "Defines lb_ssl_negotiation_policy",
    "prefix": "tf-aws-resource-lb_ssl_negotiation_policy",
    "body": [
      "resource \"aws_elb\" \"lb\" {",
      "  name               = \"test-lb\"",
      "  availability_zones = [\"us-east-1a\"]",
      "",
      "  listener {",
      "    instance_port      = 8000",
      "    instance_protocol  = \"https\"",
      "    lb_port            = 443",
      "    lb_protocol        = \"https\"",
      "    ssl_certificate_id = \"arn:aws:iam::123456789012:server-certificate/certName\"",
      "  }",
      "}",
      "",
      "resource \"aws_lb_ssl_negotiation_policy\" \"foo\" {",
      "  name          = \"foo-policy\"",
      "  load_balancer = aws_elb.lb.id",
      "  lb_port       = 443",
      "",
      "  attribute {",
      "    name  = \"Protocol-TLSv1\"",
      "    value = \"false\"",
      "  }",
      "",
      "  attribute {",
      "    name  = \"Protocol-TLSv1.1\"",
      "    value = \"false\"",
      "  }",
      "",
      "  attribute {",
      "    name  = \"Protocol-TLSv1.2\"",
      "    value = \"true\"",
      "  }",
      "",
      "  attribute {",
      "    name  = \"Server-Defined-Cipher-Order\"",
      "    value = \"true\"",
      "  }",
      "",
      "  attribute {",
      "    name  = \"ECDHE-RSA-AES128-GCM-SHA256\"",
      "    value = \"true\"",
      "  }",
      "",
      "  attribute {",
      "    name  = \"AES128-GCM-SHA256\"",
      "    value = \"true\"",
      "  }",
      "",
      "  attribute {",
      "    name  = \"EDH-RSA-DES-CBC3-SHA\"",
      "    value = \"false\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-lb_target_group": {
    "description": "Defines lb_target_group",
    "prefix": "tf-aws-resource-lb_target_group",
    "body": [
      "resource \"aws_lb_target_group\" \"test\" {",
      "  name     = \"tf-example-lb-tg\"",
      "  port     = 80",
      "  protocol = \"HTTP\"",
      "  vpc_id   = aws_vpc.main.id",
      "}",
      "",
      "resource \"aws_vpc\" \"main\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}"
    ]
  },
  "aws-resource-lb_target_group_attachment": {
    "description": "Defines lb_target_group_attachment",
    "prefix": "tf-aws-resource-lb_target_group_attachment",
    "body": [
      "resource \"aws_lb_target_group_attachment\" \"test\" {",
      "  target_group_arn = aws_lb_target_group.test.arn",
      "  target_id        = aws_instance.test.id",
      "  port             = 80",
      "}",
      "",
      "resource \"aws_lb_target_group\" \"test\" {",
      "  # ... other configuration ...",
      "}",
      "",
      "resource \"aws_instance\" \"test\" {",
      "  # ... other configuration ...",
      "}"
    ]
  },
  "aws-resource-lex_bot": {
    "description": "Defines lex_bot",
    "prefix": "tf-aws-resource-lex_bot",
    "body": [
      "resource \"aws_lex_bot\" \"order_flowers_bot\" {",
      "  abort_statement {",
      "    message {",
      "      content      = \"Sorry, I am not able to assist at this time\"",
      "      content_type = \"PlainText\"",
      "    }",
      "  }",
      "",
      "  child_directed = false",
      "",
      "  clarification_prompt {",
      "    max_attempts = 2",
      "",
      "    message {",
      "      content      = \"I didn't understand you, what would you like to do?\"",
      "      content_type = \"PlainText\"",
      "    }",
      "  }",
      "",
      "  create_version              = false",
      "  description                 = \"Bot to order flowers on the behalf of a user\"",
      "  idle_session_ttl_in_seconds = 600",
      "",
      "  intent {",
      "    intent_name    = \"OrderFlowers\"",
      "    intent_version = \"1\"",
      "  }",
      "",
      "  locale           = \"en-US\"",
      "  name             = \"OrderFlowers\"",
      "  process_behavior = \"BUILD\"",
      "  voice_id         = \"Salli\"",
      "}"
    ]
  },
  "aws-resource-lex_bot_alias": {
    "description": "Defines lex_bot_alias",
    "prefix": "tf-aws-resource-lex_bot_alias",
    "body": [
      "resource \"aws_lex_bot_alias\" \"order_flowers_prod\" {",
      "  bot_name    = \"OrderFlowers\"",
      "  bot_version = \"1\"",
      "  description = \"Production Version of the OrderFlowers Bot.\"",
      "  name        = \"OrderFlowersProd\"",
      "}"
    ]
  },
  "aws-resource-lex_intent": {
    "description": "Defines lex_intent",
    "prefix": "tf-aws-resource-lex_intent",
    "body": [
      "resource \"aws_lex_intent\" \"order_flowers_intent\" {",
      "  confirmation_prompt {",
      "    max_attempts = 2",
      "",
      "    message {",
      "      content      = \"Okay, your {FlowerType} will be ready for pickup by {PickupTime} on {PickupDate}.  Does this sound okay?\"",
      "      content_type = \"PlainText\"",
      "    }",
      "  }",
      "",
      "  create_version = false",
      "  description    = \"Intent to order a bouquet of flowers for pick up\"",
      "",
      "  fulfillment_activity {",
      "    type = \"ReturnIntent\"",
      "  }",
      "",
      "  rejection_statement {",
      "    message {",
      "      content      = \"Okay, I will not place your order.\"",
      "      content_type = \"PlainText\"",
      "    }",
      "  }",
      "",
      "  sample_utterances = [",
      "    \"I would like to order some flowers\",",
      "    \"I would like to pick up flowers\",",
      "  ]",
      "",
      "  slot {",
      "    description = \"The type of flowers to pick up\"",
      "    name        = \"FlowerType\"",
      "    priority    = 1",
      "",
      "    sample_utterances = [",
      "      \"I would like to order {FlowerType}\",",
      "    ]",
      "",
      "    slot_constraint   = \"Required\"",
      "    slot_type         = \"FlowerTypes\"",
      "    slot_type_version = \"$$LATEST\"",
      "",
      "    value_elicitation_prompt {",
      "      max_attempts = 2",
      "",
      "      message {",
      "        content      = \"What type of flowers would you like to order?\"",
      "        content_type = \"PlainText\"",
      "      }",
      "    }",
      "  }",
      "",
      "  slot {",
      "    description = \"The date to pick up the flowers\"",
      "    name        = \"PickupDate\"",
      "    priority    = 2",
      "",
      "    sample_utterances = [",
      "      \"I would like to order {FlowerType}\",",
      "    ]",
      "",
      "    slot_constraint   = \"Required\"",
      "    slot_type         = \"AMAZON.DATE\"",
      "    slot_type_version = \"$$LATEST\"",
      "",
      "    value_elicitation_prompt {",
      "      max_attempts = 2",
      "",
      "      message {",
      "        content      = \"What day do you want the {FlowerType} to be picked up?\"",
      "        content_type = \"PlainText\"",
      "      }",
      "    }",
      "  }",
      "",
      "  slot {",
      "    description = \"The time to pick up the flowers\"",
      "    name        = \"PickupTime\"",
      "    priority    = 3",
      "",
      "    sample_utterances = [",
      "      \"I would like to order {FlowerType}\",",
      "    ]",
      "",
      "    slot_constraint   = \"Required\"",
      "    slot_type         = \"AMAZON.TIME\"",
      "    slot_type_version = \"$$LATEST\"",
      "",
      "    value_elicitation_prompt {",
      "      max_attempts = 2",
      "",
      "      message {",
      "        content      = \"Pick up the {FlowerType} at what time on {PickupDate}?\"",
      "        content_type = \"PlainText\"",
      "      }",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-lex_slot_type": {
    "description": "Defines lex_slot_type",
    "prefix": "tf-aws-resource-lex_slot_type",
    "body": [
      "resource \"aws_lex_slot_type\" \"flower_types\" {",
      "  create_version = true",
      "  description    = \"Types of flowers to order\"",
      "",
      "  enumeration_value {",
      "    synonyms = [",
      "      \"Lirium\",",
      "      \"Martagon\",",
      "    ]",
      "",
      "    value = \"lilies\"",
      "  }",
      "",
      "  enumeration_value {",
      "    synonyms = [",
      "      \"Eduardoregelia\",",
      "      \"Podonix\",",
      "    ]",
      "",
      "    value = \"tulips\"",
      "  }",
      "",
      "  name                     = \"FlowerTypes\"",
      "  value_selection_strategy = \"ORIGINAL_VALUE\"",
      "}"
    ]
  },
  "aws-resource-licensemanager_association": {
    "description": "Defines licensemanager_association",
    "prefix": "tf-aws-resource-licensemanager_association",
    "body": [
      "data \"aws_ami\" \"example\" {",
      "  most_recent = true",
      "  owners      = [\"amazon\"]",
      "",
      "  filter {",
      "    name   = \"name\"",
      "    values = [\"amzn-ami-vpc-nat*\"]",
      "  }",
      "}",
      "",
      "resource \"aws_instance\" \"example\" {",
      "  ami           = data.aws_ami.example.id",
      "  instance_type = \"t2.micro\"",
      "}",
      "",
      "resource \"aws_licensemanager_license_configuration\" \"example\" {",
      "  name                  = \"Example\"",
      "  license_counting_type = \"Instance\"",
      "}",
      "",
      "resource \"aws_licensemanager_association\" \"example\" {",
      "  license_configuration_arn = aws_licensemanager_license_configuration.example.arn",
      "  resource_arn              = aws_instance.example.arn",
      "}"
    ]
  },
  "aws-resource-licensemanager_license_configuration": {
    "description": "Defines licensemanager_license_configuration",
    "prefix": "tf-aws-resource-licensemanager_license_configuration",
    "body": [
      "resource \"aws_licensemanager_license_configuration\" \"example\" {",
      "  name                     = \"Example\"",
      "  description              = \"Example\"",
      "  license_count            = 10",
      "  license_count_hard_limit = true",
      "  license_counting_type    = \"Socket\"",
      "",
      "  license_rules = [",
      "    \"#minimumSockets=2\",",
      "  ]",
      "",
      "  tags = {",
      "    foo = \"barr\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-lightsail_domain": {
    "description": "Defines lightsail_domain",
    "prefix": "tf-aws-resource-lightsail_domain",
    "body": [
      "resource \"aws_lightsail_domain\" \"domain_test\" {",
      "  domain_name = \"mydomain.com\"",
      "}"
    ]
  },
  "aws-resource-lightsail_instance": {
    "description": "Defines lightsail_instance",
    "prefix": "tf-aws-resource-lightsail_instance",
    "body": [
      "# Create a new GitLab Lightsail Instance",
      "resource \"aws_lightsail_instance\" \"gitlab_test\" {",
      "  name              = \"custom_gitlab\"",
      "  availability_zone = \"us-east-1b\"",
      "  blueprint_id      = \"string\"",
      "  bundle_id         = \"string\"",
      "  key_pair_name     = \"some_key_name\"",
      "  tags = {",
      "    foo = \"bar\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-lightsail_key_pair": {
    "description": "Defines lightsail_key_pair",
    "prefix": "tf-aws-resource-lightsail_key_pair",
    "body": [
      "# Create a new Lightsail Key Pair",
      "resource \"aws_lightsail_key_pair\" \"lg_key_pair\" {",
      "  name = \"lg_key_pair\"",
      "}"
    ]
  },
  "aws-resource-lightsail_static_ip": {
    "description": "Defines lightsail_static_ip",
    "prefix": "tf-aws-resource-lightsail_static_ip",
    "body": [
      "resource \"aws_lightsail_static_ip\" \"test\" {",
      "  name = \"example\"",
      "}"
    ]
  },
  "aws-resource-lightsail_static_ip_attachment": {
    "description": "Defines lightsail_static_ip_attachment",
    "prefix": "tf-aws-resource-lightsail_static_ip_attachment",
    "body": [
      "resource \"aws_lightsail_static_ip_attachment\" \"test\" {",
      "  static_ip_name = aws_lightsail_static_ip.test.id",
      "  instance_name  = aws_lightsail_instance.test.id",
      "}",
      "",
      "resource \"aws_lightsail_static_ip\" \"test\" {",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_lightsail_instance\" \"test\" {",
      "  name              = \"example\"",
      "  availability_zone = \"us-east-1b\"",
      "  blueprint_id      = \"string\"",
      "  bundle_id         = \"string\"",
      "  key_pair_name     = \"some_key_name\"",
      "}"
    ]
  },
  "aws-resource-load_balancer_backend_server_policy": {
    "description": "Defines load_balancer_backend_server_policy",
    "prefix": "tf-aws-resource-load_balancer_backend_server_policy",
    "body": [
      "resource \"aws_elb\" \"wu-tang\" {",
      "  name               = \"wu-tang\"",
      "  availability_zones = [\"us-east-1a\"]",
      "",
      "  listener {",
      "    instance_port      = 443",
      "    instance_protocol  = \"http\"",
      "    lb_port            = 443",
      "    lb_protocol        = \"https\"",
      "    ssl_certificate_id = \"arn:aws:iam::000000000000:server-certificate/wu-tang.net\"",
      "  }",
      "",
      "  tags = {",
      "    Name = \"wu-tang\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_policy\" \"wu-tang-ca-pubkey-policy\" {",
      "  load_balancer_name = aws_elb.wu-tang.name",
      "  policy_name        = \"wu-tang-ca-pubkey-policy\"",
      "  policy_type_name   = \"PublicKeyPolicyType\"",
      "",
      "  policy_attribute {",
      "    name  = \"PublicKey\"",
      "    value = file(\"wu-tang-pubkey\")",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_policy\" \"wu-tang-root-ca-backend-auth-policy\" {",
      "  load_balancer_name = aws_elb.wu-tang.name",
      "  policy_name        = \"wu-tang-root-ca-backend-auth-policy\"",
      "  policy_type_name   = \"BackendServerAuthenticationPolicyType\"",
      "",
      "  policy_attribute {",
      "    name  = \"PublicKeyPolicyName\"",
      "    value = aws_load_balancer_policy.wu-tang-root-ca-pubkey-policy.policy_name",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_backend_server_policy\" \"wu-tang-backend-auth-policies-443\" {",
      "  load_balancer_name = aws_elb.wu-tang.name",
      "  instance_port      = 443",
      "",
      "  policy_names = [",
      "    aws_load_balancer_policy.wu-tang-root-ca-backend-auth-policy.policy_name,",
      "  ]",
      "}"
    ]
  },
  "aws-resource-load_balancer_listener_policy": {
    "description": "Defines load_balancer_listener_policy",
    "prefix": "tf-aws-resource-load_balancer_listener_policy",
    "body": [
      "resource \"aws_elb\" \"wu-tang\" {",
      "  name               = \"wu-tang\"",
      "  availability_zones = [\"us-east-1a\"]",
      "",
      "  listener {",
      "    instance_port      = 443",
      "    instance_protocol  = \"http\"",
      "    lb_port            = 443",
      "    lb_protocol        = \"https\"",
      "    ssl_certificate_id = \"arn:aws:iam::000000000000:server-certificate/wu-tang.net\"",
      "  }",
      "",
      "  tags = {",
      "    Name = \"wu-tang\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_policy\" \"wu-tang-ssl\" {",
      "  load_balancer_name = aws_elb.wu-tang.name",
      "  policy_name        = \"wu-tang-ssl\"",
      "  policy_type_name   = \"SSLNegotiationPolicyType\"",
      "",
      "  policy_attribute {",
      "    name  = \"ECDHE-ECDSA-AES128-GCM-SHA256\"",
      "    value = \"true\"",
      "  }",
      "",
      "  policy_attribute {",
      "    name  = \"Protocol-TLSv1.2\"",
      "    value = \"true\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_listener_policy\" \"wu-tang-listener-policies-443\" {",
      "  load_balancer_name = aws_elb.wu-tang.name",
      "  load_balancer_port = 443",
      "",
      "  policy_names = [",
      "    aws_load_balancer_policy.wu-tang-ssl.policy_name,",
      "  ]",
      "}"
    ]
  },
  "aws-resource-load_balancer_policy": {
    "description": "Defines load_balancer_policy",
    "prefix": "tf-aws-resource-load_balancer_policy",
    "body": [
      "resource \"aws_elb\" \"wu-tang\" {",
      "  name               = \"wu-tang\"",
      "  availability_zones = [\"us-east-1a\"]",
      "",
      "  listener {",
      "    instance_port      = 443",
      "    instance_protocol  = \"http\"",
      "    lb_port            = 443",
      "    lb_protocol        = \"https\"",
      "    ssl_certificate_id = \"arn:aws:iam::000000000000:server-certificate/wu-tang.net\"",
      "  }",
      "",
      "  tags = {",
      "    Name = \"wu-tang\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_policy\" \"wu-tang-ca-pubkey-policy\" {",
      "  load_balancer_name = aws_elb.wu-tang.name",
      "  policy_name        = \"wu-tang-ca-pubkey-policy\"",
      "  policy_type_name   = \"PublicKeyPolicyType\"",
      "",
      "  policy_attribute {",
      "    name  = \"PublicKey\"",
      "    value = file(\"wu-tang-pubkey\")",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_policy\" \"wu-tang-root-ca-backend-auth-policy\" {",
      "  load_balancer_name = aws_elb.wu-tang.name",
      "  policy_name        = \"wu-tang-root-ca-backend-auth-policy\"",
      "  policy_type_name   = \"BackendServerAuthenticationPolicyType\"",
      "",
      "  policy_attribute {",
      "    name  = \"PublicKeyPolicyName\"",
      "    value = aws_load_balancer_policy.wu-tang-root-ca-pubkey-policy.policy_name",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_policy\" \"wu-tang-ssl\" {",
      "  load_balancer_name = aws_elb.wu-tang.name",
      "  policy_name        = \"wu-tang-ssl\"",
      "  policy_type_name   = \"SSLNegotiationPolicyType\"",
      "",
      "  policy_attribute {",
      "    name  = \"ECDHE-ECDSA-AES128-GCM-SHA256\"",
      "    value = \"true\"",
      "  }",
      "",
      "  policy_attribute {",
      "    name  = \"Protocol-TLSv1.2\"",
      "    value = \"true\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_policy\" \"wu-tang-ssl-tls-1-1\" {",
      "  load_balancer_name = aws_elb.wu-tang.name",
      "  policy_name        = \"wu-tang-ssl\"",
      "  policy_type_name   = \"SSLNegotiationPolicyType\"",
      "",
      "  policy_attribute {",
      "    name  = \"Reference-Security-Policy\"",
      "    value = \"ELBSecurityPolicy-TLS-1-1-2017-01\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_backend_server_policy\" \"wu-tang-backend-auth-policies-443\" {",
      "  load_balancer_name = aws_elb.wu-tang.name",
      "  instance_port      = 443",
      "",
      "  policy_names = [",
      "    aws_load_balancer_policy.wu-tang-root-ca-backend-auth-policy.policy_name,",
      "  ]",
      "}",
      "",
      "resource \"aws_load_balancer_listener_policy\" \"wu-tang-listener-policies-443\" {",
      "  load_balancer_name = aws_elb.wu-tang.name",
      "  load_balancer_port = 443",
      "",
      "  policy_names = [",
      "    aws_load_balancer_policy.wu-tang-ssl.policy_name,",
      "  ]",
      "}"
    ]
  },
  "aws-resource-macie_member_account_association": {
    "description": "Defines macie_member_account_association",
    "prefix": "tf-aws-resource-macie_member_account_association",
    "body": [
      "resource \"aws_macie_member_account_association\" \"example\" {",
      "  member_account_id = \"123456789012\"",
      "}"
    ]
  },
  "aws-resource-macie_s3_bucket_association": {
    "description": "Defines macie_s3_bucket_association",
    "prefix": "tf-aws-resource-macie_s3_bucket_association",
    "body": [
      "resource \"aws_macie_s3_bucket_association\" \"example\" {",
      "  bucket_name = \"tf-macie-example\"",
      "  prefix      = \"data\"",
      "",
      "  classification_type {",
      "    one_time = \"FULL\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-main_route_table_association": {
    "description": "Defines main_route_table_association",
    "prefix": "tf-aws-resource-main_route_table_association",
    "body": [
      "resource \"aws_main_route_table_association\" \"a\" {",
      "  vpc_id         = aws_vpc.foo.id",
      "  route_table_id = aws_route_table.bar.id",
      "}"
    ]
  },
  "aws-resource-media_convert_queue": {
    "description": "Defines media_convert_queue",
    "prefix": "tf-aws-resource-media_convert_queue",
    "body": [
      "resource \"aws_media_convert_queue\" \"test\" {",
      "  name = \"tf-test-queue\"",
      "}"
    ]
  },
  "aws-resource-media_package_channel": {
    "description": "Defines media_package_channel",
    "prefix": "tf-aws-resource-media_package_channel",
    "body": [
      "resource \"aws_media_package_channel\" \"kittens\" {",
      "  channel_id  = \"kitten-channel\"",
      "  description = \"A channel dedicated to amusing videos of kittens.\"",
      "}"
    ]
  },
  "aws-resource-media_store_container": {
    "description": "Defines media_store_container",
    "prefix": "tf-aws-resource-media_store_container",
    "body": [
      "resource \"aws_media_store_container\" \"example\" {",
      "  name = \"example\"",
      "}"
    ]
  },
  "aws-resource-media_store_container_policy": {
    "description": "Defines media_store_container_policy",
    "prefix": "tf-aws-resource-media_store_container_policy",
    "body": [
      "data \"aws_region\" \"current\" {}",
      "",
      "data \"aws_caller_identity\" \"current\" {}",
      "",
      "resource \"aws_media_store_container\" \"example\" {",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_media_store_container_policy\" \"example\" {",
      "  container_name = aws_media_store_container.example.name",
      "",
      "  policy = <<EOF",
      "{",
      "\t\"Version\": \"2012-10-17\",",
      "\t\"Statement\": [{",
      "\t\t\"Sid\": \"MediaStoreFullAccess\",",
      "\t\t\"Action\": [ \"mediastore:*\" ],",
      "\t\t\"Principal\": {\"AWS\" : \"arn:aws:iam::${data.aws_caller_identity.current.account_id}:root\"},",
      "\t\t\"Effect\": \"Allow\",",
      "\t\t\"Resource\": \"arn:aws:mediastore:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:container/${aws_media_store_container.example.name}/*\",",
      "\t\t\"Condition\": {",
      "\t\t\t\"Bool\": { \"aws:SecureTransport\": \"true\" }",
      "\t\t}",
      "\t}]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-mq_broker": {
    "description": "Defines mq_broker",
    "prefix": "tf-aws-resource-mq_broker",
    "body": [
      "resource \"aws_mq_broker\" \"example\" {",
      "  broker_name = \"example\"",
      "",
      "  configuration {",
      "    id       = aws_mq_configuration.test.id",
      "    revision = aws_mq_configuration.test.latest_revision",
      "  }",
      "",
      "  engine_type        = \"ActiveMQ\"",
      "  engine_version     = \"5.15.0\"",
      "  host_instance_type = \"mq.t2.micro\"",
      "  security_groups    = [aws_security_group.test.id]",
      "",
      "  user {",
      "    username = \"ExampleUser\"",
      "    password = \"MindTheGap\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-mq_configuration": {
    "description": "Defines mq_configuration",
    "prefix": "tf-aws-resource-mq_configuration",
    "body": [
      "resource \"aws_mq_configuration\" \"example\" {",
      "  description    = \"Example Configuration\"",
      "  name           = \"example\"",
      "  engine_type    = \"ActiveMQ\"",
      "  engine_version = \"5.15.0\"",
      "",
      "  data = <<DATA",
      "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>",
      "<broker xmlns=\"http://activemq.apache.org/schema/core\">",
      "  <plugins>",
      "    <forcePersistencyModeBrokerPlugin persistenceFlag=\"true\"/>",
      "    <statisticsBrokerPlugin/>",
      "    <timeStampingBrokerPlugin ttlCeiling=\"86400000\" zeroExpirationOverride=\"86400000\"/>",
      "  </plugins>",
      "</broker>",
      "DATA",
      "}"
    ]
  },
  "aws-resource-msk_cluster": {
    "description": "Defines msk_cluster",
    "prefix": "tf-aws-resource-msk_cluster",
    "body": [
      "resource \"aws_vpc\" \"vpc\" {",
      "  cidr_block = \"192.168.0.0/22\"",
      "}",
      "",
      "data \"aws_availability_zones\" \"azs\" {",
      "  state = \"available\"",
      "}",
      "",
      "resource \"aws_subnet\" \"subnet_az1\" {",
      "  availability_zone = data.aws_availability_zones.azs.names[0]",
      "  cidr_block        = \"192.168.0.0/24\"",
      "  vpc_id            = aws_vpc.vpc.id",
      "}",
      "",
      "resource \"aws_subnet\" \"subnet_az2\" {",
      "  availability_zone = data.aws_availability_zones.azs.names[1]",
      "  cidr_block        = \"192.168.1.0/24\"",
      "  vpc_id            = aws_vpc.vpc.id",
      "}",
      "",
      "resource \"aws_subnet\" \"subnet_az3\" {",
      "  availability_zone = data.aws_availability_zones.azs.names[2]",
      "  cidr_block        = \"192.168.2.0/24\"",
      "  vpc_id            = aws_vpc.vpc.id",
      "}",
      "",
      "resource \"aws_security_group\" \"sg\" {",
      "  vpc_id = aws_vpc.vpc.id",
      "}",
      "",
      "resource \"aws_kms_key\" \"kms\" {",
      "  description = \"example\"",
      "}",
      "",
      "resource \"aws_cloudwatch_log_group\" \"test\" {",
      "  name = \"msk_broker_logs\"",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"bucket\" {",
      "  bucket = \"msk-broker-logs-bucket\"",
      "  acl    = \"private\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"firehose_role\" {",
      "  name = \"firehose_test_role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "\"Version\": \"2012-10-17\",",
      "\"Statement\": [",
      "  {",
      "    \"Action\": \"sts:AssumeRole\",",
      "    \"Principal\": {",
      "      \"Service\": \"firehose.amazonaws.com\"",
      "    },",
      "    \"Effect\": \"Allow\",",
      "    \"Sid\": \"\"",
      "  }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_kinesis_firehose_delivery_stream\" \"test_stream\" {",
      "  name        = \"terraform-kinesis-firehose-msk-broker-logs-stream\"",
      "  destination = \"s3\"",
      "",
      "  s3_configuration {",
      "    role_arn   = aws_iam_role.firehose_role.arn",
      "    bucket_arn = aws_s3_bucket.bucket.arn",
      "  }",
      "",
      "  tags = {",
      "    LogDeliveryEnabled = \"placeholder\"",
      "  }",
      "",
      "  lifecycle {",
      "    ignore_changes = [",
      "      tags[\"LogDeliveryEnabled\"],",
      "    ]",
      "  }",
      "}",
      "",
      "resource \"aws_msk_cluster\" \"example\" {",
      "  cluster_name           = \"example\"",
      "  kafka_version          = \"2.4.1\"",
      "  number_of_broker_nodes = 3",
      "",
      "  broker_node_group_info {",
      "    instance_type   = \"kafka.m5.large\"",
      "    ebs_volume_size = 1000",
      "    client_subnets = [",
      "      aws_subnet.subnet_az1.id,",
      "      aws_subnet.subnet_az2.id,",
      "      aws_subnet.subnet_az3.id,",
      "    ]",
      "    security_groups = [aws_security_group.sg.id]",
      "  }",
      "",
      "  encryption_info {",
      "    encryption_at_rest_kms_key_arn = aws_kms_key.kms.arn",
      "  }",
      "",
      "  open_monitoring {",
      "    prometheus {",
      "      jmx_exporter {",
      "        enabled_in_broker = true",
      "      }",
      "      node_exporter {",
      "        enabled_in_broker = true",
      "      }",
      "    }",
      "  }",
      "",
      "  logging_info {",
      "    broker_logs {",
      "      cloudwatch_logs {",
      "        enabled   = true",
      "        log_group = aws_cloudwatch_log_group.test.name",
      "      }",
      "      firehose {",
      "        enabled         = true",
      "        delivery_stream = aws_kinesis_firehose_delivery_stream.test_stream.name",
      "      }",
      "      s3 {",
      "        enabled = true",
      "        bucket  = aws_s3_bucket.bucket.id",
      "        prefix  = \"logs/msk-\"",
      "      }",
      "    }",
      "  }",
      "",
      "  tags = {",
      "    foo = \"bar\"",
      "  }",
      "}",
      "",
      "output \"zookeeper_connect_string\" {",
      "  value = aws_msk_cluster.example.zookeeper_connect_string",
      "}",
      "",
      "output \"bootstrap_brokers_tls\" {",
      "  description = \"TLS connection host:port pairs\"",
      "  value       = aws_msk_cluster.example.bootstrap_brokers_tls",
      "}"
    ]
  },
  "aws-resource-msk_configuration": {
    "description": "Defines msk_configuration",
    "prefix": "tf-aws-resource-msk_configuration",
    "body": [
      "resource \"aws_msk_configuration\" \"example\" {",
      "  kafka_versions = [\"2.1.0\"]",
      "  name           = \"example\"",
      "",
      "  server_properties = <<PROPERTIES",
      "auto.create.topics.enable = true",
      "delete.topic.enable = true",
      "PROPERTIES",
      "}"
    ]
  },
  "aws-resource-msk_scram_secret_association": {
    "description": "Defines msk_scram_secret_association",
    "prefix": "tf-aws-resource-msk_scram_secret_association",
    "body": [
      "resource \"aws_msk_scram_secret_association\" \"example\" {",
      "  cluster_arn     = aws_msk_cluster.example.arn",
      "  secret_arn_list = [aws_secretsmanager_secret.example.arn]",
      "",
      "  depends_on = [aws_secretsmanager_secret_version.example]",
      "}",
      "",
      "resource \"aws_msk_cluster\" \"example\" {",
      "  cluster_name = \"example\"",
      "  # ... other configuration...",
      "  client_authentication {",
      "    sasl {",
      "      scram = true",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_secretsmanager_secret\" \"example\" {",
      "  name       = \"AmazonMSK_example\"",
      "  kms_key_id = aws_kms_key.example.key_id",
      "}",
      "",
      "resource \"aws_kms_key\" \"example\" {",
      "  description = \"Example Key for MSK Cluster Scram Secret Association\"",
      "}",
      "",
      "resource \"aws_secretsmanager_secret_version\" \"example\" {",
      "  secret_id     = aws_secretsmanager_secret.example.id",
      "  secret_string = jsonencode({ username = \"user\", password = \"pass\" })",
      "}",
      "",
      "resource \"aws_secretsmanager_secret_policy\" \"example\" {",
      "  secret_arn = aws_secretsmanager_secret.example.arn",
      "  policy     = <<POLICY",
      "{",
      "  \"Version\" : \"2012-10-17\",",
      "  \"Statement\" : [ {",
      "    \"Sid\": \"AWSKafkaResourcePolicy\",",
      "    \"Effect\" : \"Allow\",",
      "    \"Principal\" : {",
      "      \"Service\" : \"kafka.amazonaws.com\"",
      "    },",
      "    \"Action\" : \"secretsmanager:getSecretValue\",",
      "    \"Resource\" : \"${aws_secretsmanager_secret.example.arn}\"",
      "  } ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-nat_gateway": {
    "description": "Defines nat_gateway",
    "prefix": "tf-aws-resource-nat_gateway",
    "body": [
      "resource \"aws_nat_gateway\" \"gw\" {",
      "  allocation_id = aws_eip.nat.id",
      "  subnet_id     = aws_subnet.example.id",
      "}"
    ]
  },
  "aws-resource-neptune_cluster": {
    "description": "Defines neptune_cluster",
    "prefix": "tf-aws-resource-neptune_cluster",
    "body": [
      "resource \"aws_neptune_cluster\" \"default\" {",
      "  cluster_identifier                  = \"neptune-cluster-demo\"",
      "  engine                              = \"neptune\"",
      "  backup_retention_period             = 5",
      "  preferred_backup_window             = \"07:00-09:00\"",
      "  skip_final_snapshot                 = true",
      "  iam_database_authentication_enabled = true",
      "  apply_immediately                   = true",
      "}"
    ]
  },
  "aws-resource-neptune_cluster_instance": {
    "description": "Defines neptune_cluster_instance",
    "prefix": "tf-aws-resource-neptune_cluster_instance",
    "body": [
      "resource \"aws_neptune_cluster\" \"default\" {",
      "  cluster_identifier                  = \"neptune-cluster-demo\"",
      "  engine                              = \"neptune\"",
      "  backup_retention_period             = 5",
      "  preferred_backup_window             = \"07:00-09:00\"",
      "  skip_final_snapshot                 = true",
      "  iam_database_authentication_enabled = true",
      "  apply_immediately                   = true",
      "}",
      "",
      "resource \"aws_neptune_cluster_instance\" \"example\" {",
      "  count              = 2",
      "  cluster_identifier = aws_neptune_cluster.default.id",
      "  engine             = \"neptune\"",
      "  instance_class     = \"db.r4.large\"",
      "  apply_immediately  = true",
      "}"
    ]
  },
  "aws-resource-neptune_cluster_parameter_group": {
    "description": "Defines neptune_cluster_parameter_group",
    "prefix": "tf-aws-resource-neptune_cluster_parameter_group",
    "body": [
      "resource \"aws_neptune_cluster_parameter_group\" \"example\" {",
      "  family      = \"neptune1\"",
      "  name        = \"example\"",
      "  description = \"neptune cluster parameter group\"",
      "",
      "  parameter {",
      "    name  = \"neptune_enable_audit_log\"",
      "    value = 1",
      "  }",
      "}"
    ]
  },
  "aws-resource-neptune_cluster_snapshot": {
    "description": "Defines neptune_cluster_snapshot",
    "prefix": "tf-aws-resource-neptune_cluster_snapshot",
    "body": [
      "resource \"aws_neptune_cluster_snapshot\" \"example\" {",
      "  db_cluster_identifier          = aws_neptune_cluster.example.id",
      "  db_cluster_snapshot_identifier = \"resourcetestsnapshot1234\"",
      "}"
    ]
  },
  "aws-resource-neptune_event_subscription": {
    "description": "Defines neptune_event_subscription",
    "prefix": "tf-aws-resource-neptune_event_subscription",
    "body": [
      "resource \"aws_neptune_cluster\" \"default\" {",
      "  cluster_identifier                  = \"neptune-cluster-demo\"",
      "  engine                              = \"neptune\"",
      "  backup_retention_period             = 5",
      "  preferred_backup_window             = \"07:00-09:00\"",
      "  skip_final_snapshot                 = true",
      "  iam_database_authentication_enabled = \"true\"",
      "  apply_immediately                   = \"true\"",
      "}",
      "",
      "resource \"aws_neptune_cluster_instance\" \"example\" {",
      "  cluster_identifier = aws_neptune_cluster.default.id",
      "  engine             = \"neptune\"",
      "  instance_class     = \"db.r4.large\"",
      "  apply_immediately  = \"true\"",
      "}",
      "",
      "resource \"aws_sns_topic\" \"default\" {",
      "  name = \"neptune-events\"",
      "}",
      "",
      "resource \"aws_neptune_event_subscription\" \"default\" {",
      "  name          = \"neptune-event-sub\"",
      "  sns_topic_arn = aws_sns_topic.default.arn",
      "",
      "  source_type = \"db-instance\"",
      "  source_ids  = [aws_neptune_cluster_instance.example.id]",
      "",
      "  event_categories = [",
      "    \"maintenance\",",
      "    \"availability\",",
      "    \"creation\",",
      "    \"backup\",",
      "    \"restoration\",",
      "    \"recovery\",",
      "    \"deletion\",",
      "    \"failover\",",
      "    \"failure\",",
      "    \"notification\",",
      "    \"configuration change\",",
      "    \"read replica\",",
      "  ]",
      "",
      "  tags = {",
      "    env = \"test\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-neptune_parameter_group": {
    "description": "Defines neptune_parameter_group",
    "prefix": "tf-aws-resource-neptune_parameter_group",
    "body": [
      "resource \"aws_neptune_parameter_group\" \"example\" {",
      "  family = \"neptune1\"",
      "  name   = \"example\"",
      "",
      "  parameter {",
      "    name  = \"neptune_query_timeout\"",
      "    value = \"25\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-neptune_subnet_group": {
    "description": "Defines neptune_subnet_group",
    "prefix": "tf-aws-resource-neptune_subnet_group",
    "body": [
      "resource \"aws_neptune_subnet_group\" \"default\" {",
      "  name       = \"main\"",
      "  subnet_ids = [aws_subnet.frontend.id, aws_subnet.backend.id]",
      "",
      "  tags = {",
      "    Name = \"My neptune subnet group\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-network_acl": {
    "description": "Defines network_acl",
    "prefix": "tf-aws-resource-network_acl",
    "body": [
      "resource \"aws_network_acl\" \"main\" {",
      "  vpc_id = aws_vpc.main.id",
      "",
      "  egress {",
      "    protocol   = \"tcp\"",
      "    rule_no    = 200",
      "    action     = \"allow\"",
      "    cidr_block = \"10.3.0.0/18\"",
      "    from_port  = 443",
      "    to_port    = 443",
      "  }",
      "",
      "  ingress {",
      "    protocol   = \"tcp\"",
      "    rule_no    = 100",
      "    action     = \"allow\"",
      "    cidr_block = \"10.3.0.0/18\"",
      "    from_port  = 80",
      "    to_port    = 80",
      "  }",
      "",
      "  tags = {",
      "    Name = \"main\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-network_acl_rule": {
    "description": "Defines network_acl_rule",
    "prefix": "tf-aws-resource-network_acl_rule",
    "body": [
      "resource \"aws_network_acl\" \"bar\" {",
      "  vpc_id = aws_vpc.foo.id",
      "}",
      "",
      "resource \"aws_network_acl_rule\" \"bar\" {",
      "  network_acl_id = aws_network_acl.bar.id",
      "  rule_number    = 200",
      "  egress         = false",
      "  protocol       = \"tcp\"",
      "  rule_action    = \"allow\"",
      "  cidr_block     = aws_vpc.foo.cidr_block",
      "  from_port      = 22",
      "  to_port        = 22",
      "}"
    ]
  },
  "aws-resource-network_interface": {
    "description": "Defines network_interface",
    "prefix": "tf-aws-resource-network_interface",
    "body": [
      "resource \"aws_network_interface\" \"test\" {",
      "  subnet_id       = aws_subnet.public_a.id",
      "  private_ips     = [\"10.0.0.50\"]",
      "  security_groups = [aws_security_group.web.id]",
      "",
      "  attachment {",
      "    instance     = aws_instance.test.id",
      "    device_index = 1",
      "  }",
      "}"
    ]
  },
  "aws-resource-network_interface_attachment": {
    "description": "Defines network_interface_attachment",
    "prefix": "tf-aws-resource-network_interface_attachment",
    "body": [
      "resource \"aws_network_interface_attachment\" \"test\" {",
      "  instance_id          = aws_instance.test.id",
      "  network_interface_id = aws_network_interface.test.id",
      "  device_index         = 0",
      "}"
    ]
  },
  "aws-resource-network_interface_sg_attachment": {
    "description": "Defines network_interface_sg_attachment",
    "prefix": "tf-aws-resource-network_interface_sg_attachment",
    "body": [
      "data \"aws_ami\" \"ami\" {",
      "  most_recent = true",
      "",
      "  filter {",
      "    name   = \"name\"",
      "    values = [\"amzn-ami-hvm-*\"]",
      "  }",
      "",
      "  owners = [\"amazon\"]",
      "}",
      "",
      "resource \"aws_instance\" \"instance\" {",
      "  instance_type = \"t2.micro\"",
      "  ami           = data.aws_ami.ami.id",
      "",
      "  tags = {",
      "    type = \"terraform-test-instance\"",
      "  }",
      "}",
      "",
      "resource \"aws_security_group\" \"sg\" {",
      "  tags = {",
      "    type = \"terraform-test-security-group\"",
      "  }",
      "}",
      "",
      "resource \"aws_network_interface_sg_attachment\" \"sg_attachment\" {",
      "  security_group_id    = aws_security_group.sg.id",
      "  network_interface_id = aws_instance.instance.primary_network_interface_id",
      "}"
    ]
  },
  "aws-resource-networkfirewall_firewall": {
    "description": "Defines networkfirewall_firewall",
    "prefix": "tf-aws-resource-networkfirewall_firewall",
    "body": [
      "resource \"aws_networkfirewall_firewall\" \"example\" {",
      "  name                = \"example\"",
      "  firewall_policy_arn = aws_networkfirewall_firewall_policy.example.arn",
      "  vpc_id              = aws_vpc.example.id",
      "  subnet_mapping {",
      "    subnet_id = aws_subnet.example.id",
      "  }",
      "",
      "  tags = {",
      "    Tag1 = \"Value1\"",
      "    Tag2 = \"Value2\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-networkfirewall_firewall_policy": {
    "description": "Defines networkfirewall_firewall_policy",
    "prefix": "tf-aws-resource-networkfirewall_firewall_policy",
    "body": [
      "resource \"aws_networkfirewall_firewall_policy\" \"example\" {",
      "  name = \"example\"",
      "",
      "  firewall_policy {",
      "    stateless_default_actions          = [\"aws:pass\"]",
      "    stateless_fragment_default_actions = [\"aws:drop\"]",
      "    stateless_rule_group_reference {",
      "      priority     = 1",
      "      resource_arn = aws_networkfirewall_rule_group.example.arn",
      "    }",
      "  }",
      "",
      "  tags = {",
      "    Tag1 = \"Value1\"",
      "    Tag2 = \"Value2\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-networkfirewall_logging_configuration": {
    "description": "Defines networkfirewall_logging_configuration",
    "prefix": "tf-aws-resource-networkfirewall_logging_configuration",
    "body": [
      "resource \"aws_networkfirewall_logging_configuration\" \"example\" {",
      "  firewall_arn = aws_networkfirewall_firewall.example.arn",
      "  logging_configuration {",
      "    log_destination_config {",
      "      log_destination = {",
      "        bucketName = aws_s3_bucket.example.bucket",
      "        prefix     = \"/example\"",
      "      }",
      "      log_destination_type = \"S3\"",
      "      log_type             = \"FLOW\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-networkfirewall_resource_policy": {
    "description": "Defines networkfirewall_resource_policy",
    "prefix": "tf-aws-resource-networkfirewall_resource_policy",
    "body": [
      "resource \"aws_networkfirewall_resource_policy\" \"example\" {",
      "  resource_arn = aws_networkfirewall_firewall_policy.example.arn",
      "  # policy's Action element must include all of the following operations",
      "  policy = jsonencode({",
      "    Statement = [{",
      "      Action = [",
      "        \"network-firewall:ListFirewallPolicies\",",
      "        \"network-firewall:CreateFirewall\",",
      "        \"network-firewall:UpdateFirewall\",",
      "        \"network-firewall:AssociateFirewallPolicy\"",
      "      ]",
      "      Effect   = \"Allow\"",
      "      Resource = aws_networkfirewall_firewall_policy.example.arn",
      "      Principal = {",
      "        AWS = \"arn:aws:iam::123456789012:root\"",
      "      }",
      "    }]",
      "    Version = \"2012-10-17\"",
      "  })",
      "}"
    ]
  },
  "aws-resource-networkfirewall_rule_group": {
    "description": "Defines networkfirewall_rule_group",
    "prefix": "tf-aws-resource-networkfirewall_rule_group",
    "body": [
      "resource \"aws_networkfirewall_rule_group\" \"example\" {",
      "  capacity = 100",
      "  name     = \"example\"",
      "  type     = \"STATEFUL\"",
      "  rule_group {",
      "    rules_source {",
      "      rules_source_list {",
      "        generated_rules_type = \"DENYLIST\"",
      "        target_types         = [\"HTTP_HOST\"]",
      "        targets              = [\"test.example.com\"]",
      "      }",
      "    }",
      "  }",
      "",
      "  tags = {",
      "    Tag1 = \"Value1\"",
      "    Tag2 = \"Value2\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-opsworks_application": {
    "description": "Defines opsworks_application",
    "prefix": "tf-aws-resource-opsworks_application",
    "body": [
      "resource \"aws_opsworks_application\" \"foo-app\" {",
      "  name        = \"foobar application\"",
      "  short_name  = \"foobar\"",
      "  stack_id    = aws_opsworks_stack.main.id",
      "  type        = \"rails\"",
      "  description = \"This is a Rails application\"",
      "",
      "  domains = [",
      "    \"example.com\",",
      "    \"sub.example.com\",",
      "  ]",
      "",
      "  environment {",
      "    key    = \"key\"",
      "    value  = \"value\"",
      "    secure = false",
      "  }",
      "",
      "  app_source {",
      "    type     = \"git\"",
      "    revision = \"master\"",
      "    url      = \"https://github.com/example.git\"",
      "  }",
      "",
      "  enable_ssl = true",
      "",
      "  ssl_configuration {",
      "    private_key = file(\"./foobar.key\")",
      "    certificate = file(\"./foobar.crt\")",
      "  }",
      "",
      "  document_root         = \"public\"",
      "  auto_bundle_on_deploy = true",
      "  rails_env             = \"staging\"",
      "}"
    ]
  },
  "aws-resource-opsworks_custom_layer": {
    "description": "Defines opsworks_custom_layer",
    "prefix": "tf-aws-resource-opsworks_custom_layer",
    "body": [
      "resource \"aws_opsworks_custom_layer\" \"custlayer\" {",
      "  name       = \"My Awesome Custom Layer\"",
      "  short_name = \"awesome\"",
      "  stack_id   = aws_opsworks_stack.main.id",
      "}"
    ]
  },
  "aws-resource-opsworks_ganglia_layer": {
    "description": "Defines opsworks_ganglia_layer",
    "prefix": "tf-aws-resource-opsworks_ganglia_layer",
    "body": [
      "resource \"aws_opsworks_ganglia_layer\" \"monitor\" {",
      "  stack_id = aws_opsworks_stack.main.id",
      "  password = \"foobarbaz\"",
      "}"
    ]
  },
  "aws-resource-opsworks_haproxy_layer": {
    "description": "Defines opsworks_haproxy_layer",
    "prefix": "tf-aws-resource-opsworks_haproxy_layer",
    "body": [
      "resource \"aws_opsworks_haproxy_layer\" \"lb\" {",
      "  stack_id       = aws_opsworks_stack.main.id",
      "  stats_password = \"foobarbaz\"",
      "}"
    ]
  },
  "aws-resource-opsworks_instance": {
    "description": "Defines opsworks_instance",
    "prefix": "tf-aws-resource-opsworks_instance",
    "body": [
      "resource \"aws_opsworks_instance\" \"my-instance\" {",
      "  stack_id = aws_opsworks_stack.main.id",
      "",
      "  layer_ids = [",
      "    aws_opsworks_custom_layer.my-layer.id,",
      "  ]",
      "",
      "  instance_type = \"t2.micro\"",
      "  os            = \"Amazon Linux 2015.09\"",
      "  state         = \"stopped\"",
      "}"
    ]
  },
  "aws-resource-opsworks_java_app_layer": {
    "description": "Defines opsworks_java_app_layer",
    "prefix": "tf-aws-resource-opsworks_java_app_layer",
    "body": [
      "resource \"aws_opsworks_java_app_layer\" \"app\" {",
      "  stack_id = aws_opsworks_stack.main.id",
      "}"
    ]
  },
  "aws-resource-opsworks_memcached_layer": {
    "description": "Defines opsworks_memcached_layer",
    "prefix": "tf-aws-resource-opsworks_memcached_layer",
    "body": [
      "resource \"aws_opsworks_memcached_layer\" \"cache\" {",
      "  stack_id = aws_opsworks_stack.main.id",
      "}"
    ]
  },
  "aws-resource-opsworks_mysql_layer": {
    "description": "Defines opsworks_mysql_layer",
    "prefix": "tf-aws-resource-opsworks_mysql_layer",
    "body": [
      "resource \"aws_opsworks_mysql_layer\" \"db\" {",
      "  stack_id = aws_opsworks_stack.main.id",
      "}"
    ]
  },
  "aws-resource-opsworks_nodejs_app_layer": {
    "description": "Defines opsworks_nodejs_app_layer",
    "prefix": "tf-aws-resource-opsworks_nodejs_app_layer",
    "body": [
      "resource \"aws_opsworks_nodejs_app_layer\" \"app\" {",
      "  stack_id = aws_opsworks_stack.main.id",
      "}"
    ]
  },
  "aws-resource-opsworks_permission": {
    "description": "Defines opsworks_permission",
    "prefix": "tf-aws-resource-opsworks_permission",
    "body": [
      "resource \"aws_opsworks_permission\" \"my_stack_permission\" {",
      "  allow_ssh  = true",
      "  allow_sudo = true",
      "  level      = \"iam_only\"",
      "  user_arn   = aws_iam_user.user.arn",
      "  stack_id   = aws_opsworks_stack.stack.id",
      "}"
    ]
  },
  "aws-resource-opsworks_php_app_layer": {
    "description": "Defines opsworks_php_app_layer",
    "prefix": "tf-aws-resource-opsworks_php_app_layer",
    "body": [
      "resource \"aws_opsworks_php_app_layer\" \"app\" {",
      "  stack_id = aws_opsworks_stack.main.id",
      "}"
    ]
  },
  "aws-resource-opsworks_rails_app_layer": {
    "description": "Defines opsworks_rails_app_layer",
    "prefix": "tf-aws-resource-opsworks_rails_app_layer",
    "body": [
      "resource \"aws_opsworks_rails_app_layer\" \"app\" {",
      "  stack_id = aws_opsworks_stack.main.id",
      "}"
    ]
  },
  "aws-resource-opsworks_rds_db_instance": {
    "description": "Defines opsworks_rds_db_instance",
    "prefix": "tf-aws-resource-opsworks_rds_db_instance",
    "body": [
      "resource \"aws_opsworks_rds_db_instance\" \"my_instance\" {",
      "  stack_id            = aws_opsworks_stack.my_stack.id",
      "  rds_db_instance_arn = aws_db_instance.my_instance.arn",
      "  db_user             = \"someUser\"",
      "  db_password         = \"somePass\"",
      "}"
    ]
  },
  "aws-resource-opsworks_stack": {
    "description": "Defines opsworks_stack",
    "prefix": "tf-aws-resource-opsworks_stack",
    "body": [
      "resource \"aws_opsworks_stack\" \"main\" {",
      "  name                         = \"awesome-stack\"",
      "  region                       = \"us-west-1\"",
      "  service_role_arn             = aws_iam_role.opsworks.arn",
      "  default_instance_profile_arn = aws_iam_instance_profile.opsworks.arn",
      "",
      "  tags = {",
      "    Name = \"foobar-terraform-stack\"",
      "  }",
      "",
      "  custom_json = <<EOT",
      "{",
      " \"foobar\": {",
      "    \"version\": \"1.0.0\"",
      "  }",
      "}",
      "EOT",
      "}"
    ]
  },
  "aws-resource-opsworks_static_web_layer": {
    "description": "Defines opsworks_static_web_layer",
    "prefix": "tf-aws-resource-opsworks_static_web_layer",
    "body": [
      "resource \"aws_opsworks_static_web_layer\" \"web\" {",
      "  stack_id = aws_opsworks_stack.main.id",
      "}"
    ]
  },
  "aws-resource-opsworks_user_profile": {
    "description": "Defines opsworks_user_profile",
    "prefix": "tf-aws-resource-opsworks_user_profile",
    "body": [
      "resource \"aws_opsworks_user_profile\" \"my_profile\" {",
      "  user_arn     = aws_iam_user.user.arn",
      "  ssh_username = \"my_user\"",
      "}"
    ]
  },
  "aws-resource-organizations_account": {
    "description": "Defines organizations_account",
    "prefix": "tf-aws-resource-organizations_account",
    "body": [
      "resource \"aws_organizations_account\" \"account\" {",
      "  name  = \"my_new_account\"",
      "  email = \"john@doe.org\"",
      "}"
    ]
  },
  "aws-resource-organizations_organization": {
    "description": "Defines organizations_organization",
    "prefix": "tf-aws-resource-organizations_organization",
    "body": [
      "resource \"aws_organizations_organization\" \"org\" {",
      "  aws_service_access_principals = [",
      "    \"cloudtrail.amazonaws.com\",",
      "    \"config.amazonaws.com\",",
      "  ]",
      "",
      "  feature_set = \"ALL\"",
      "}"
    ]
  },
  "aws-resource-organizations_organizational_unit": {
    "description": "Defines organizations_organizational_unit",
    "prefix": "tf-aws-resource-organizations_organizational_unit",
    "body": [
      "resource \"aws_organizations_organizational_unit\" \"example\" {",
      "  name      = \"example\"",
      "  parent_id = aws_organizations_organization.example.roots[0].id",
      "}"
    ]
  },
  "aws-resource-organizations_policy": {
    "description": "Defines organizations_policy",
    "prefix": "tf-aws-resource-organizations_policy",
    "body": [
      "resource \"aws_organizations_policy\" \"example\" {",
      "  name = \"example\"",
      "",
      "  content = <<CONTENT",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": {",
      "    \"Effect\": \"Allow\",",
      "    \"Action\": \"*\",",
      "    \"Resource\": \"*\"",
      "  }",
      "}",
      "CONTENT",
      "}"
    ]
  },
  "aws-resource-organizations_policy_attachment": {
    "description": "Defines organizations_policy_attachment",
    "prefix": "tf-aws-resource-organizations_policy_attachment",
    "body": [
      "resource \"aws_organizations_policy_attachment\" \"account\" {",
      "  policy_id = aws_organizations_policy.example.id",
      "  target_id = \"123456789012\"",
      "}"
    ]
  },
  "aws-resource-pinpoint_adm_channel": {
    "description": "Defines pinpoint_adm_channel",
    "prefix": "tf-aws-resource-pinpoint_adm_channel",
    "body": [
      "resource \"aws_pinpoint_app\" \"app\" {}",
      "",
      "resource \"aws_pinpoint_adm_channel\" \"channel\" {",
      "  application_id = aws_pinpoint_app.app.application_id",
      "  client_id      = \"\"",
      "  client_secret  = \"\"",
      "  enabled        = true",
      "}"
    ]
  },
  "aws-resource-pinpoint_apns_channel": {
    "description": "Defines pinpoint_apns_channel",
    "prefix": "tf-aws-resource-pinpoint_apns_channel",
    "body": [
      "resource \"aws_pinpoint_apns_channel\" \"apns\" {",
      "  application_id = aws_pinpoint_app.app.application_id",
      "",
      "  certificate = file(\"./certificate.pem\")",
      "  private_key = file(\"./private_key.key\")",
      "}",
      "",
      "resource \"aws_pinpoint_app\" \"app\" {}"
    ]
  },
  "aws-resource-pinpoint_apns_sandbox_channel": {
    "description": "Defines pinpoint_apns_sandbox_channel",
    "prefix": "tf-aws-resource-pinpoint_apns_sandbox_channel",
    "body": [
      "resource \"aws_pinpoint_apns_sandbox_channel\" \"apns_sandbox\" {",
      "  application_id = aws_pinpoint_app.app.application_id",
      "",
      "  certificate = file(\"./certificate.pem\")",
      "  private_key = file(\"./private_key.key\")",
      "}",
      "",
      "resource \"aws_pinpoint_app\" \"app\" {}"
    ]
  },
  "aws-resource-pinpoint_apns_voip_channel": {
    "description": "Defines pinpoint_apns_voip_channel",
    "prefix": "tf-aws-resource-pinpoint_apns_voip_channel",
    "body": [
      "resource \"aws_pinpoint_apns_voip_channel\" \"apns_voip\" {",
      "  application_id = aws_pinpoint_app.app.application_id",
      "",
      "  certificate = file(\"./certificate.pem\")",
      "  private_key = file(\"./private_key.key\")",
      "}",
      "",
      "resource \"aws_pinpoint_app\" \"app\" {}"
    ]
  },
  "aws-resource-pinpoint_apns_voip_sandbox_channel": {
    "description": "Defines pinpoint_apns_voip_sandbox_channel",
    "prefix": "tf-aws-resource-pinpoint_apns_voip_sandbox_channel",
    "body": [
      "resource \"aws_pinpoint_apns_voip_sandbox_channel\" \"apns_voip_sandbox\" {",
      "  application_id = aws_pinpoint_app.app.application_id",
      "",
      "  certificate = file(\"./certificate.pem\")",
      "  private_key = file(\"./private_key.key\")",
      "}",
      "",
      "resource \"aws_pinpoint_app\" \"app\" {}"
    ]
  },
  "aws-resource-pinpoint_app": {
    "description": "Defines pinpoint_app",
    "prefix": "tf-aws-resource-pinpoint_app",
    "body": [
      "resource \"aws_pinpoint_app\" \"example\" {",
      "  name = \"test-app\"",
      "",
      "  limits {",
      "    maximum_duration = 600",
      "  }",
      "",
      "  quiet_time {",
      "    start = \"00:00\"",
      "    end   = \"06:00\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-pinpoint_baidu_channel": {
    "description": "Defines pinpoint_baidu_channel",
    "prefix": "tf-aws-resource-pinpoint_baidu_channel",
    "body": [
      "resource \"aws_pinpoint_app\" \"app\" {}",
      "",
      "resource \"aws_pinpoint_baidu_channel\" \"channel\" {",
      "  application_id = aws_pinpoint_app.app.application_id",
      "  api_key        = \"\"",
      "  secret_key     = \"\"",
      "}"
    ]
  },
  "aws-resource-pinpoint_email_channel": {
    "description": "Defines pinpoint_email_channel",
    "prefix": "tf-aws-resource-pinpoint_email_channel",
    "body": [
      "resource \"aws_pinpoint_email_channel\" \"email\" {",
      "  application_id = aws_pinpoint_app.app.application_id",
      "  from_address   = \"user@example.com\"",
      "  identity       = aws_ses_domain_identity.identity.arn",
      "  role_arn       = aws_iam_role.role.arn",
      "}",
      "",
      "resource \"aws_pinpoint_app\" \"app\" {}",
      "",
      "resource \"aws_ses_domain_identity\" \"identity\" {",
      "  domain = \"example.com\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"role\" {",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"pinpoint.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"role_policy\" {",
      "  name = \"role_policy\"",
      "  role = aws_iam_role.role.id",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": {",
      "    \"Action\": [",
      "      \"mobileanalytics:PutEvents\",",
      "      \"mobileanalytics:PutItems\"",
      "    ],",
      "    \"Effect\": \"Allow\",",
      "    \"Resource\": [",
      "      \"*\"",
      "    ]",
      "  }",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-pinpoint_event_stream": {
    "description": "Defines pinpoint_event_stream",
    "prefix": "tf-aws-resource-pinpoint_event_stream",
    "body": [
      "resource \"aws_pinpoint_event_stream\" \"stream\" {",
      "  application_id         = aws_pinpoint_app.app.application_id",
      "  destination_stream_arn = aws_kinesis_stream.test_stream.arn",
      "  role_arn               = aws_iam_role.test_role.arn",
      "}",
      "",
      "resource \"aws_pinpoint_app\" \"app\" {}",
      "",
      "resource \"aws_kinesis_stream\" \"test_stream\" {",
      "  name        = \"pinpoint-kinesis-test\"",
      "  shard_count = 1",
      "}",
      "",
      "resource \"aws_iam_role\" \"test_role\" {",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"pinpoint.us-east-1.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"test_role_policy\" {",
      "  name = \"test_policy\"",
      "  role = aws_iam_role.test_role.id",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": {",
      "    \"Action\": [",
      "      \"kinesis:PutRecords\",",
      "      \"kinesis:DescribeStream\"",
      "    ],",
      "    \"Effect\": \"Allow\",",
      "    \"Resource\": [",
      "      \"arn:aws:kinesis:us-east-1:*:*/*\"",
      "    ]",
      "  }",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-pinpoint_gcm_channel": {
    "description": "Defines pinpoint_gcm_channel",
    "prefix": "tf-aws-resource-pinpoint_gcm_channel",
    "body": [
      "resource \"aws_pinpoint_gcm_channel\" \"gcm\" {",
      "  application_id = aws_pinpoint_app.app.application_id",
      "  api_key        = \"api_key\"",
      "}",
      "",
      "resource \"aws_pinpoint_app\" \"app\" {}"
    ]
  },
  "aws-resource-pinpoint_sms_channel": {
    "description": "Defines pinpoint_sms_channel",
    "prefix": "tf-aws-resource-pinpoint_sms_channel",
    "body": [
      "resource \"aws_pinpoint_sms_channel\" \"sms\" {",
      "  application_id = aws_pinpoint_app.app.application_id",
      "}",
      "",
      "resource \"aws_pinpoint_app\" \"app\" {}"
    ]
  },
  "aws-resource-placement_group": {
    "description": "Defines placement_group",
    "prefix": "tf-aws-resource-placement_group",
    "body": [
      "resource \"aws_placement_group\" \"web\" {",
      "  name     = \"hunky-dory-pg\"",
      "  strategy = \"cluster\"",
      "}"
    ]
  },
  "aws-resource-prometheus_workspace": {
    "description": "Defines prometheus_workspace",
    "prefix": "tf-aws-resource-prometheus_workspace",
    "body": [
      "resource \"aws_prometheus_workspace\" \"demo\" {",
      "  alias = \"prometheus-test\"",
      "}"
    ]
  },
  "aws-resource-proxy_protocol_policy": {
    "description": "Defines proxy_protocol_policy",
    "prefix": "tf-aws-resource-proxy_protocol_policy",
    "body": [
      "resource \"aws_elb\" \"lb\" {",
      "  name               = \"test-lb\"",
      "  availability_zones = [\"us-east-1a\"]",
      "",
      "  listener {",
      "    instance_port     = 25",
      "    instance_protocol = \"tcp\"",
      "    lb_port           = 25",
      "    lb_protocol       = \"tcp\"",
      "  }",
      "",
      "  listener {",
      "    instance_port     = 587",
      "    instance_protocol = \"tcp\"",
      "    lb_port           = 587",
      "    lb_protocol       = \"tcp\"",
      "  }",
      "}",
      "",
      "resource \"aws_proxy_protocol_policy\" \"smtp\" {",
      "  load_balancer  = aws_elb.lb.name",
      "  instance_ports = [\"25\", \"587\"]",
      "}"
    ]
  },
  "aws-resource-qldb_ledger": {
    "description": "Defines qldb_ledger",
    "prefix": "tf-aws-resource-qldb_ledger",
    "body": [
      "resource \"aws_qldb_ledger\" \"sample-ledger\" {",
      "  name = \"sample-ledger\"",
      "}"
    ]
  },
  "aws-resource-quicksight_group": {
    "description": "Defines quicksight_group",
    "prefix": "tf-aws-resource-quicksight_group",
    "body": [
      "resource \"aws_quicksight_group\" \"example\" {",
      "  group_name = \"tf-example\"",
      "}"
    ]
  },
  "aws-resource-quicksight_user": {
    "description": "Defines quicksight_user",
    "prefix": "tf-aws-resource-quicksight_user",
    "body": [
      "resource \"aws_quicksight_user\" \"example\" {",
      "  user_name     = \"an-author\"",
      "  email         = \"author@example.com\"",
      "  identity_type = \"IAM\"",
      "  user_role     = \"AUTHOR\"",
      "}"
    ]
  },
  "aws-resource-ram_principal_association": {
    "description": "Defines ram_principal_association",
    "prefix": "tf-aws-resource-ram_principal_association",
    "body": [
      "resource \"aws_ram_resource_share\" \"example\" {",
      "  # ... other configuration ...",
      "  allow_external_principals = true",
      "}",
      "",
      "resource \"aws_ram_principal_association\" \"example\" {",
      "  principal          = \"111111111111\"",
      "  resource_share_arn = aws_ram_resource_share.example.arn",
      "}"
    ]
  },
  "aws-resource-ram_resource_association": {
    "description": "Defines ram_resource_association",
    "prefix": "tf-aws-resource-ram_resource_association",
    "body": [
      "resource \"aws_ram_resource_association\" \"example\" {",
      "  resource_arn       = aws_subnet.example.arn",
      "  resource_share_arn = aws_ram_resource_share.example.arn",
      "}"
    ]
  },
  "aws-resource-ram_resource_share": {
    "description": "Defines ram_resource_share",
    "prefix": "tf-aws-resource-ram_resource_share",
    "body": [
      "resource \"aws_ram_resource_share\" \"example\" {",
      "  name                      = \"example\"",
      "  allow_external_principals = true",
      "",
      "  tags = {",
      "    Environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ram_resource_share_accepter": {
    "description": "Defines ram_resource_share_accepter",
    "prefix": "tf-aws-resource-ram_resource_share_accepter",
    "body": [
      "provider \"aws\" {",
      "  profile = \"profile2\"",
      "}",
      "",
      "provider \"aws\" {",
      "  alias   = \"alternate\"",
      "  profile = \"profile1\"",
      "}",
      "",
      "resource \"aws_ram_resource_share\" \"sender_share\" {",
      "  provider = aws.alternate",
      "",
      "  name                      = \"tf-test-resource-share\"",
      "  allow_external_principals = true",
      "",
      "  tags = {",
      "    Name = \"tf-test-resource-share\"",
      "  }",
      "}",
      "",
      "resource \"aws_ram_principal_association\" \"sender_invite\" {",
      "  provider = aws.alternate",
      "",
      "  principal          = data.aws_caller_identity.receiver.account_id",
      "  resource_share_arn = aws_ram_resource_share.sender_share.arn",
      "}",
      "",
      "data \"aws_caller_identity\" \"receiver\" {}",
      "",
      "resource \"aws_ram_resource_share_accepter\" \"receiver_accept\" {",
      "  share_arn = aws_ram_principal_association.sender_invite.resource_share_arn",
      "}"
    ]
  },
  "aws-resource-rds_cluster": {
    "description": "Defines rds_cluster",
    "prefix": "tf-aws-resource-rds_cluster",
    "body": [
      "resource \"aws_rds_cluster\" \"default\" {",
      "  cluster_identifier      = \"aurora-cluster-demo\"",
      "  engine                  = \"aurora-mysql\"",
      "  engine_version          = \"5.7.mysql_aurora.2.03.2\"",
      "  availability_zones      = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]",
      "  database_name           = \"mydb\"",
      "  master_username         = \"foo\"",
      "  master_password         = \"bar\"",
      "  backup_retention_period = 5",
      "  preferred_backup_window = \"07:00-09:00\"",
      "}"
    ]
  },
  "aws-resource-rds_cluster_endpoint": {
    "description": "Defines rds_cluster_endpoint",
    "prefix": "tf-aws-resource-rds_cluster_endpoint",
    "body": [
      "resource \"aws_rds_cluster\" \"default\" {",
      "  cluster_identifier      = \"aurora-cluster-demo\"",
      "  availability_zones      = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]",
      "  database_name           = \"mydb\"",
      "  master_username         = \"foo\"",
      "  master_password         = \"bar\"",
      "  backup_retention_period = 5",
      "  preferred_backup_window = \"07:00-09:00\"",
      "}",
      "",
      "resource \"aws_rds_cluster_instance\" \"test1\" {",
      "  apply_immediately  = true",
      "  cluster_identifier = aws_rds_cluster.default.id",
      "  identifier         = \"test1\"",
      "  instance_class     = \"db.t2.small\"",
      "  engine             = aws_rds_cluster.default.engine",
      "  engine_version     = aws_rds_cluster.default.engine_version",
      "}",
      "",
      "resource \"aws_rds_cluster_instance\" \"test2\" {",
      "  apply_immediately  = true",
      "  cluster_identifier = aws_rds_cluster.default.id",
      "  identifier         = \"test2\"",
      "  instance_class     = \"db.t2.small\"",
      "  engine             = aws_rds_cluster.default.engine",
      "  engine_version     = aws_rds_cluster.default.engine_version",
      "}",
      "",
      "resource \"aws_rds_cluster_instance\" \"test3\" {",
      "  apply_immediately  = true",
      "  cluster_identifier = aws_rds_cluster.default.id",
      "  identifier         = \"test3\"",
      "  instance_class     = \"db.t2.small\"",
      "  engine             = aws_rds_cluster.default.engine",
      "  engine_version     = aws_rds_cluster.default.engine_version",
      "}",
      "",
      "resource \"aws_rds_cluster_endpoint\" \"eligible\" {",
      "  cluster_identifier          = aws_rds_cluster.default.id",
      "  cluster_endpoint_identifier = \"reader\"",
      "  custom_endpoint_type        = \"READER\"",
      "",
      "  excluded_members = [",
      "    aws_rds_cluster_instance.test1.id,",
      "    aws_rds_cluster_instance.test2.id,",
      "  ]",
      "}",
      "",
      "resource \"aws_rds_cluster_endpoint\" \"static\" {",
      "  cluster_identifier          = aws_rds_cluster.default.id",
      "  cluster_endpoint_identifier = \"static\"",
      "  custom_endpoint_type        = \"READER\"",
      "",
      "  static_members = [",
      "    aws_rds_cluster_instance.test1.id,",
      "    aws_rds_cluster_instance.test3.id,",
      "  ]",
      "}"
    ]
  },
  "aws-resource-rds_cluster_instance": {
    "description": "Defines rds_cluster_instance",
    "prefix": "tf-aws-resource-rds_cluster_instance",
    "body": [
      "resource \"aws_rds_cluster_instance\" \"cluster_instances\" {",
      "  count              = 2",
      "  identifier         = \"aurora-cluster-demo-${count.index}\"",
      "  cluster_identifier = aws_rds_cluster.default.id",
      "  instance_class     = \"db.r4.large\"",
      "  engine             = aws_rds_cluster.default.engine",
      "  engine_version     = aws_rds_cluster.default.engine_version",
      "}",
      "",
      "resource \"aws_rds_cluster\" \"default\" {",
      "  cluster_identifier = \"aurora-cluster-demo\"",
      "  availability_zones = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]",
      "  database_name      = \"mydb\"",
      "  master_username    = \"foo\"",
      "  master_password    = \"barbut8chars\"",
      "}"
    ]
  },
  "aws-resource-rds_cluster_parameter_group": {
    "description": "Defines rds_cluster_parameter_group",
    "prefix": "tf-aws-resource-rds_cluster_parameter_group",
    "body": [
      "resource \"aws_rds_cluster_parameter_group\" \"default\" {",
      "  name        = \"rds-cluster-pg\"",
      "  family      = \"aurora5.6\"",
      "  description = \"RDS default cluster parameter group\"",
      "",
      "  parameter {",
      "    name  = \"character_set_server\"",
      "    value = \"utf8\"",
      "  }",
      "",
      "  parameter {",
      "    name  = \"character_set_client\"",
      "    value = \"utf8\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-rds_global_cluster": {
    "description": "Defines rds_global_cluster",
    "prefix": "tf-aws-resource-rds_global_cluster",
    "body": [
      "provider \"aws\" {",
      "  alias  = \"primary\"",
      "  region = \"us-east-2\"",
      "}",
      "",
      "provider \"aws\" {",
      "  alias  = \"secondary\"",
      "  region = \"us-west-2\"",
      "}",
      "",
      "resource \"aws_rds_global_cluster\" \"example\" {",
      "  provider = aws.primary",
      "",
      "  global_cluster_identifier = \"example\"",
      "}",
      "",
      "resource \"aws_rds_cluster\" \"primary\" {",
      "  provider = aws.primary",
      "",
      "  # ... other configuration ...",
      "  global_cluster_identifier = aws_rds_global_cluster.example.id",
      "}",
      "",
      "resource \"aws_rds_cluster_instance\" \"primary\" {",
      "  provider = aws.primary",
      "",
      "  # ... other configuration ...",
      "  cluster_identifier = aws_rds_cluster.primary.id",
      "}",
      "",
      "resource \"aws_rds_cluster\" \"secondary\" {",
      "  depends_on = [aws_rds_cluster_instance.primary]",
      "  provider   = aws.secondary",
      "",
      "  # ... other configuration ...",
      "  global_cluster_identifier = aws_rds_global_cluster.example.id",
      "}",
      "",
      "resource \"aws_rds_cluster_instance\" \"secondary\" {",
      "  provider = aws.secondary",
      "",
      "  # ... other configuration ...",
      "  cluster_identifier = aws_rds_cluster.secondary.id",
      "}"
    ]
  },
  "aws-resource-redshift_cluster": {
    "description": "Defines redshift_cluster",
    "prefix": "tf-aws-resource-redshift_cluster",
    "body": [
      "resource \"aws_redshift_cluster\" \"default\" {",
      "  cluster_identifier = \"tf-redshift-cluster\"",
      "  database_name      = \"mydb\"",
      "  master_username    = \"foo\"",
      "  master_password    = \"Mustbe8characters\"",
      "  node_type          = \"dc1.large\"",
      "  cluster_type       = \"single-node\"",
      "}"
    ]
  },
  "aws-resource-redshift_event_subscription": {
    "description": "Defines redshift_event_subscription",
    "prefix": "tf-aws-resource-redshift_event_subscription",
    "body": [
      "resource \"aws_redshift_cluster\" \"default\" {",
      "  cluster_identifier = \"default\"",
      "  database_name      = \"default\"",
      "",
      "  # ...",
      "}",
      "",
      "resource \"aws_sns_topic\" \"default\" {",
      "  name = \"redshift-events\"",
      "}",
      "",
      "resource \"aws_redshift_event_subscription\" \"default\" {",
      "  name          = \"redshift-event-sub\"",
      "  sns_topic_arn = aws_sns_topic.default.arn",
      "",
      "  source_type = \"cluster\"",
      "  source_ids  = [aws_redshift_cluster.default.id]",
      "",
      "  severity = \"INFO\"",
      "",
      "  event_categories = [",
      "    \"configuration\",",
      "    \"management\",",
      "    \"monitoring\",",
      "    \"security\",",
      "  ]",
      "",
      "  tags = {",
      "    Name = \"default\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-redshift_parameter_group": {
    "description": "Defines redshift_parameter_group",
    "prefix": "tf-aws-resource-redshift_parameter_group",
    "body": [
      "resource \"aws_redshift_parameter_group\" \"bar\" {",
      "  name   = \"parameter-group-test-terraform\"",
      "  family = \"redshift-1.0\"",
      "",
      "  parameter {",
      "    name  = \"require_ssl\"",
      "    value = \"true\"",
      "  }",
      "",
      "  parameter {",
      "    name  = \"query_group\"",
      "    value = \"example\"",
      "  }",
      "",
      "  parameter {",
      "    name  = \"enable_user_activity_logging\"",
      "    value = \"true\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-redshift_security_group": {
    "description": "Defines redshift_security_group",
    "prefix": "tf-aws-resource-redshift_security_group",
    "body": [
      "resource \"aws_redshift_security_group\" \"default\" {",
      "  name = \"redshift-sg\"",
      "",
      "  ingress {",
      "    cidr = \"10.0.0.0/24\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-redshift_snapshot_copy_grant": {
    "description": "Defines redshift_snapshot_copy_grant",
    "prefix": "tf-aws-resource-redshift_snapshot_copy_grant",
    "body": [
      "resource \"aws_redshift_snapshot_copy_grant\" \"test\" {",
      "  snapshot_copy_grant_name = \"my-grant\"",
      "}",
      "",
      "resource \"aws_redshift_cluster\" \"test\" {",
      "  # ... other configuration ...",
      "  snapshot_copy {",
      "    destination_region = \"us-east-2\"",
      "    grant_name         = aws_redshift_snapshot_copy_grant.test.snapshot_copy_grant_name",
      "  }",
      "}"
    ]
  },
  "aws-resource-redshift_snapshot_schedule": {
    "description": "Defines redshift_snapshot_schedule",
    "prefix": "tf-aws-resource-redshift_snapshot_schedule",
    "body": [
      "resource \"aws_redshift_snapshot_schedule\" \"default\" {",
      "  identifier = \"tf-redshift-snapshot-schedule\"",
      "  definitions = [",
      "    \"rate(12 hours)\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-redshift_snapshot_schedule_association": {
    "description": "Defines redshift_snapshot_schedule_association",
    "prefix": "tf-aws-resource-redshift_snapshot_schedule_association",
    "body": [
      "resource \"aws_redshift_cluster\" \"default\" {",
      "  cluster_identifier = \"tf-redshift-cluster\"",
      "  database_name      = \"mydb\"",
      "  master_username    = \"foo\"",
      "  master_password    = \"Mustbe8characters\"",
      "  node_type          = \"dc1.large\"",
      "  cluster_type       = \"single-node\"",
      "}",
      "",
      "resource \"aws_redshift_snapshot_schedule\" \"default\" {",
      "  identifier = \"tf-redshift-snapshot-schedule\"",
      "  definitions = [",
      "    \"rate(12 hours)\",",
      "  ]",
      "}",
      "",
      "resource \"aws_redshift_snapshot_schedule_association\" \"default\" {",
      "  cluster_identifier  = aws_redshift_cluster.default.id",
      "  schedule_identifier = aws_redshift_snapshot_schedule.default.id",
      "}"
    ]
  },
  "aws-resource-redshift_subnet_group": {
    "description": "Defines redshift_subnet_group",
    "prefix": "tf-aws-resource-redshift_subnet_group",
    "body": [
      "resource \"aws_vpc\" \"foo\" {",
      "  cidr_block = \"10.1.0.0/16\"",
      "}",
      "",
      "resource \"aws_subnet\" \"foo\" {",
      "  cidr_block        = \"10.1.1.0/24\"",
      "  availability_zone = \"us-west-2a\"",
      "  vpc_id            = aws_vpc.foo.id",
      "",
      "  tags = {",
      "    Name = \"tf-dbsubnet-test-1\"",
      "  }",
      "}",
      "",
      "resource \"aws_subnet\" \"bar\" {",
      "  cidr_block        = \"10.1.2.0/24\"",
      "  availability_zone = \"us-west-2b\"",
      "  vpc_id            = aws_vpc.foo.id",
      "",
      "  tags = {",
      "    Name = \"tf-dbsubnet-test-2\"",
      "  }",
      "}",
      "",
      "resource \"aws_redshift_subnet_group\" \"foo\" {",
      "  name       = \"foo\"",
      "  subnet_ids = [aws_subnet.foo.id, aws_subnet.bar.id]",
      "",
      "  tags = {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-resourcegroups_group": {
    "description": "Defines resourcegroups_group",
    "prefix": "tf-aws-resource-resourcegroups_group",
    "body": [
      "resource \"aws_resourcegroups_group\" \"test\" {",
      "  name = \"test-group\"",
      "",
      "  resource_query {",
      "    query = <<JSON",
      "{",
      "  \"ResourceTypeFilters\": [",
      "    \"AWS::EC2::Instance\"",
      "  ],",
      "  \"TagFilters\": [",
      "    {",
      "      \"Key\": \"Stage\",",
      "      \"Values\": [\"Test\"]",
      "    }",
      "  ]",
      "}",
      "JSON",
      "  }",
      "}"
    ]
  },
  "aws-resource-route": {
    "description": "Defines route",
    "prefix": "tf-aws-resource-route",
    "body": [
      "resource \"aws_route\" \"r\" {",
      "  route_table_id            = \"rtb-4fbb3ac4\"",
      "  destination_cidr_block    = \"10.0.1.0/22\"",
      "  vpc_peering_connection_id = \"pcx-45ff3dc1\"",
      "  depends_on                = [aws_route_table.testing]",
      "}"
    ]
  },
  "aws-resource-route53_delegation_set": {
    "description": "Defines route53_delegation_set",
    "prefix": "tf-aws-resource-route53_delegation_set",
    "body": [
      "resource \"aws_route53_delegation_set\" \"main\" {",
      "  reference_name = \"DynDNS\"",
      "}",
      "",
      "resource \"aws_route53_zone\" \"primary\" {",
      "  name              = \"hashicorp.com\"",
      "  delegation_set_id = aws_route53_delegation_set.main.id",
      "}",
      "",
      "resource \"aws_route53_zone\" \"secondary\" {",
      "  name              = \"terraform.io\"",
      "  delegation_set_id = aws_route53_delegation_set.main.id",
      "}"
    ]
  },
  "aws-resource-route53_health_check": {
    "description": "Defines route53_health_check",
    "prefix": "tf-aws-resource-route53_health_check",
    "body": [
      "resource \"aws_route53_health_check\" \"example\" {",
      "  fqdn              = \"example.com\"",
      "  port              = 80",
      "  type              = \"HTTP\"",
      "  resource_path     = \"/\"",
      "  failure_threshold = \"5\"",
      "  request_interval  = \"30\"",
      "",
      "  tags = {",
      "    Name = \"tf-test-health-check\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-route53_hosted_zone_dnssec": {
    "description": "Defines route53_hosted_zone_dnssec",
    "prefix": "tf-aws-resource-route53_hosted_zone_dnssec",
    "body": [
      "provider \"aws\" {",
      "  region = \"us-east-1\"",
      "}",
      "",
      "resource \"aws_kms_key\" \"example\" {",
      "  customer_master_key_spec = \"ECC_NIST_P256\"",
      "  deletion_window_in_days  = 7",
      "  key_usage                = \"SIGN_VERIFY\"",
      "  policy = jsonencode({",
      "    Statement = [",
      "      {",
      "        Action = [",
      "          \"kms:DescribeKey\",",
      "          \"kms:GetPublicKey\",",
      "          \"kms:Sign\",",
      "        ],",
      "        Effect = \"Allow\"",
      "        Principal = {",
      "          Service = \"api-service.dnssec.route53.aws.internal\"",
      "        }",
      "        Sid = \"Route 53 DNSSEC Permissions\"",
      "      },",
      "      {",
      "        Action = \"kms:*\"",
      "        Effect = \"Allow\"",
      "        Principal = {",
      "          AWS = \"*\"",
      "        }",
      "        Resource = \"*\"",
      "        Sid      = \"IAM User Permissions\"",
      "      },",
      "    ]",
      "    Version = \"2012-10-17\"",
      "  })",
      "}",
      "",
      "resource \"aws_route53_zone\" \"example\" {",
      "  name = \"example.com\"",
      "}",
      "",
      "resource \"aws_route53_key_signing_key\" \"example\" {",
      "  hosted_zone_id             = aws_route53_zone.test.id",
      "  key_management_service_arn = aws_kms_key.test.arn",
      "  name                       = \"example\"",
      "}",
      "",
      "resource \"aws_route53_hosted_zone_dnssec\" \"example\" {",
      "  hosted_zone_id = aws_route53_key_signing_key.example.hosted_zone_id",
      "}"
    ]
  },
  "aws-resource-route53_key_signing_key": {
    "description": "Defines route53_key_signing_key",
    "prefix": "tf-aws-resource-route53_key_signing_key",
    "body": [
      "provider \"aws\" {",
      "  region = \"us-east-1\"",
      "}",
      "",
      "resource \"aws_kms_key\" \"example\" {",
      "  customer_master_key_spec = \"ECC_NIST_P256\"",
      "  deletion_window_in_days  = 7",
      "  key_usage                = \"SIGN_VERIFY\"",
      "  policy = jsonencode({",
      "    Statement = [",
      "      {",
      "        Action = [",
      "          \"kms:DescribeKey\",",
      "          \"kms:GetPublicKey\",",
      "          \"kms:Sign\",",
      "        ],",
      "        Effect = \"Allow\"",
      "        Principal = {",
      "          Service = \"api-service.dnssec.route53.aws.internal\"",
      "        }",
      "        Sid = \"Route 53 DNSSEC Permissions\"",
      "      },",
      "      {",
      "        Action = \"kms:*\"",
      "        Effect = \"Allow\"",
      "        Principal = {",
      "          AWS = \"*\"",
      "        }",
      "        Resource = \"*\"",
      "        Sid      = \"IAM User Permissions\"",
      "      },",
      "    ]",
      "    Version = \"2012-10-17\"",
      "  })",
      "}",
      "",
      "resource \"aws_route53_zone\" \"example\" {",
      "  name = \"example.com\"",
      "}",
      "",
      "resource \"aws_route53_key_signing_key\" \"example\" {",
      "  hosted_zone_id             = aws_route53_zone.test.id",
      "  key_management_service_arn = aws_kms_key.test.arn",
      "  name                       = \"example\"",
      "}",
      "",
      "resource \"aws_route53_hosted_zone_dnssec\" \"example\" {",
      "  hosted_zone_id = aws_route53_key_signing_key.example.hosted_zone_id",
      "}"
    ]
  },
  "aws-resource-route53_query_log": {
    "description": "Defines route53_query_log",
    "prefix": "tf-aws-resource-route53_query_log",
    "body": [
      "# Example CloudWatch log group in us-east-1",
      "",
      "provider \"aws\" {",
      "  alias  = \"us-east-1\"",
      "  region = \"us-east-1\"",
      "}",
      "",
      "resource \"aws_cloudwatch_log_group\" \"aws_route53_example_com\" {",
      "  provider = aws.us-east-1",
      "",
      "  name              = \"/aws/route53/${aws_route53_zone.example_com.name}\"",
      "  retention_in_days = 30",
      "}",
      "",
      "# Example CloudWatch log resource policy to allow Route53 to write logs",
      "# to any log group under /aws/route53/*",
      "",
      "data \"aws_iam_policy_document\" \"route53-query-logging-policy\" {",
      "  statement {",
      "    actions = [",
      "      \"logs:CreateLogStream\",",
      "      \"logs:PutLogEvents\",",
      "    ]",
      "",
      "    resources = [\"arn:aws:logs:*:*:log-group:/aws/route53/*\"]",
      "",
      "    principals {",
      "      identifiers = [\"route53.amazonaws.com\"]",
      "      type        = \"Service\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_cloudwatch_log_resource_policy\" \"route53-query-logging-policy\" {",
      "  provider = aws.us-east-1",
      "",
      "  policy_document = data.aws_iam_policy_document.route53-query-logging-policy.json",
      "  policy_name     = \"route53-query-logging-policy\"",
      "}",
      "",
      "# Example Route53 zone with query logging",
      "",
      "resource \"aws_route53_zone\" \"example_com\" {",
      "  name = \"example.com\"",
      "}",
      "",
      "resource \"aws_route53_query_log\" \"example_com\" {",
      "  depends_on = [aws_cloudwatch_log_resource_policy.route53-query-logging-policy]",
      "",
      "  cloudwatch_log_group_arn = aws_cloudwatch_log_group.aws_route53_example_com.arn",
      "  zone_id                  = aws_route53_zone.example_com.zone_id",
      "}"
    ]
  },
  "aws-resource-route53_record": {
    "description": "Defines route53_record",
    "prefix": "tf-aws-resource-route53_record",
    "body": [
      "resource \"aws_route53_record\" \"www\" {",
      "  zone_id = aws_route53_zone.primary.zone_id",
      "  name    = \"www.example.com\"",
      "  type    = \"A\"",
      "  ttl     = \"300\"",
      "  records = [aws_eip.lb.public_ip]",
      "}"
    ]
  },
  "aws-resource-route53_resolver_dnssec_config": {
    "description": "Defines route53_resolver_dnssec_config",
    "prefix": "tf-aws-resource-route53_resolver_dnssec_config",
    "body": [
      "resource \"aws_vpc\" \"example\" {",
      "  cidr_block           = \"10.0.0.0/16\"",
      "  enable_dns_support   = true",
      "  enable_dns_hostnames = true",
      "}",
      "",
      "resource \"aws_route53_resolver_dnssec_config\" \"example\" {",
      "  resource_id = aws_vpc.example.id",
      "}"
    ]
  },
  "aws-resource-route53_resolver_endpoint": {
    "description": "Defines route53_resolver_endpoint",
    "prefix": "tf-aws-resource-route53_resolver_endpoint",
    "body": [
      "resource \"aws_route53_resolver_endpoint\" \"foo\" {",
      "  name      = \"foo\"",
      "  direction = \"INBOUND\"",
      "",
      "  security_group_ids = [",
      "    aws_security_group.sg1.id,",
      "    aws_security_group.sg2.id,",
      "  ]",
      "",
      "  ip_address {",
      "    subnet_id = aws_subnet.sn1.id",
      "  }",
      "",
      "  ip_address {",
      "    subnet_id = aws_subnet.sn2.id",
      "    ip        = \"10.0.64.4\"",
      "  }",
      "",
      "  tags = {",
      "    Environment = \"Prod\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-route53_resolver_query_log_config": {
    "description": "Defines route53_resolver_query_log_config",
    "prefix": "tf-aws-resource-route53_resolver_query_log_config",
    "body": [
      "resource \"aws_route53_resolver_query_log_config\" \"example\" {",
      "  name            = \"example\"",
      "  destination_arn = aws_s3_bucket.example.arn",
      "",
      "  tags = {",
      "    Environment = \"Prod\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-route53_resolver_query_log_config_association": {
    "description": "Defines route53_resolver_query_log_config_association",
    "prefix": "tf-aws-resource-route53_resolver_query_log_config_association",
    "body": [
      "resource \"aws_route53_resolver_query_log_config_association\" \"example\" {",
      "  resolver_query_log_config_id = aws_route53_resolver_query_log_config.example.id",
      "  resource_id                  = aws_vpc.example.id",
      "}"
    ]
  },
  "aws-resource-route53_resolver_rule": {
    "description": "Defines route53_resolver_rule",
    "prefix": "tf-aws-resource-route53_resolver_rule",
    "body": [
      "resource \"aws_route53_resolver_rule\" \"sys\" {",
      "  domain_name = \"subdomain.example.com\"",
      "  rule_type   = \"SYSTEM\"",
      "}"
    ]
  },
  "aws-resource-route53_resolver_rule_association": {
    "description": "Defines route53_resolver_rule_association",
    "prefix": "tf-aws-resource-route53_resolver_rule_association",
    "body": [
      "resource \"aws_route53_resolver_rule_association\" \"example\" {",
      "  resolver_rule_id = aws_route53_resolver_rule.sys.id",
      "  vpc_id           = aws_vpc.foo.id",
      "}"
    ]
  },
  "aws-resource-route53_vpc_association_authorization": {
    "description": "Defines route53_vpc_association_authorization",
    "prefix": "tf-aws-resource-route53_vpc_association_authorization",
    "body": [
      "provider \"aws\" {",
      "}",
      "",
      "provider \"aws\" {",
      "  alias = \"alternate\"",
      "}",
      "",
      "resource \"aws_vpc\" \"example\" {",
      "  cidr_block           = \"10.6.0.0/16\"",
      "  enable_dns_hostnames = true",
      "  enable_dns_support   = true",
      "}",
      "",
      "resource \"aws_route53_zone\" \"example\" {",
      "  name = \"example.com\"",
      "",
      "  vpc {",
      "    vpc_id = aws_vpc.example.id",
      "  }",
      "}",
      "",
      "resource \"aws_vpc\" \"alternate\" {",
      "  provider = \"aws.alternate\"",
      "",
      "  cidr_block           = \"10.7.0.0/16\"",
      "  enable_dns_hostnames = true",
      "  enable_dns_support   = true",
      "}",
      "",
      "resource \"aws_route53_vpc_association_authorization\" \"example\" {",
      "  vpc_id  = aws_vpc.alternate.id",
      "  zone_id = aws_route53_zone.example.id",
      "}",
      "",
      "resource \"aws_route53_zone_association\" \"example\" {",
      "  provider = \"aws.alternate\"",
      "",
      "  vpc_id  = aws_route53_vpc_association_authorization.example.vpc_id",
      "  zone_id = aws_route53_vpc_association_authorization.example.zone_id",
      "}"
    ]
  },
  "aws-resource-route53_zone": {
    "description": "Defines route53_zone",
    "prefix": "tf-aws-resource-route53_zone",
    "body": [
      "resource \"aws_route53_zone\" \"primary\" {",
      "  name = \"example.com\"",
      "}"
    ]
  },
  "aws-resource-route53_zone_association": {
    "description": "Defines route53_zone_association",
    "prefix": "tf-aws-resource-route53_zone_association",
    "body": [
      "resource \"aws_vpc\" \"primary\" {",
      "  cidr_block           = \"10.6.0.0/16\"",
      "  enable_dns_hostnames = true",
      "  enable_dns_support   = true",
      "}",
      "",
      "resource \"aws_vpc\" \"secondary\" {",
      "  cidr_block           = \"10.7.0.0/16\"",
      "  enable_dns_hostnames = true",
      "  enable_dns_support   = true",
      "}",
      "",
      "resource \"aws_route53_zone\" \"example\" {",
      "  name = \"example.com\"",
      "",
      "  # NOTE: The aws_route53_zone vpc argument accepts multiple configuration",
      "  #       blocks. The below usage of the single vpc configuration, the",
      "  #       lifecycle configuration, and the aws_route53_zone_association",
      "  #       resource is for illustrative purposes (e.g. for a separate",
      "  #       cross-account authorization process, which is not shown here).",
      "  vpc {",
      "    vpc_id = aws_vpc.primary.id",
      "  }",
      "",
      "  lifecycle {",
      "    ignore_changes = [vpc]",
      "  }",
      "}",
      "",
      "resource \"aws_route53_zone_association\" \"secondary\" {",
      "  zone_id = aws_route53_zone.example.zone_id",
      "  vpc_id  = aws_vpc.secondary.id",
      "}"
    ]
  },
  "aws-resource-route_table": {
    "description": "Defines route_table",
    "prefix": "tf-aws-resource-route_table",
    "body": [
      "resource \"aws_route_table\" \"r\" {",
      "  vpc_id = aws_vpc.default.id",
      "",
      "  route {",
      "    cidr_block = \"10.0.1.0/24\"",
      "    gateway_id = aws_internet_gateway.main.id",
      "  }",
      "",
      "  route {",
      "    ipv6_cidr_block        = \"::/0\"",
      "    egress_only_gateway_id = aws_egress_only_internet_gateway.foo.id",
      "  }",
      "",
      "  tags = {",
      "    Name = \"main\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-route_table_association": {
    "description": "Defines route_table_association",
    "prefix": "tf-aws-resource-route_table_association",
    "body": [
      "resource \"aws_route_table_association\" \"a\" {",
      "  subnet_id      = aws_subnet.foo.id",
      "  route_table_id = aws_route_table.bar.id",
      "}"
    ]
  },
  "aws-resource-s3_access_point": {
    "description": "Defines s3_access_point",
    "prefix": "tf-aws-resource-s3_access_point",
    "body": [
      "resource \"aws_s3_bucket\" \"example\" {",
      "  bucket = \"example\"",
      "}",
      "",
      "resource \"aws_s3_access_point\" \"example\" {",
      "  bucket = aws_s3_bucket.example.id",
      "  name   = \"example\"",
      "}"
    ]
  },
  "aws-resource-s3_account_public_access_block": {
    "description": "Defines s3_account_public_access_block",
    "prefix": "tf-aws-resource-s3_account_public_access_block",
    "body": [
      "resource \"aws_s3_account_public_access_block\" \"example\" {",
      "  block_public_acls   = true",
      "  block_public_policy = true",
      "}"
    ]
  },
  "aws-resource-s3_bucket": {
    "description": "Defines s3_bucket",
    "prefix": "tf-aws-resource-s3_bucket",
    "body": [
      "resource \"aws_s3_bucket\" \"b\" {",
      "  bucket = \"my-tf-test-bucket\"",
      "  acl    = \"private\"",
      "",
      "  tags = {",
      "    Name        = \"My bucket\"",
      "    Environment = \"Dev\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-s3_bucket_analytics_configuration": {
    "description": "Defines s3_bucket_analytics_configuration",
    "prefix": "tf-aws-resource-s3_bucket_analytics_configuration",
    "body": [
      "resource \"aws_s3_bucket_analytics_configuration\" \"example-entire-bucket\" {",
      "  bucket = aws_s3_bucket.example.bucket",
      "  name   = \"EntireBucket\"",
      "",
      "  storage_class_analysis {",
      "    data_export {",
      "      destination {",
      "        s3_bucket_destination {",
      "          bucket_arn = aws_s3_bucket.analytics.arn",
      "        }",
      "      }",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"example\" {",
      "  bucket = \"example\"",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"analytics\" {",
      "  bucket = \"analytics destination\"",
      "}"
    ]
  },
  "aws-resource-s3_bucket_inventory": {
    "description": "Defines s3_bucket_inventory",
    "prefix": "tf-aws-resource-s3_bucket_inventory",
    "body": [
      "resource \"aws_s3_bucket\" \"test\" {",
      "  bucket = \"my-tf-test-bucket\"",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"inventory\" {",
      "  bucket = \"my-tf-inventory-bucket\"",
      "}",
      "",
      "resource \"aws_s3_bucket_inventory\" \"test\" {",
      "  bucket = aws_s3_bucket.test.id",
      "  name   = \"EntireBucketDaily\"",
      "",
      "  included_object_versions = \"All\"",
      "",
      "  schedule {",
      "    frequency = \"Daily\"",
      "  }",
      "",
      "  destination {",
      "    bucket {",
      "      format     = \"ORC\"",
      "      bucket_arn = aws_s3_bucket.inventory.arn",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-s3_bucket_metric": {
    "description": "Defines s3_bucket_metric",
    "prefix": "tf-aws-resource-s3_bucket_metric",
    "body": [
      "resource \"aws_s3_bucket\" \"example\" {",
      "  bucket = \"example\"",
      "}",
      "",
      "resource \"aws_s3_bucket_metric\" \"example-entire-bucket\" {",
      "  bucket = aws_s3_bucket.example.bucket",
      "  name   = \"EntireBucket\"",
      "}"
    ]
  },
  "aws-resource-s3_bucket_notification": {
    "description": "Defines s3_bucket_notification",
    "prefix": "tf-aws-resource-s3_bucket_notification",
    "body": [
      "resource \"aws_sns_topic\" \"topic\" {",
      "  name = \"s3-event-notification-topic\"",
      "",
      "  policy = <<POLICY",
      "{",
      "    \"Version\":\"2012-10-17\",",
      "    \"Statement\":[{",
      "        \"Effect\": \"Allow\",",
      "        \"Principal\": { \"Service\": \"s3.amazonaws.com\" },",
      "        \"Action\": \"SNS:Publish\",",
      "        \"Resource\": \"arn:aws:sns:*:*:s3-event-notification-topic\",",
      "        \"Condition\":{",
      "            \"ArnLike\":{\"aws:SourceArn\":\"${aws_s3_bucket.bucket.arn}\"}",
      "        }",
      "    }]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"bucket\" {",
      "  bucket = \"your-bucket-name\"",
      "}",
      "",
      "resource \"aws_s3_bucket_notification\" \"bucket_notification\" {",
      "  bucket = aws_s3_bucket.bucket.id",
      "",
      "  topic {",
      "    topic_arn     = aws_sns_topic.topic.arn",
      "    events        = [\"s3:ObjectCreated:*\"]",
      "    filter_suffix = \".log\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-s3_bucket_object": {
    "description": "Defines s3_bucket_object",
    "prefix": "tf-aws-resource-s3_bucket_object",
    "body": [
      "resource \"aws_s3_bucket_object\" \"object\" {",
      "  bucket = \"your_bucket_name\"",
      "  key    = \"new_object_key\"",
      "  source = \"path/to/file\"",
      "",
      "  # The filemd5() function is available in Terraform 0.11.12 and later",
      "  # For Terraform 0.11.11 and earlier, use the md5() function and the file() function:",
      "  # etag = \"${md5(file(\"path/to/file\"))}\"",
      "  etag = filemd5(\"path/to/file\")",
      "}"
    ]
  },
  "aws-resource-s3_bucket_ownership_controls": {
    "description": "Defines s3_bucket_ownership_controls",
    "prefix": "tf-aws-resource-s3_bucket_ownership_controls",
    "body": [
      "resource \"aws_s3_bucket\" \"example\" {",
      "  bucket = \"example\"",
      "}",
      "",
      "resource \"aws_s3_bucket_ownership_controls\" \"example\" {",
      "  bucket = aws_s3_bucket.example.id",
      "",
      "  rule {",
      "    object_ownership = \"BucketOwnerPreferred\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-s3_bucket_policy": {
    "description": "Defines s3_bucket_policy",
    "prefix": "tf-aws-resource-s3_bucket_policy",
    "body": [
      "resource \"aws_s3_bucket\" \"b\" {",
      "  bucket = \"my-tf-test-bucket\"",
      "}",
      "",
      "resource \"aws_s3_bucket_policy\" \"b\" {",
      "  bucket = aws_s3_bucket.b.id",
      "",
      "  # Terraform's \"jsonencode\" function converts a",
      "  # Terraform expression's result to valid JSON syntax.",
      "  policy = jsonencode({",
      "    Version = \"2012-10-17\"",
      "    Id      = \"MYBUCKETPOLICY\"",
      "    Statement = [",
      "      {",
      "        Sid       = \"IPAllow\"",
      "        Effect    = \"Deny\"",
      "        Principal = \"*\"",
      "        Action    = \"s3:*\"",
      "        Resource = [",
      "          aws_s3_bucket.b.arn,",
      "          \"${aws_s3_bucket.b.arn}/*\",",
      "        ]",
      "        Condition = {",
      "          IpAddress = {",
      "            \"aws:SourceIp\" = \"8.8.8.8/32\"",
      "          }",
      "        }",
      "      },",
      "    ]",
      "  })",
      "}"
    ]
  },
  "aws-resource-s3_bucket_public_access_block": {
    "description": "Defines s3_bucket_public_access_block",
    "prefix": "tf-aws-resource-s3_bucket_public_access_block",
    "body": [
      "resource \"aws_s3_bucket\" \"example\" {",
      "  bucket = \"example\"",
      "}",
      "",
      "resource \"aws_s3_bucket_public_access_block\" \"example\" {",
      "  bucket = aws_s3_bucket.example.id",
      "",
      "  block_public_acls   = true",
      "  block_public_policy = true",
      "}"
    ]
  },
  "aws-resource-s3_object_copy": {
    "description": "Defines s3_object_copy",
    "prefix": "tf-aws-resource-s3_object_copy",
    "body": [
      "resource \"aws_s3_object_copy\" \"test\" {",
      "  bucket = \"destination_bucket\"",
      "  key    = \"destination_key\"",
      "  source = \"source_bucket/source_key\"",
      "",
      "  grant {",
      "    uri         = \"http://acs.amazonaws.com/groups/global/AllUsers\"",
      "    type        = \"Group\"",
      "    permissions = [\"READ\"]",
      "  }",
      "}"
    ]
  },
  "aws-resource-s3control_bucket": {
    "description": "Defines s3control_bucket",
    "prefix": "tf-aws-resource-s3control_bucket",
    "body": [
      "resource \"aws_s3control_bucket\" \"example\" {",
      "  bucket     = \"example\"",
      "  outpost_id = data.aws_outposts_outpost.example.id",
      "}"
    ]
  },
  "aws-resource-s3control_bucket_lifecycle_configuration": {
    "description": "Defines s3control_bucket_lifecycle_configuration",
    "prefix": "tf-aws-resource-s3control_bucket_lifecycle_configuration",
    "body": [
      "resource \"aws_s3control_bucket_lifecycle_configuration\" \"example\" {",
      "  bucket = aws_s3control_bucket.example.arn",
      "",
      "  rule {",
      "    expiration {",
      "      days = 365",
      "    }",
      "",
      "    filter {",
      "      prefix = \"logs/\"",
      "    }",
      "",
      "    id = \"logs\"",
      "  }",
      "",
      "  rule {",
      "    expiration {",
      "      days = 7",
      "    }",
      "",
      "    filter {",
      "      prefix = \"temp/\"",
      "    }",
      "",
      "    id = \"temp\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-s3control_bucket_policy": {
    "description": "Defines s3control_bucket_policy",
    "prefix": "tf-aws-resource-s3control_bucket_policy",
    "body": [
      "resource \"aws_s3control_bucket_policy\" \"example\" {",
      "  bucket = aws_s3control_bucket.example.arn",
      "  policy = jsonencode({",
      "    Id = \"testBucketPolicy\"",
      "    Statement = [",
      "      {",
      "        Action = \"s3-outposts:PutBucketLifecycleConfiguration\"",
      "        Effect = \"Deny\"",
      "        Principal = {",
      "          AWS = \"*\"",
      "        }",
      "        Resource = aws_s3control_bucket.example.arn",
      "        Sid      = \"statement1\"",
      "      }",
      "    ]",
      "    Version = \"2012-10-17\"",
      "  })",
      "}"
    ]
  },
  "aws-resource-s3outposts_endpoint": {
    "description": "Defines s3outposts_endpoint",
    "prefix": "tf-aws-resource-s3outposts_endpoint",
    "body": [
      "resource \"aws_s3outposts_endpoint\" \"example\" {",
      "  outpost_id        = data.aws_outposts_outpost.example.id",
      "  security_group_id = aws_security_group.example.id",
      "  subnet_id         = aws_subnet.example.id",
      "}"
    ]
  },
  "aws-resource-sagemaker_app": {
    "description": "Defines sagemaker_app",
    "prefix": "tf-aws-resource-sagemaker_app",
    "body": [
      "resource \"aws_sagemaker_app\" \"example\" {",
      "  domain_id         = aws_sagemaker_domain.example.id",
      "  user_profile_name = aws_sagemaker_user_profile.example.user_profile_name",
      "  app_name          = \"example\"",
      "  app_type          = \"JupyterServer\"",
      "}"
    ]
  },
  "aws-resource-sagemaker_app_image_config": {
    "description": "Defines sagemaker_app_image_config",
    "prefix": "tf-aws-resource-sagemaker_app_image_config",
    "body": [
      "resource \"aws_sagemaker_app_image_config\" \"test\" {",
      "  app_image_config_name = \"example\"",
      "",
      "  kernel_gateway_image_config {",
      "    kernel_spec {",
      "      name = \"example\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-sagemaker_code_repository": {
    "description": "Defines sagemaker_code_repository",
    "prefix": "tf-aws-resource-sagemaker_code_repository",
    "body": [
      "resource \"aws_sagemaker_code_repository\" \"example\" {",
      "  code_repository_name = \"example\"",
      "",
      "  git_config {",
      "    repository_url = \"https://github.com/hashicorp/terraform-provider-aws.git\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-sagemaker_domain": {
    "description": "Defines sagemaker_domain",
    "prefix": "tf-aws-resource-sagemaker_domain",
    "body": [
      "resource \"aws_sagemaker_domain\" \"example\" {",
      "  domain_name = \"example\"",
      "  auth_mode   = \"IAM\"",
      "  vpc_id      = aws_vpc.test.id",
      "  subnet_ids  = [aws_subnet.test.id]",
      "",
      "  default_user_settings {",
      "    execution_role = aws_iam_role.test.arn",
      "  }",
      "}",
      "",
      "resource \"aws_iam_role\" \"example\" {",
      "  name               = \"example\"",
      "  path               = \"/\"",
      "  assume_role_policy = data.aws_iam_policy_document.example.json",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"example\" {",
      "  statement {",
      "    actions = [\"sts:AssumeRole\"]",
      "",
      "    principals {",
      "      type        = \"Service\"",
      "      identifiers = [\"sagemaker.amazonaws.com\"]",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-sagemaker_endpoint": {
    "description": "Defines sagemaker_endpoint",
    "prefix": "tf-aws-resource-sagemaker_endpoint",
    "body": [
      "resource \"aws_sagemaker_endpoint\" \"e\" {",
      "  name                 = \"my-endpoint\"",
      "  endpoint_config_name = aws_sagemaker_endpoint_configuration.ec.name",
      "",
      "  tags = {",
      "    Name = \"foo\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-sagemaker_endpoint_configuration": {
    "description": "Defines sagemaker_endpoint_configuration",
    "prefix": "tf-aws-resource-sagemaker_endpoint_configuration",
    "body": [
      "resource \"aws_sagemaker_endpoint_configuration\" \"ec\" {",
      "  name = \"my-endpoint-config\"",
      "",
      "  production_variants {",
      "    variant_name           = \"variant-1\"",
      "    model_name             = aws_sagemaker_model.m.name",
      "    initial_instance_count = 1",
      "    instance_type          = \"ml.t2.medium\"",
      "  }",
      "",
      "  tags = {",
      "    Name = \"foo\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-sagemaker_feature_group": {
    "description": "Defines sagemaker_feature_group",
    "prefix": "tf-aws-resource-sagemaker_feature_group",
    "body": [
      "resource \"aws_sagemaker_feature_group\" \"example\" {",
      "  feature_group_name             = \"example\"",
      "  record_identifier_feature_name = \"example\"",
      "  event_time_feature_name        = \"example\"",
      "  role_arn                       = aws_iam_role.test.arn",
      "",
      "  feature_definition {",
      "    feature_name = \"example\"",
      "    feature_type = \"String\"",
      "  }",
      "",
      "  online_store_config {",
      "    enable_online_store = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-sagemaker_image": {
    "description": "Defines sagemaker_image",
    "prefix": "tf-aws-resource-sagemaker_image",
    "body": [
      "resource \"aws_sagemaker_image\" \"example\" {",
      "  image_name = \"example\"",
      "  role_arn   = aws_iam_role.test.arn",
      "}"
    ]
  },
  "aws-resource-sagemaker_image_version": {
    "description": "Defines sagemaker_image_version",
    "prefix": "tf-aws-resource-sagemaker_image_version",
    "body": [
      "resource \"aws_sagemaker_image_version\" \"test\" {",
      "  image_name = aws_sagemaker_image.test.id",
      "  base_image = \"012345678912.dkr.ecr.us-west-2.amazonaws.com/image:latest\"",
      "}"
    ]
  },
  "aws-resource-sagemaker_model": {
    "description": "Defines sagemaker_model",
    "prefix": "tf-aws-resource-sagemaker_model",
    "body": [
      "resource \"aws_sagemaker_model\" \"example\" {",
      "  name               = \"my-model\"",
      "  execution_role_arn = aws_iam_role.example.arn",
      "",
      "  primary_container {",
      "    image = \"174872318107.dkr.ecr.us-west-2.amazonaws.com/kmeans:1\"",
      "  }",
      "}",
      "",
      "resource \"aws_iam_role\" \"example\" {",
      "  assume_role_policy = data.aws_iam_policy_document.assume_role.json",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"assume_role\" {",
      "  statement {",
      "    actions = [\"sts:AssumeRole\"]",
      "",
      "    principals {",
      "      type        = \"Service\"",
      "      identifiers = [\"sagemaker.amazonaws.com\"]",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-sagemaker_model_package_group": {
    "description": "Defines sagemaker_model_package_group",
    "prefix": "tf-aws-resource-sagemaker_model_package_group",
    "body": [
      "resource \"aws_sagemaker_model_package_group\" \"example\" {",
      "  model_package_group_name = \"example\"",
      "}"
    ]
  },
  "aws-resource-sagemaker_notebook_instance": {
    "description": "Defines sagemaker_notebook_instance",
    "prefix": "tf-aws-resource-sagemaker_notebook_instance",
    "body": [
      "resource \"aws_sagemaker_notebook_instance\" \"ni\" {",
      "  name          = \"my-notebook-instance\"",
      "  role_arn      = aws_iam_role.role.arn",
      "  instance_type = \"ml.t2.medium\"",
      "",
      "  tags = {",
      "    Name = \"foo\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-sagemaker_notebook_instance_lifecycle_configuration": {
    "description": "Defines sagemaker_notebook_instance_lifecycle_configuration",
    "prefix": "tf-aws-resource-sagemaker_notebook_instance_lifecycle_configuration",
    "body": [
      "resource \"aws_sagemaker_notebook_instance_lifecycle_configuration\" \"lc\" {",
      "  name      = \"foo\"",
      "  on_create = base64encode(\"echo foo\")",
      "  on_start  = base64encode(\"echo bar\")",
      "}"
    ]
  },
  "aws-resource-sagemaker_user_profile": {
    "description": "Defines sagemaker_user_profile",
    "prefix": "tf-aws-resource-sagemaker_user_profile",
    "body": [
      "resource \"aws_sagemaker_user_profile\" \"example\" {",
      "  domain_id         = aws_sagemaker_domain.test.id",
      "  user_profile_name = \"example\"",
      "}"
    ]
  },
  "aws-resource-secretsmanager_secret": {
    "description": "Defines secretsmanager_secret",
    "prefix": "tf-aws-resource-secretsmanager_secret",
    "body": [
      "resource \"aws_secretsmanager_secret\" \"example\" {",
      "  name = \"example\"",
      "}"
    ]
  },
  "aws-resource-secretsmanager_secret_policy": {
    "description": "Defines secretsmanager_secret_policy",
    "prefix": "tf-aws-resource-secretsmanager_secret_policy",
    "body": [
      "resource \"aws_secretsmanager_secret\" \"example\" {",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_secretsmanager_secret_policy\" \"example\" {",
      "  secret_arn = aws_secretsmanager_secret.example.arn",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "\t{",
      "\t  \"Sid\": \"EnableAllPermissions\",",
      "\t  \"Effect\": \"Allow\",",
      "\t  \"Principal\": {",
      "\t\t\"AWS\": \"*\"",
      "\t  },",
      "\t  \"Action\": \"secretsmanager:GetSecretValue\",",
      "\t  \"Resource\": \"*\"",
      "\t}",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-secretsmanager_secret_rotation": {
    "description": "Defines secretsmanager_secret_rotation",
    "prefix": "tf-aws-resource-secretsmanager_secret_rotation",
    "body": [
      "resource \"aws_secretsmanager_secret_rotation\" \"example\" {",
      "  secret_id           = aws_secretsmanager_secret.example.id",
      "  rotation_lambda_arn = aws_lambda_function.example.arn",
      "",
      "  rotation_rules {",
      "    automatically_after_days = 30",
      "  }",
      "}"
    ]
  },
  "aws-resource-secretsmanager_secret_version": {
    "description": "Defines secretsmanager_secret_version",
    "prefix": "tf-aws-resource-secretsmanager_secret_version",
    "body": [
      "resource \"aws_secretsmanager_secret_version\" \"example\" {",
      "  secret_id     = aws_secretsmanager_secret.example.id",
      "  secret_string = \"example-string-to-protect\"",
      "}"
    ]
  },
  "aws-resource-security_group": {
    "description": "Defines security_group",
    "prefix": "tf-aws-resource-security_group",
    "body": [
      "resource \"aws_security_group\" \"allow_tls\" {",
      "  name        = \"allow_tls\"",
      "  description = \"Allow TLS inbound traffic\"",
      "  vpc_id      = aws_vpc.main.id",
      "",
      "  ingress {",
      "    description = \"TLS from VPC\"",
      "    from_port   = 443",
      "    to_port     = 443",
      "    protocol    = \"tcp\"",
      "    cidr_blocks = [aws_vpc.main.cidr_block]",
      "  }",
      "",
      "  egress {",
      "    from_port   = 0",
      "    to_port     = 0",
      "    protocol    = \"-1\"",
      "    cidr_blocks = [\"0.0.0.0/0\"]",
      "  }",
      "",
      "  tags = {",
      "    Name = \"allow_tls\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-security_group_rule": {
    "description": "Defines security_group_rule",
    "prefix": "tf-aws-resource-security_group_rule",
    "body": [
      "resource \"aws_security_group_rule\" \"example\" {",
      "  type              = \"ingress\"",
      "  from_port         = 0",
      "  to_port           = 65535",
      "  protocol          = \"tcp\"",
      "  cidr_blocks       = [aws_vpc.example.cidr_block]",
      "  security_group_id = \"sg-123456\"",
      "}"
    ]
  },
  "aws-resource-securityhub_account": {
    "description": "Defines securityhub_account",
    "prefix": "tf-aws-resource-securityhub_account",
    "body": [
      "resource \"aws_securityhub_account\" \"example\" {}"
    ]
  },
  "aws-resource-securityhub_action_target": {
    "description": "Defines securityhub_action_target",
    "prefix": "tf-aws-resource-securityhub_action_target",
    "body": [
      "resource \"aws_securityhub_account\" \"example\" {}",
      "",
      "resource \"aws_securityhub_action_target\" \"example\" {",
      "  depends_on  = [aws_securityhub_account.example]",
      "  name        = \"Send notification to chat\"",
      "  identifier  = \"SendToChat\"",
      "  description = \"This is custom action sends selected findings to chat\"",
      "}"
    ]
  },
  "aws-resource-securityhub_invite_accepter": {
    "description": "Defines securityhub_invite_accepter",
    "prefix": "tf-aws-resource-securityhub_invite_accepter",
    "body": [
      "resource \"aws_securityhub_account\" \"example\" {}",
      "",
      "resource \"aws_securityhub_member\" \"example\" {",
      "  account_id = \"123456789012\"",
      "  email      = \"example@example.com\"",
      "  invite     = true",
      "}",
      "",
      "resource \"aws_securityhub_account\" \"invitee\" {",
      "  provider = \"aws.invitee\"",
      "}",
      "",
      "resource \"aws_securityhub_invite_accepter\" \"invitee\" {",
      "  provider   = \"aws.invitee\"",
      "  depends_on = [aws_securityhub_account.accepter]",
      "  master_id  = aws_securityhub_member.example.master_id",
      "}"
    ]
  },
  "aws-resource-securityhub_member": {
    "description": "Defines securityhub_member",
    "prefix": "tf-aws-resource-securityhub_member",
    "body": [
      "resource \"aws_securityhub_account\" \"example\" {}",
      "",
      "resource \"aws_securityhub_member\" \"example\" {",
      "  depends_on = [aws_securityhub_account.example]",
      "  account_id = \"123456789012\"",
      "  email      = \"example@example.com\"",
      "  invite     = true",
      "}"
    ]
  },
  "aws-resource-securityhub_organization_admin_account": {
    "description": "Defines securityhub_organization_admin_account",
    "prefix": "tf-aws-resource-securityhub_organization_admin_account",
    "body": [
      "resource \"aws_organizations_organization\" \"example\" {",
      "  aws_service_access_principals = [\"securityhub.amazonaws.com\"]",
      "  feature_set                   = \"ALL\"",
      "}",
      "",
      "resource \"aws_securityhub_account\" \"example\" {}",
      "",
      "resource \"aws_securityhub_organization_admin_account\" \"example\" {",
      "  depends_on = [aws_organizations_organization.example]",
      "",
      "  admin_account_id = \"123456789012\"",
      "}"
    ]
  },
  "aws-resource-securityhub_product_subscription": {
    "description": "Defines securityhub_product_subscription",
    "prefix": "tf-aws-resource-securityhub_product_subscription",
    "body": [
      "resource \"aws_securityhub_account\" \"example\" {}",
      "",
      "data \"aws_region\" \"current\" {}",
      "",
      "resource \"aws_securityhub_product_subscription\" \"example\" {",
      "  depends_on  = [aws_securityhub_account.example]",
      "  product_arn = \"arn:aws:securityhub:${data.aws_region.current.name}:733251395267:product/alertlogic/althreatmanagement\"",
      "}"
    ]
  },
  "aws-resource-securityhub_standards_subscription": {
    "description": "Defines securityhub_standards_subscription",
    "prefix": "tf-aws-resource-securityhub_standards_subscription",
    "body": [
      "resource \"aws_securityhub_account\" \"example\" {}",
      "",
      "resource \"aws_securityhub_standards_subscription\" \"cis\" {",
      "  depends_on    = [aws_securityhub_account.example]",
      "  standards_arn = \"arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0\"",
      "}",
      "",
      "resource \"aws_securityhub_standards_subscription\" \"pci_321\" {",
      "  depends_on    = [aws_securityhub_account.example]",
      "  standards_arn = \"arn:aws:securityhub:us-east-1::standards/pci-dss/v/3.2.1\"",
      "}"
    ]
  },
  "aws-resource-serverlessapplicationrepository_cloudformation_stack": {
    "description": "Defines serverlessapplicationrepository_cloudformation_stack",
    "prefix": "tf-aws-resource-serverlessapplicationrepository_cloudformation_stack",
    "body": [
      "resource \"aws_serverlessapplicationrepository_cloudformation_stack\" \"postgres-rotator\" {",
      "  name           = \"postgres-rotator\"",
      "  application_id = \"arn:aws:serverlessrepo:us-east-1:297356227824:applications/SecretsManagerRDSPostgreSQLRotationSingleUser\"",
      "  capabilities = [",
      "    \"CAPABILITY_IAM\",",
      "    \"CAPABILITY_RESOURCE_POLICY\",",
      "  ]",
      "  parameters = {",
      "    functionName = \"func-postgres-rotator\"",
      "    endpoint     = \"secretsmanager.${data.aws_region.current.name}.${data.aws_partition.current.dns_suffix}\"",
      "  }",
      "}",
      "",
      "data \"aws_partition\" \"current\" {}",
      "data \"aws_region\" \"current\" {}"
    ]
  },
  "aws-resource-service_discovery_http_namespace": {
    "description": "Defines service_discovery_http_namespace",
    "prefix": "tf-aws-resource-service_discovery_http_namespace",
    "body": [
      "resource \"aws_service_discovery_http_namespace\" \"example\" {",
      "  name        = \"development\"",
      "  description = \"example\"",
      "}"
    ]
  },
  "aws-resource-service_discovery_private_dns_namespace": {
    "description": "Defines service_discovery_private_dns_namespace",
    "prefix": "tf-aws-resource-service_discovery_private_dns_namespace",
    "body": [
      "resource \"aws_vpc\" \"example\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_service_discovery_private_dns_namespace\" \"example\" {",
      "  name        = \"hoge.example.local\"",
      "  description = \"example\"",
      "  vpc         = aws_vpc.example.id",
      "}"
    ]
  },
  "aws-resource-service_discovery_public_dns_namespace": {
    "description": "Defines service_discovery_public_dns_namespace",
    "prefix": "tf-aws-resource-service_discovery_public_dns_namespace",
    "body": [
      "resource \"aws_service_discovery_public_dns_namespace\" \"example\" {",
      "  name        = \"hoge.example.com\"",
      "  description = \"example\"",
      "}"
    ]
  },
  "aws-resource-service_discovery_service": {
    "description": "Defines service_discovery_service",
    "prefix": "tf-aws-resource-service_discovery_service",
    "body": [
      "resource \"aws_vpc\" \"example\" {",
      "  cidr_block           = \"10.0.0.0/16\"",
      "  enable_dns_support   = true",
      "  enable_dns_hostnames = true",
      "}",
      "",
      "resource \"aws_service_discovery_private_dns_namespace\" \"example\" {",
      "  name        = \"example.terraform.local\"",
      "  description = \"example\"",
      "  vpc         = aws_vpc.example.id",
      "}",
      "",
      "resource \"aws_service_discovery_service\" \"example\" {",
      "  name = \"example\"",
      "",
      "  dns_config {",
      "    namespace_id = aws_service_discovery_private_dns_namespace.example.id",
      "",
      "    dns_records {",
      "      ttl  = 10",
      "      type = \"A\"",
      "    }",
      "",
      "    routing_policy = \"MULTIVALUE\"",
      "  }",
      "",
      "  health_check_custom_config {",
      "    failure_threshold = 1",
      "  }",
      "}"
    ]
  },
  "aws-resource-servicecatalog_portfolio": {
    "description": "Defines servicecatalog_portfolio",
    "prefix": "tf-aws-resource-servicecatalog_portfolio",
    "body": [
      "resource \"aws_servicecatalog_portfolio\" \"portfolio\" {",
      "  name          = \"My App Portfolio\"",
      "  description   = \"List of my organizations apps\"",
      "  provider_name = \"Brett\"",
      "}"
    ]
  },
  "aws-resource-servicequotas_service_quota": {
    "description": "Defines servicequotas_service_quota",
    "prefix": "tf-aws-resource-servicequotas_service_quota",
    "body": [
      "resource \"aws_servicequotas_service_quota\" \"example\" {",
      "  quota_code   = \"L-F678F1CE\"",
      "  service_code = \"vpc\"",
      "  value        = 75",
      "}"
    ]
  },
  "aws-resource-ses_active_receipt_rule_set": {
    "description": "Defines ses_active_receipt_rule_set",
    "prefix": "tf-aws-resource-ses_active_receipt_rule_set",
    "body": [
      "resource \"aws_ses_active_receipt_rule_set\" \"main\" {",
      "  rule_set_name = \"primary-rules\"",
      "}"
    ]
  },
  "aws-resource-ses_configuration_set": {
    "description": "Defines ses_configuration_set",
    "prefix": "tf-aws-resource-ses_configuration_set",
    "body": [
      "resource \"aws_ses_configuration_set\" \"test\" {",
      "  name = \"some-configuration-set-test\"",
      "}"
    ]
  },
  "aws-resource-ses_domain_dkim": {
    "description": "Defines ses_domain_dkim",
    "prefix": "tf-aws-resource-ses_domain_dkim",
    "body": [
      "resource \"aws_ses_domain_identity\" \"example\" {",
      "  domain = \"example.com\"",
      "}",
      "",
      "resource \"aws_ses_domain_dkim\" \"example\" {",
      "  domain = aws_ses_domain_identity.example.domain",
      "}",
      "",
      "resource \"aws_route53_record\" \"example_amazonses_dkim_record\" {",
      "  count   = 3",
      "  zone_id = \"ABCDEFGHIJ123\"",
      "  name    = \"${element(aws_ses_domain_dkim.example.dkim_tokens, count.index)}._domainkey\"",
      "  type    = \"CNAME\"",
      "  ttl     = \"600\"",
      "  records = [\"${element(aws_ses_domain_dkim.example.dkim_tokens, count.index)}.dkim.amazonses.com\"]",
      "}"
    ]
  },
  "aws-resource-ses_domain_identity": {
    "description": "Defines ses_domain_identity",
    "prefix": "tf-aws-resource-ses_domain_identity",
    "body": [
      "resource \"aws_ses_domain_identity\" \"example\" {",
      "  domain = \"example.com\"",
      "}",
      "",
      "resource \"aws_route53_record\" \"example_amazonses_verification_record\" {",
      "  zone_id = \"ABCDEFGHIJ123\"",
      "  name    = \"_amazonses.example.com\"",
      "  type    = \"TXT\"",
      "  ttl     = \"600\"",
      "  records = [aws_ses_domain_identity.example.verification_token]",
      "}"
    ]
  },
  "aws-resource-ses_domain_identity_verification": {
    "description": "Defines ses_domain_identity_verification",
    "prefix": "tf-aws-resource-ses_domain_identity_verification",
    "body": [
      "resource \"aws_ses_domain_identity\" \"example\" {",
      "  domain = \"example.com\"",
      "}",
      "",
      "resource \"aws_route53_record\" \"example_amazonses_verification_record\" {",
      "  zone_id = aws_route53_zone.example.zone_id",
      "  name    = \"_amazonses.${aws_ses_domain_identity.example.id}\"",
      "  type    = \"TXT\"",
      "  ttl     = \"600\"",
      "  records = [aws_ses_domain_identity.example.verification_token]",
      "}",
      "",
      "resource \"aws_ses_domain_identity_verification\" \"example_verification\" {",
      "  domain = aws_ses_domain_identity.example.id",
      "",
      "  depends_on = [aws_route53_record.example_amazonses_verification_record]",
      "}"
    ]
  },
  "aws-resource-ses_domain_mail_from": {
    "description": "Defines ses_domain_mail_from",
    "prefix": "tf-aws-resource-ses_domain_mail_from",
    "body": [
      "resource \"aws_ses_domain_mail_from\" \"example\" {",
      "  domain           = aws_ses_domain_identity.example.domain",
      "  mail_from_domain = \"bounce.${aws_ses_domain_identity.example.domain}\"",
      "}",
      "",
      "# Example SES Domain Identity",
      "resource \"aws_ses_domain_identity\" \"example\" {",
      "  domain = \"example.com\"",
      "}",
      "",
      "# Example Route53 MX record",
      "resource \"aws_route53_record\" \"example_ses_domain_mail_from_mx\" {",
      "  zone_id = aws_route53_zone.example.id",
      "  name    = aws_ses_domain_mail_from.example.mail_from_domain",
      "  type    = \"MX\"",
      "  ttl     = \"600\"",
      "  records = [\"10 feedback-smtp.us-east-1.amazonses.com\"] # Change to the region in which `aws_ses_domain_identity.example` is created",
      "}",
      "",
      "# Example Route53 TXT record for SPF",
      "resource \"aws_route53_record\" \"example_ses_domain_mail_from_txt\" {",
      "  zone_id = aws_route53_zone.example.id",
      "  name    = aws_ses_domain_mail_from.example.mail_from_domain",
      "  type    = \"TXT\"",
      "  ttl     = \"600\"",
      "  records = [\"v=spf1 include:amazonses.com -all\"]",
      "}"
    ]
  },
  "aws-resource-ses_email_identity": {
    "description": "Defines ses_email_identity",
    "prefix": "tf-aws-resource-ses_email_identity",
    "body": [
      "resource \"aws_ses_email_identity\" \"example\" {",
      "  email = \"email@example.com\"",
      "}"
    ]
  },
  "aws-resource-ses_event_destination": {
    "description": "Defines ses_event_destination",
    "prefix": "tf-aws-resource-ses_event_destination",
    "body": [
      "resource \"aws_ses_event_destination\" \"cloudwatch\" {",
      "  name                   = \"event-destination-cloudwatch\"",
      "  configuration_set_name = aws_ses_configuration_set.example.name",
      "  enabled                = true",
      "  matching_types         = [\"bounce\", \"send\"]",
      "",
      "  cloudwatch_destination {",
      "    default_value  = \"default\"",
      "    dimension_name = \"dimension\"",
      "    value_source   = \"emailHeader\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ses_identity_notification_topic": {
    "description": "Defines ses_identity_notification_topic",
    "prefix": "tf-aws-resource-ses_identity_notification_topic",
    "body": [
      "resource \"aws_ses_identity_notification_topic\" \"test\" {",
      "  topic_arn                = aws_sns_topic.example.arn",
      "  notification_type        = \"Bounce\"",
      "  identity                 = aws_ses_domain_identity.example.domain",
      "  include_original_headers = true",
      "}"
    ]
  },
  "aws-resource-ses_identity_policy": {
    "description": "Defines ses_identity_policy",
    "prefix": "tf-aws-resource-ses_identity_policy",
    "body": [
      "resource \"aws_ses_domain_identity\" \"example\" {",
      "  domain = \"example.com\"",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"example\" {",
      "  statement {",
      "    actions   = [\"SES:SendEmail\", \"SES:SendRawEmail\"]",
      "    resources = [aws_ses_domain_identity.example.arn]",
      "",
      "    principals {",
      "      identifiers = [\"*\"]",
      "      type        = \"AWS\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_ses_identity_policy\" \"example\" {",
      "  identity = aws_ses_domain_identity.example.arn",
      "  name     = \"example\"",
      "  policy   = data.aws_iam_policy_document.example.json",
      "}"
    ]
  },
  "aws-resource-ses_receipt_filter": {
    "description": "Defines ses_receipt_filter",
    "prefix": "tf-aws-resource-ses_receipt_filter",
    "body": [
      "resource \"aws_ses_receipt_filter\" \"filter\" {",
      "  name   = \"block-spammer\"",
      "  cidr   = \"10.10.10.10\"",
      "  policy = \"Block\"",
      "}"
    ]
  },
  "aws-resource-ses_receipt_rule": {
    "description": "Defines ses_receipt_rule",
    "prefix": "tf-aws-resource-ses_receipt_rule",
    "body": [
      "# Add a header to the email and store it in S3",
      "resource \"aws_ses_receipt_rule\" \"store\" {",
      "  name          = \"store\"",
      "  rule_set_name = \"default-rule-set\"",
      "  recipients    = [\"karen@example.com\"]",
      "  enabled       = true",
      "  scan_enabled  = true",
      "",
      "  add_header_action {",
      "    header_name  = \"Custom-Header\"",
      "    header_value = \"Added by SES\"",
      "    position     = 1",
      "  }",
      "",
      "  s3_action {",
      "    bucket_name = \"emails\"",
      "    position    = 2",
      "  }",
      "}"
    ]
  },
  "aws-resource-ses_receipt_rule_set": {
    "description": "Defines ses_receipt_rule_set",
    "prefix": "tf-aws-resource-ses_receipt_rule_set",
    "body": [
      "resource \"aws_ses_receipt_rule_set\" \"main\" {",
      "  rule_set_name = \"primary-rules\"",
      "}"
    ]
  },
  "aws-resource-ses_template": {
    "description": "Defines ses_template",
    "prefix": "tf-aws-resource-ses_template",
    "body": [
      "resource \"aws_ses_template\" \"MyTemplate\" {",
      "  name    = \"MyTemplate\"",
      "  subject = \"Greetings, {{name}}!\"",
      "  html    = \"<h1>Hello {{name}},</h1><p>Your favorite animal is {{favoriteanimal}}.</p>\"",
      "  text    = \"Hello {{name}},\\r\\nYour favorite animal is {{favoriteanimal}}.\"",
      "}"
    ]
  },
  "aws-resource-sfn_activity": {
    "description": "Defines sfn_activity",
    "prefix": "tf-aws-resource-sfn_activity",
    "body": [
      "resource \"aws_sfn_activity\" \"sfn_activity\" {",
      "  name = \"my-activity\"",
      "}"
    ]
  },
  "aws-resource-sfn_state_machine": {
    "description": "Defines sfn_state_machine",
    "prefix": "tf-aws-resource-sfn_state_machine",
    "body": [
      "# ...",
      "",
      "resource \"aws_sfn_state_machine\" \"sfn_state_machine\" {",
      "  name     = \"my-state-machine\"",
      "  role_arn = aws_iam_role.iam_for_sfn.arn",
      "",
      "  definition = <<EOF",
      "{",
      "  \"Comment\": \"A Hello World example of the Amazon States Language using an AWS Lambda Function\",",
      "  \"StartAt\": \"HelloWorld\",",
      "  \"States\": {",
      "    \"HelloWorld\": {",
      "      \"Type\": \"Task\",",
      "      \"Resource\": \"${aws_lambda_function.lambda.arn}\",",
      "      \"End\": true",
      "    }",
      "  }",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-shield_protection": {
    "description": "Defines shield_protection",
    "prefix": "tf-aws-resource-shield_protection",
    "body": [
      "data \"aws_availability_zones\" \"available\" {}",
      "data \"aws_region\" \"current\" {}",
      "data \"aws_caller_identity\" \"current\" {}",
      "",
      "resource \"aws_eip\" \"example\" {",
      "  vpc = true",
      "}",
      "",
      "resource \"aws_shield_protection\" \"example\" {",
      "  name         = \"example\"",
      "  resource_arn = \"arn:aws:ec2:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:eip-allocation/${aws_eip.example.id}\"",
      "}"
    ]
  },
  "aws-resource-signer_signing_job": {
    "description": "Defines signer_signing_job",
    "prefix": "tf-aws-resource-signer_signing_job",
    "body": [
      "resource \"aws_signer_signing_profile\" \"test_sp\" {",
      "  platform_id = \"AWSLambda-SHA384-ECDSA\"",
      "}",
      "",
      "resource \"aws_signer_signing_job\" \"build_signing_job\" {",
      "  profile_name = aws_signer_signing_profile.test_sp.name",
      "",
      "  source {",
      "    s3 {",
      "      bucket  = \"s3-bucket-name\"",
      "      key     = \"object-to-be-signed.zip\"",
      "      version = \"jADjFYYYEXAMPLETszPjOmCMFDzd9dN1\"",
      "    }",
      "  }",
      "",
      "  destination {",
      "    s3 {",
      "      bucket = \"s3-bucket-name\"",
      "      prefix = \"signed/\"",
      "    }",
      "  }",
      "",
      "  ignore_signing_job_failure = true",
      "}"
    ]
  },
  "aws-resource-signer_signing_profile": {
    "description": "Defines signer_signing_profile",
    "prefix": "tf-aws-resource-signer_signing_profile",
    "body": [
      "resource \"aws_signer_signing_profile\" \"test_sp\" {",
      "  platform_id = \"AWSLambda-SHA384-ECDSA\"",
      "}",
      "",
      "resource \"aws_signer_signing_profile\" \"prod_sp\" {",
      "  platform_id = \"AWSLambda-SHA384-ECDSA\"",
      "  name_prefix = \"prod_sp_\"",
      "",
      "  signature_validity_period {",
      "    value = 5",
      "    type  = \"YEARS\"",
      "  }",
      "",
      "  tags = {",
      "    tag1 = \"value1\"",
      "    tag2 = \"value2\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-signer_signing_profile_permission": {
    "description": "Defines signer_signing_profile_permission",
    "prefix": "tf-aws-resource-signer_signing_profile_permission",
    "body": [
      "resource \"aws_signer_signing_profile\" \"prod_sp\" {",
      "  platform_id = \"AWSLambda-SHA384-ECDSA\"",
      "  name_prefix = \"prod_sp_\"",
      "",
      "  signature_validity_period {",
      "    value = 5",
      "    type  = \"YEARS\"",
      "  }",
      "",
      "  tags = {",
      "    tag1 = \"value1\"",
      "    tag2 = \"value2\"",
      "  }",
      "}",
      "",
      "resource \"aws_signer_signing_profile_permission\" \"sp_permission_1\" {",
      "  profile_name = aws_signer_signing_profile.prod_sp.name",
      "  action       = \"signer:StartSigningJob\"",
      "  principal    = var.aws_account",
      "}",
      "",
      "resource \"aws_signer_signing_profile_permission\" \"sp_permission_2\" {",
      "  profile_name = aws_signer_signing_profile.prod_sp.name",
      "  action       = \"signer:GetSigningProfile\"",
      "  principal    = var.aws_team_role_arn",
      "  statement_id = \"ProdAccountStartSigningJob_StatementId\"",
      "}",
      "",
      "resource \"aws_signer_signing_profile_permission\" \"sp_permission_3\" {",
      "  profile_name        = aws_signer_signing_profile.prod_sp.name",
      "  action              = \"signer:RevokeSignature\"",
      "  principal           = \"123456789012\"",
      "  profile_version     = aws_signer_signing_profile.prod_sp.version",
      "  statement_id_prefix = \"version-permission-\"",
      "}"
    ]
  },
  "aws-resource-simpledb_domain": {
    "description": "Defines simpledb_domain",
    "prefix": "tf-aws-resource-simpledb_domain",
    "body": [
      "resource \"aws_simpledb_domain\" \"users\" {",
      "  name = \"users\"",
      "}"
    ]
  },
  "aws-resource-snapshot_create_volume_permission": {
    "description": "Defines snapshot_create_volume_permission",
    "prefix": "tf-aws-resource-snapshot_create_volume_permission",
    "body": [
      "resource \"aws_snapshot_create_volume_permission\" \"example_perm\" {",
      "  snapshot_id = aws_ebs_snapshot.example_snapshot.id",
      "  account_id  = \"12345678\"",
      "}",
      "",
      "resource \"aws_ebs_volume\" \"example\" {",
      "  availability_zone = \"us-west-2a\"",
      "  size              = 40",
      "}",
      "",
      "resource \"aws_ebs_snapshot\" \"example_snapshot\" {",
      "  volume_id = aws_ebs_volume.example.id",
      "}"
    ]
  },
  "aws-resource-sns_platform_application": {
    "description": "Defines sns_platform_application",
    "prefix": "tf-aws-resource-sns_platform_application",
    "body": [
      "resource \"aws_sns_platform_application\" \"apns_application\" {",
      "  name                = \"apns_application\"",
      "  platform            = \"APNS\"",
      "  platform_credential = \"<APNS PRIVATE KEY>\"",
      "  platform_principal  = \"<APNS CERTIFICATE>\"",
      "}"
    ]
  },
  "aws-resource-sns_sms_preferences": {
    "description": "Defines sns_sms_preferences",
    "prefix": "tf-aws-resource-sns_sms_preferences",
    "body": [
      "resource \"aws_sns_sms_preferences\" \"update_sms_prefs\" {}"
    ]
  },
  "aws-resource-sns_topic": {
    "description": "Defines sns_topic",
    "prefix": "tf-aws-resource-sns_topic",
    "body": [
      "resource \"aws_sns_topic\" \"user_updates\" {",
      "  name = \"user-updates-topic\"",
      "}"
    ]
  },
  "aws-resource-sns_topic_policy": {
    "description": "Defines sns_topic_policy",
    "prefix": "tf-aws-resource-sns_topic_policy",
    "body": [
      "resource \"aws_sns_topic\" \"test\" {",
      "  name = \"my-topic-with-policy\"",
      "}",
      "",
      "resource \"aws_sns_topic_policy\" \"default\" {",
      "  arn = aws_sns_topic.test.arn",
      "",
      "  policy = data.aws_iam_policy_document.sns_topic_policy.json",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"sns_topic_policy\" {",
      "  policy_id = \"__default_policy_ID\"",
      "",
      "  statement {",
      "    actions = [",
      "      \"SNS:Subscribe\",",
      "      \"SNS:SetTopicAttributes\",",
      "      \"SNS:RemovePermission\",",
      "      \"SNS:Receive\",",
      "      \"SNS:Publish\",",
      "      \"SNS:ListSubscriptionsByTopic\",",
      "      \"SNS:GetTopicAttributes\",",
      "      \"SNS:DeleteTopic\",",
      "      \"SNS:AddPermission\",",
      "    ]",
      "",
      "    condition {",
      "      test     = \"StringEquals\"",
      "      variable = \"AWS:SourceOwner\"",
      "",
      "      values = [",
      "        var.account-id,",
      "      ]",
      "    }",
      "",
      "    effect = \"Allow\"",
      "",
      "    principals {",
      "      type        = \"AWS\"",
      "      identifiers = [\"*\"]",
      "    }",
      "",
      "    resources = [",
      "      aws_sns_topic.test.arn,",
      "    ]",
      "",
      "    sid = \"__default_statement_ID\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-sns_topic_subscription": {
    "description": "Defines sns_topic_subscription",
    "prefix": "tf-aws-resource-sns_topic_subscription",
    "body": [
      "resource \"aws_sns_topic_subscription\" \"user_updates_sqs_target\" {",
      "  topic_arn = \"arn:aws:sns:us-west-2:432981146916:user-updates-topic\"",
      "  protocol  = \"sqs\"",
      "  endpoint  = \"arn:aws:sqs:us-west-2:432981146916:terraform-queue-too\"",
      "}"
    ]
  },
  "aws-resource-spot_datafeed_subscription": {
    "description": "Defines spot_datafeed_subscription",
    "prefix": "tf-aws-resource-spot_datafeed_subscription",
    "body": [
      "resource \"aws_s3_bucket\" \"default\" {",
      "  bucket = \"tf-spot-datafeed\"",
      "}",
      "",
      "resource \"aws_spot_datafeed_subscription\" \"default\" {",
      "  bucket = aws_s3_bucket.default.bucket",
      "  prefix = \"my_subdirectory\"",
      "}"
    ]
  },
  "aws-resource-spot_fleet_request": {
    "description": "Defines spot_fleet_request",
    "prefix": "tf-aws-resource-spot_fleet_request",
    "body": [
      "# Request a Spot fleet",
      "resource \"aws_spot_fleet_request\" \"cheap_compute\" {",
      "  iam_fleet_role      = \"arn:aws:iam::12345678:role/spot-fleet\"",
      "  spot_price          = \"0.03\"",
      "  allocation_strategy = \"diversified\"",
      "  target_capacity     = 6",
      "  valid_until         = \"2019-11-04T20:44:20Z\"",
      "",
      "  launch_specification {",
      "    instance_type            = \"m4.10xlarge\"",
      "    ami                      = \"ami-1234\"",
      "    spot_price               = \"2.793\"",
      "    placement_tenancy        = \"dedicated\"",
      "    iam_instance_profile_arn = aws_iam_instance_profile.example.arn",
      "  }",
      "",
      "  launch_specification {",
      "    instance_type            = \"m4.4xlarge\"",
      "    ami                      = \"ami-5678\"",
      "    key_name                 = \"my-key\"",
      "    spot_price               = \"1.117\"",
      "    iam_instance_profile_arn = aws_iam_instance_profile.example.arn",
      "    availability_zone        = \"us-west-1a\"",
      "    subnet_id                = \"subnet-1234\"",
      "    weighted_capacity        = 35",
      "",
      "    root_block_device {",
      "      volume_size = \"300\"",
      "      volume_type = \"gp2\"",
      "    }",
      "",
      "    tags = {",
      "      Name = \"spot-fleet-example\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-spot_instance_request": {
    "description": "Defines spot_instance_request",
    "prefix": "tf-aws-resource-spot_instance_request",
    "body": [
      "# Request a spot instance at $0.03",
      "resource \"aws_spot_instance_request\" \"cheap_worker\" {",
      "  ami           = \"ami-1234\"",
      "  spot_price    = \"0.03\"",
      "  instance_type = \"c4.xlarge\"",
      "",
      "  tags = {",
      "    Name = \"CheapWorker\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-sqs_queue": {
    "description": "Defines sqs_queue",
    "prefix": "tf-aws-resource-sqs_queue",
    "body": [
      "resource \"aws_sqs_queue\" \"terraform_queue\" {",
      "  name                      = \"terraform-example-queue\"",
      "  delay_seconds             = 90",
      "  max_message_size          = 2048",
      "  message_retention_seconds = 86400",
      "  receive_wait_time_seconds = 10",
      "  redrive_policy = jsonencode({",
      "    deadLetterTargetArn = aws_sqs_queue.terraform_queue_deadletter.arn",
      "    maxReceiveCount     = 4",
      "  })",
      "",
      "  tags = {",
      "    Environment = \"production\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-sqs_queue_policy": {
    "description": "Defines sqs_queue_policy",
    "prefix": "tf-aws-resource-sqs_queue_policy",
    "body": [
      "resource \"aws_sqs_queue\" \"q\" {",
      "  name = \"examplequeue\"",
      "}",
      "",
      "resource \"aws_sqs_queue_policy\" \"test\" {",
      "  queue_url = aws_sqs_queue.q.id",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Id\": \"sqspolicy\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"First\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": \"*\",",
      "      \"Action\": \"sqs:SendMessage\",",
      "      \"Resource\": \"${aws_sqs_queue.q.arn}\",",
      "      \"Condition\": {",
      "        \"ArnEquals\": {",
      "          \"aws:SourceArn\": \"${aws_sns_topic.example.arn}\"",
      "        }",
      "      }",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-ssm_activation": {
    "description": "Defines ssm_activation",
    "prefix": "tf-aws-resource-ssm_activation",
    "body": [
      "resource \"aws_iam_role\" \"test_role\" {",
      "  name = \"test_role\"",
      "",
      "  assume_role_policy = <<EOF",
      "  {",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": {",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {\"Service\": \"ssm.amazonaws.com\"},",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  }",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"test_attach\" {",
      "  role       = aws_iam_role.test_role.name",
      "  policy_arn = \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\"",
      "}",
      "",
      "resource \"aws_ssm_activation\" \"foo\" {",
      "  name               = \"test_ssm_activation\"",
      "  description        = \"Test\"",
      "  iam_role           = aws_iam_role.test_role.id",
      "  registration_limit = \"5\"",
      "  depends_on         = [aws_iam_role_policy_attachment.test_attach]",
      "}"
    ]
  },
  "aws-resource-ssm_association": {
    "description": "Defines ssm_association",
    "prefix": "tf-aws-resource-ssm_association",
    "body": [
      "resource \"aws_ssm_association\" \"example\" {",
      "  name = aws_ssm_document.example.name",
      "",
      "  targets {",
      "    key    = \"InstanceIds\"",
      "    values = [aws_instance.example.id]",
      "  }",
      "}"
    ]
  },
  "aws-resource-ssm_document": {
    "description": "Defines ssm_document",
    "prefix": "tf-aws-resource-ssm_document",
    "body": [
      "resource \"aws_ssm_document\" \"foo\" {",
      "  name          = \"test_document\"",
      "  document_type = \"Command\"",
      "",
      "  content = <<DOC",
      "  {",
      "    \"schemaVersion\": \"1.2\",",
      "    \"description\": \"Check ip configuration of a Linux instance.\",",
      "    \"parameters\": {",
      "",
      "    },",
      "    \"runtimeConfig\": {",
      "      \"aws:runShellScript\": {",
      "        \"properties\": [",
      "          {",
      "            \"id\": \"0.aws:runShellScript\",",
      "            \"runCommand\": [\"ifconfig\"]",
      "          }",
      "        ]",
      "      }",
      "    }",
      "  }",
      "DOC",
      "}"
    ]
  },
  "aws-resource-ssm_maintenance_window": {
    "description": "Defines ssm_maintenance_window",
    "prefix": "tf-aws-resource-ssm_maintenance_window",
    "body": [
      "resource \"aws_ssm_maintenance_window\" \"production\" {",
      "  name     = \"maintenance-window-application\"",
      "  schedule = \"cron(0 16 ? * TUE *)\"",
      "  duration = 3",
      "  cutoff   = 1",
      "}"
    ]
  },
  "aws-resource-ssm_maintenance_window_target": {
    "description": "Defines ssm_maintenance_window_target",
    "prefix": "tf-aws-resource-ssm_maintenance_window_target",
    "body": [
      "resource \"aws_ssm_maintenance_window\" \"window\" {",
      "  name     = \"maintenance-window-webapp\"",
      "  schedule = \"cron(0 16 ? * TUE *)\"",
      "  duration = 3",
      "  cutoff   = 1",
      "}",
      "",
      "resource \"aws_ssm_maintenance_window_target\" \"target1\" {",
      "  window_id     = aws_ssm_maintenance_window.window.id",
      "  name          = \"maintenance-window-target\"",
      "  description   = \"This is a maintenance window target\"",
      "  resource_type = \"INSTANCE\"",
      "",
      "  targets {",
      "    key    = \"tag:Name\"",
      "    values = [\"acceptance_test\"]",
      "  }",
      "}"
    ]
  },
  "aws-resource-ssm_maintenance_window_task": {
    "description": "Defines ssm_maintenance_window_task",
    "prefix": "tf-aws-resource-ssm_maintenance_window_task",
    "body": [
      "resource \"aws_ssm_maintenance_window_task\" \"example\" {",
      "  max_concurrency = 2",
      "  max_errors      = 1",
      "  priority        = 1",
      "  task_arn        = \"AWS-RestartEC2Instance\"",
      "  task_type       = \"AUTOMATION\"",
      "  window_id       = aws_ssm_maintenance_window.example.id",
      "",
      "  targets {",
      "    key    = \"InstanceIds\"",
      "    values = [aws_instance.example.id]",
      "  }",
      "",
      "  task_invocation_parameters {",
      "    automation_parameters {",
      "      document_version = \"$LATEST\"",
      "",
      "      parameter {",
      "        name   = \"InstanceId\"",
      "        values = [aws_instance.example.id]",
      "      }",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-ssm_parameter": {
    "description": "Defines ssm_parameter",
    "prefix": "tf-aws-resource-ssm_parameter",
    "body": [
      "resource \"aws_ssm_parameter\" \"foo\" {",
      "  name  = \"foo\"",
      "  type  = \"String\"",
      "  value = \"bar\"",
      "}"
    ]
  },
  "aws-resource-ssm_patch_baseline": {
    "description": "Defines ssm_patch_baseline",
    "prefix": "tf-aws-resource-ssm_patch_baseline",
    "body": [
      "resource \"aws_ssm_patch_baseline\" \"production\" {",
      "  name             = \"patch-baseline\"",
      "  approved_patches = [\"KB123456\"]",
      "}"
    ]
  },
  "aws-resource-ssm_patch_group": {
    "description": "Defines ssm_patch_group",
    "prefix": "tf-aws-resource-ssm_patch_group",
    "body": [
      "resource \"aws_ssm_patch_baseline\" \"production\" {",
      "  name             = \"patch-baseline\"",
      "  approved_patches = [\"KB123456\"]",
      "}",
      "",
      "resource \"aws_ssm_patch_group\" \"patchgroup\" {",
      "  baseline_id = aws_ssm_patch_baseline.production.id",
      "  patch_group = \"patch-group-name\"",
      "}"
    ]
  },
  "aws-resource-ssm_resource_data_sync": {
    "description": "Defines ssm_resource_data_sync",
    "prefix": "tf-aws-resource-ssm_resource_data_sync",
    "body": [
      "resource \"aws_s3_bucket\" \"hoge\" {",
      "  bucket = \"tf-test-bucket-1234\"",
      "}",
      "",
      "resource \"aws_s3_bucket_policy\" \"hoge\" {",
      "  bucket = aws_s3_bucket.hoge.bucket",
      "",
      "  policy = <<EOF",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "        {",
      "            \"Sid\": \"SSMBucketPermissionsCheck\",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": {",
      "                \"Service\": \"ssm.amazonaws.com\"",
      "            },",
      "            \"Action\": \"s3:GetBucketAcl\",",
      "            \"Resource\": \"arn:aws:s3:::tf-test-bucket-1234\"",
      "        },",
      "        {",
      "            \"Sid\": \" SSMBucketDelivery\",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": {",
      "                \"Service\": \"ssm.amazonaws.com\"",
      "            },",
      "            \"Action\": \"s3:PutObject\",",
      "            \"Resource\": [\"arn:aws:s3:::tf-test-bucket-1234/*\"],",
      "            \"Condition\": {",
      "                \"StringEquals\": {",
      "                    \"s3:x-amz-acl\": \"bucket-owner-full-control\"",
      "                }",
      "            }",
      "        }",
      "    ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_ssm_resource_data_sync\" \"foo\" {",
      "  name = \"foo\"",
      "",
      "  s3_destination {",
      "    bucket_name = aws_s3_bucket.hoge.bucket",
      "    region      = aws_s3_bucket.hoge.region",
      "  }",
      "}"
    ]
  },
  "aws-resource-ssoadmin_account_assignment": {
    "description": "Defines ssoadmin_account_assignment",
    "prefix": "tf-aws-resource-ssoadmin_account_assignment",
    "body": [
      "data \"aws_ssoadmin_instances\" \"example\" {}",
      "",
      "data \"aws_ssoadmin_permission_set\" \"example\" {",
      "  instance_arn = tolist(data.aws_ssoadmin_instances.example.arns)[0]",
      "  name         = \"AWSReadOnlyAccess\"",
      "}",
      "",
      "data \"aws_identitystore_group\" \"example\" {",
      "  identity_store_id = tolist(data.aws_ssoadmin_instances.example.identity_store_ids)[0]",
      "",
      "  filter {",
      "    attribute_path  = \"DisplayName\"",
      "    attribute_value = \"ExampleGroup\"",
      "  }",
      "}",
      "",
      "resource \"aws_ssoadmin_account_assignment\" \"example\" {",
      "  instance_arn       = data.aws_ssoadmin_permission_set.example.instance_arn",
      "  permission_set_arn = data.aws_ssoadmin_permission_set.example.arn",
      "",
      "  principal_id   = data.aws_identitystore_group.example.group_id",
      "  principal_type = \"GROUP\"",
      "",
      "  target_id   = \"012347678910\"",
      "  target_type = \"AWS_ACCOUNT\"",
      "}"
    ]
  },
  "aws-resource-ssoadmin_managed_policy_attachment": {
    "description": "Defines ssoadmin_managed_policy_attachment",
    "prefix": "tf-aws-resource-ssoadmin_managed_policy_attachment",
    "body": [
      "data \"aws_ssoadmin_instances\" \"example\" {}",
      "",
      "resource \"aws_ssoadmin_permission_set\" \"example\" {",
      "  name         = \"Example\"",
      "  instance_arn = tolist(data.aws_ssoadmin_instances.example.arns)[0]",
      "}",
      "",
      "resource \"aws_ssoadmin_managed_policy_attachment\" \"example\" {",
      "  instance_arn       = aws_ssoadmin_permission_set.example.instance_arn",
      "  managed_policy_arn = \"arn:aws:iam::aws:policy/AlexaForBusinessDeviceSetup\"",
      "  permission_set_arn = aws_ssoadmin_permission_set.example.arn",
      "}"
    ]
  },
  "aws-resource-ssoadmin_permission_set": {
    "description": "Defines ssoadmin_permission_set",
    "prefix": "tf-aws-resource-ssoadmin_permission_set",
    "body": [
      "data \"aws_ssoadmin_instances\" \"example\" {}",
      "",
      "resource \"aws_ssoadmin_permission_set\" \"example\" {",
      "  name             = \"Example\"",
      "  description      = \"An example\"",
      "  instance_arn     = tolist(data.aws_ssoadmin_instances.example.arns)[0]",
      "  relay_state      = \"https://s3.console.aws.amazon.com/s3/home?region=us-east-1#\"",
      "  session_duration = \"PT2H\"",
      "}"
    ]
  },
  "aws-resource-ssoadmin_permission_set_inline_policy": {
    "description": "Defines ssoadmin_permission_set_inline_policy",
    "prefix": "tf-aws-resource-ssoadmin_permission_set_inline_policy",
    "body": [
      "data \"aws_ssoadmin_instances\" \"example\" {}",
      "",
      "resource \"aws_ssoadmin_permission_set\" \"example\" {",
      "  name         = \"Example\"",
      "  instance_arn = tolist(data.aws_ssoadmin_instances.example.arns)[0]",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"example\" {",
      "  statement {",
      "    sid = \"1\"",
      "",
      "    actions = [",
      "      \"s3:ListAllMyBuckets\",",
      "      \"s3:GetBucketLocation\",",
      "    ]",
      "",
      "    resources = [",
      "      \"arn:aws:s3:::*\",",
      "    ]",
      "  }",
      "}",
      "",
      "resource \"aws_ssoadmin_permission_set_inline_policy\" \"example\" {",
      "  inline_policy      = data.aws_iam_policy_document.example.json",
      "  instance_arn       = aws_ssoadmin_permission_set.example.instance_arn",
      "  permission_set_arn = aws_ssoadmin_permission_set.example.arn",
      "}"
    ]
  },
  "aws-resource-storagegateway_cache": {
    "description": "Defines storagegateway_cache",
    "prefix": "tf-aws-resource-storagegateway_cache",
    "body": [
      "resource \"aws_storagegateway_cache\" \"example\" {",
      "  disk_id     = data.aws_storagegateway_local_disk.example.id",
      "  gateway_arn = aws_storagegateway_gateway.example.arn",
      "}"
    ]
  },
  "aws-resource-storagegateway_cached_iscsi_volume": {
    "description": "Defines storagegateway_cached_iscsi_volume",
    "prefix": "tf-aws-resource-storagegateway_cached_iscsi_volume",
    "body": [
      "resource \"aws_storagegateway_cached_iscsi_volume\" \"example\" {",
      "  gateway_arn          = aws_storagegateway_cache.example.gateway_arn",
      "  network_interface_id = aws_instance.example.private_ip",
      "  target_name          = \"example\"",
      "  volume_size_in_bytes = 5368709120 # 5 GB",
      "}"
    ]
  },
  "aws-resource-storagegateway_gateway": {
    "description": "Defines storagegateway_gateway",
    "prefix": "tf-aws-resource-storagegateway_gateway",
    "body": [
      "resource \"aws_storagegateway_gateway\" \"example\" {",
      "  gateway_ip_address = \"1.2.3.4\"",
      "  gateway_name       = \"example\"",
      "  gateway_timezone   = \"GMT\"",
      "  gateway_type       = \"FILE_S3\"",
      "}"
    ]
  },
  "aws-resource-storagegateway_nfs_file_share": {
    "description": "Defines storagegateway_nfs_file_share",
    "prefix": "tf-aws-resource-storagegateway_nfs_file_share",
    "body": [
      "resource \"aws_storagegateway_nfs_file_share\" \"example\" {",
      "  client_list  = [\"0.0.0.0/0\"]",
      "  gateway_arn  = aws_storagegateway_gateway.example.arn",
      "  location_arn = aws_s3_bucket.example.arn",
      "  role_arn     = aws_iam_role.example.arn",
      "}"
    ]
  },
  "aws-resource-storagegateway_smb_file_share": {
    "description": "Defines storagegateway_smb_file_share",
    "prefix": "tf-aws-resource-storagegateway_smb_file_share",
    "body": [
      "resource \"aws_storagegateway_smb_file_share\" \"example\" {",
      "  authentication = \"ActiveDirectory\"",
      "  gateway_arn    = aws_storagegateway_gateway.example.arn",
      "  location_arn   = aws_s3_bucket.example.arn",
      "  role_arn       = aws_iam_role.example.arn",
      "}"
    ]
  },
  "aws-resource-storagegateway_stored_iscsi_volume": {
    "description": "Defines storagegateway_stored_iscsi_volume",
    "prefix": "tf-aws-resource-storagegateway_stored_iscsi_volume",
    "body": [
      "resource \"aws_storagegateway_stored_iscsi_volume\" \"example\" {",
      "  gateway_arn            = aws_storagegateway_cache.example.gateway_arn",
      "  network_interface_id   = aws_instance.example.private_ip",
      "  target_name            = \"example\"",
      "  preserve_existing_data = false",
      "  disk_id                = data.aws_storagegateway_local_disk.test.id",
      "}"
    ]
  },
  "aws-resource-storagegateway_tape_pool": {
    "description": "Defines storagegateway_tape_pool",
    "prefix": "tf-aws-resource-storagegateway_tape_pool",
    "body": [
      "resource \"aws_storagegateway_tape_pool\" \"example\" {",
      "  pool_name     = \"example\"",
      "  storage_class = \"GLACIER\"",
      "}"
    ]
  },
  "aws-resource-storagegateway_upload_buffer": {
    "description": "Defines storagegateway_upload_buffer",
    "prefix": "tf-aws-resource-storagegateway_upload_buffer",
    "body": [
      "resource \"aws_storagegateway_upload_buffer\" \"example\" {",
      "  disk_id     = data.aws_storagegateway_local_disk.example.id",
      "  gateway_arn = aws_storagegateway_gateway.example.arn",
      "}"
    ]
  },
  "aws-resource-storagegateway_working_storage": {
    "description": "Defines storagegateway_working_storage",
    "prefix": "tf-aws-resource-storagegateway_working_storage",
    "body": [
      "resource \"aws_storagegateway_working_storage\" \"example\" {",
      "  disk_id     = data.aws_storagegateway_local_disk.example.id",
      "  gateway_arn = aws_storagegateway_gateway.example.arn",
      "}"
    ]
  },
  "aws-resource-subnet": {
    "description": "Defines subnet",
    "prefix": "tf-aws-resource-subnet",
    "body": [
      "resource \"aws_subnet\" \"main\" {",
      "  vpc_id     = aws_vpc.main.id",
      "  cidr_block = \"10.0.1.0/24\"",
      "",
      "  tags = {",
      "    Name = \"Main\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-swf_domain": {
    "description": "Defines swf_domain",
    "prefix": "tf-aws-resource-swf_domain",
    "body": [
      "resource \"aws_swf_domain\" \"foo\" {",
      "  name                                        = \"foo\"",
      "  description                                 = \"Terraform SWF Domain\"",
      "  workflow_execution_retention_period_in_days = 30",
      "}"
    ]
  },
  "aws-resource-synthetics_canary": {
    "description": "Defines synthetics_canary",
    "prefix": "tf-aws-resource-synthetics_canary",
    "body": [
      "resource \"aws_synthetics_canary\" \"some\" {",
      "  name                 = \"some-canary\"",
      "  artifact_s3_location = \"s3://some-bucket/\"",
      "  execution_role_arn   = \"some-role\"",
      "  handler              = \"exports.handler\"",
      "  zip_file             = \"test-fixtures/lambdatest.zip\"",
      "  runtime_version      = \"syn-1.0\"",
      "",
      "  schedule {",
      "    expression = \"rate(0 minute)\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-transfer_server": {
    "description": "Defines transfer_server",
    "prefix": "tf-aws-resource-transfer_server",
    "body": [
      "resource \"aws_transfer_server\" \"example\" {",
      "  identity_provider_type = \"SERVICE_MANAGED\"",
      "  logging_role           = aws_iam_role.example.arn",
      "",
      "  tags = {",
      "    NAME = \"tf-acc-test-transfer-server\"",
      "    ENV  = \"test\"",
      "  }",
      "}",
      "",
      "resource \"aws_iam_role\" \"example\" {",
      "  name = \"tf-test-transfer-server-iam-role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "\t\"Version\": \"2012-10-17\",",
      "\t\"Statement\": [",
      "\t\t{",
      "\t\t\"Effect\": \"Allow\",",
      "\t\t\"Principal\": {",
      "\t\t\t\"Service\": \"transfer.amazonaws.com\"",
      "\t\t},",
      "\t\t\"Action\": \"sts:AssumeRole\"",
      "\t\t}",
      "\t]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"example\" {",
      "  name = \"tf-test-transfer-server-iam-policy\"",
      "  role = aws_iam_role.example.id",
      "",
      "  policy = <<POLICY",
      "{",
      "\t\"Version\": \"2012-10-17\",",
      "\t\"Statement\": [",
      "\t\t{",
      "\t\t\"Sid\": \"AllowFullAccesstoCloudWatchLogs\",",
      "\t\t\"Effect\": \"Allow\",",
      "\t\t\"Action\": [",
      "\t\t\t\"logs:*\"",
      "\t\t],",
      "\t\t\"Resource\": \"*\"",
      "\t\t}",
      "\t]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-transfer_ssh_key": {
    "description": "Defines transfer_ssh_key",
    "prefix": "tf-aws-resource-transfer_ssh_key",
    "body": [
      "resource \"aws_transfer_ssh_key\" \"example\" {",
      "  server_id = aws_transfer_server.example.id",
      "  user_name = aws_transfer_user.example.user_name",
      "  body      = \"... SSH key ...\"",
      "}",
      "",
      "resource \"aws_transfer_server\" \"example\" {",
      "  identity_provider_type = \"SERVICE_MANAGED\"",
      "",
      "  tags = {",
      "    NAME = \"tf-acc-test-transfer-server\"",
      "  }",
      "}",
      "",
      "resource \"aws_transfer_user\" \"example\" {",
      "  server_id = aws_transfer_server.example.id",
      "  user_name = \"tftestuser\"",
      "  role      = aws_iam_role.example.arn",
      "",
      "  tags = {",
      "    NAME = \"tftestuser\"",
      "  }",
      "}",
      "",
      "resource \"aws_iam_role\" \"example\" {",
      "  name = \"tf-test-transfer-user-iam-role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "\t\"Version\": \"2012-10-17\",",
      "\t\"Statement\": [",
      "\t\t{",
      "\t\t\"Effect\": \"Allow\",",
      "\t\t\"Principal\": {",
      "\t\t\t\"Service\": \"transfer.amazonaws.com\"",
      "\t\t},",
      "\t\t\"Action\": \"sts:AssumeRole\"",
      "\t\t}",
      "\t]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"example\" {",
      "  name = \"tf-test-transfer-user-iam-policy\"",
      "  role = aws_iam_role.example.id",
      "",
      "  policy = <<POLICY",
      "{",
      "\t\"Version\": \"2012-10-17\",",
      "\t\"Statement\": [",
      "\t\t{",
      "\t\t\t\"Sid\": \"AllowFullAccesstoS3\",",
      "\t\t\t\"Effect\": \"Allow\",",
      "\t\t\t\"Action\": [",
      "\t\t\t\t\"s3:*\"",
      "\t\t\t],",
      "\t\t\t\"Resource\": \"*\"",
      "\t\t}",
      "\t]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-transfer_user": {
    "description": "Defines transfer_user",
    "prefix": "tf-aws-resource-transfer_user",
    "body": [
      "resource \"aws_transfer_server\" \"foo\" {",
      "  identity_provider_type = \"SERVICE_MANAGED\"",
      "",
      "  tags = {",
      "    NAME = \"tf-acc-test-transfer-server\"",
      "  }",
      "}",
      "",
      "resource \"aws_iam_role\" \"foo\" {",
      "  name = \"tf-test-transfer-user-iam-role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "\t\"Version\": \"2012-10-17\",",
      "\t\"Statement\": [",
      "\t\t{",
      "\t\t\"Effect\": \"Allow\",",
      "\t\t\"Principal\": {",
      "\t\t\t\"Service\": \"transfer.amazonaws.com\"",
      "\t\t},",
      "\t\t\"Action\": \"sts:AssumeRole\"",
      "\t\t}",
      "\t]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"foo\" {",
      "  name = \"tf-test-transfer-user-iam-policy\"",
      "  role = aws_iam_role.foo.id",
      "",
      "  policy = <<POLICY",
      "{",
      "\t\"Version\": \"2012-10-17\",",
      "\t\"Statement\": [",
      "\t\t{",
      "\t\t\t\"Sid\": \"AllowFullAccesstoS3\",",
      "\t\t\t\"Effect\": \"Allow\",",
      "\t\t\t\"Action\": [",
      "\t\t\t\t\"s3:*\"",
      "\t\t\t],",
      "\t\t\t\"Resource\": \"*\"",
      "\t\t}",
      "\t]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_transfer_user\" \"foo\" {",
      "  server_id = aws_transfer_server.foo.id",
      "  user_name = \"tftestuser\"",
      "  role      = aws_iam_role.foo.arn",
      "",
      "  home_directory_type = \"LOGICAL\"",
      "  home_directory_mappings {",
      "    entry  = \"/test.pdf\"",
      "    target = \"/bucket3/test-path/tftestuser.pdf\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-volume_attachment": {
    "description": "Defines volume_attachment",
    "prefix": "tf-aws-resource-volume_attachment",
    "body": [
      "resource \"aws_volume_attachment\" \"ebs_att\" {",
      "  device_name = \"/dev/sdh\"",
      "  volume_id   = aws_ebs_volume.example.id",
      "  instance_id = aws_instance.web.id",
      "}",
      "",
      "resource \"aws_instance\" \"web\" {",
      "  ami               = \"ami-21f78e11\"",
      "  availability_zone = \"us-west-2a\"",
      "  instance_type     = \"t2.micro\"",
      "",
      "  tags = {",
      "    Name = \"HelloWorld\"",
      "  }",
      "}",
      "",
      "resource \"aws_ebs_volume\" \"example\" {",
      "  availability_zone = \"us-west-2a\"",
      "  size              = 1",
      "}"
    ]
  },
  "aws-resource-vpc": {
    "description": "Defines vpc",
    "prefix": "tf-aws-resource-vpc",
    "body": [
      "resource \"aws_vpc\" \"main\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}"
    ]
  },
  "aws-resource-vpc_dhcp_options": {
    "description": "Defines vpc_dhcp_options",
    "prefix": "tf-aws-resource-vpc_dhcp_options",
    "body": [
      "resource \"aws_vpc_dhcp_options\" \"dns_resolver\" {",
      "  domain_name_servers = [\"8.8.8.8\", \"8.8.4.4\"]",
      "}"
    ]
  },
  "aws-resource-vpc_dhcp_options_association": {
    "description": "Defines vpc_dhcp_options_association",
    "prefix": "tf-aws-resource-vpc_dhcp_options_association",
    "body": [
      "resource \"aws_vpc_dhcp_options_association\" \"dns_resolver\" {",
      "  vpc_id          = aws_vpc.foo.id",
      "  dhcp_options_id = aws_vpc_dhcp_options.foo.id",
      "}"
    ]
  },
  "aws-resource-vpc_endpoint": {
    "description": "Defines vpc_endpoint",
    "prefix": "tf-aws-resource-vpc_endpoint",
    "body": [
      "resource \"aws_vpc_endpoint\" \"s3\" {",
      "  vpc_id       = aws_vpc.main.id",
      "  service_name = \"com.amazonaws.us-west-2.s3\"",
      "}"
    ]
  },
  "aws-resource-vpc_endpoint_connection_notification": {
    "description": "Defines vpc_endpoint_connection_notification",
    "prefix": "tf-aws-resource-vpc_endpoint_connection_notification",
    "body": [
      "resource \"aws_sns_topic\" \"topic\" {",
      "  name = \"vpce-notification-topic\"",
      "",
      "  policy = <<POLICY",
      "{",
      "    \"Version\":\"2012-10-17\",",
      "    \"Statement\":[{",
      "        \"Effect\": \"Allow\",",
      "        \"Principal\": {",
      "            \"Service\": \"vpce.amazonaws.com\"",
      "        },",
      "        \"Action\": \"SNS:Publish\",",
      "        \"Resource\": \"arn:aws:sns:*:*:vpce-notification-topic\"",
      "    }]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_vpc_endpoint_service\" \"foo\" {",
      "  acceptance_required        = false",
      "  network_load_balancer_arns = [aws_lb.test.arn]",
      "}",
      "",
      "resource \"aws_vpc_endpoint_connection_notification\" \"foo\" {",
      "  vpc_endpoint_service_id     = aws_vpc_endpoint_service.foo.id",
      "  connection_notification_arn = aws_sns_topic.topic.arn",
      "  connection_events           = [\"Accept\", \"Reject\"]",
      "}"
    ]
  },
  "aws-resource-vpc_endpoint_route_table_association": {
    "description": "Defines vpc_endpoint_route_table_association",
    "prefix": "tf-aws-resource-vpc_endpoint_route_table_association",
    "body": [
      "resource \"aws_vpc_endpoint_route_table_association\" \"example\" {",
      "  route_table_id  = aws_route_table.example.id",
      "  vpc_endpoint_id = aws_vpc_endpoint.example.id",
      "}"
    ]
  },
  "aws-resource-vpc_endpoint_service": {
    "description": "Defines vpc_endpoint_service",
    "prefix": "tf-aws-resource-vpc_endpoint_service",
    "body": [
      "resource \"aws_vpc_endpoint_service\" \"example\" {",
      "  acceptance_required        = false",
      "  network_load_balancer_arns = [aws_lb.example.arn]",
      "}"
    ]
  },
  "aws-resource-vpc_endpoint_service_allowed_principal": {
    "description": "Defines vpc_endpoint_service_allowed_principal",
    "prefix": "tf-aws-resource-vpc_endpoint_service_allowed_principal",
    "body": [
      "data \"aws_caller_identity\" \"current\" {}",
      "",
      "resource \"aws_vpc_endpoint_service_allowed_principal\" \"allow_me_to_foo\" {",
      "  vpc_endpoint_service_id = aws_vpc_endpoint_service.foo.id",
      "  principal_arn           = data.aws_caller_identity.current.arn",
      "}"
    ]
  },
  "aws-resource-vpc_endpoint_subnet_association": {
    "description": "Defines vpc_endpoint_subnet_association",
    "prefix": "tf-aws-resource-vpc_endpoint_subnet_association",
    "body": [
      "resource \"aws_vpc_endpoint_subnet_association\" \"sn_ec2\" {",
      "  vpc_endpoint_id = aws_vpc_endpoint.ec2.id",
      "  subnet_id       = aws_subnet.sn.id",
      "}"
    ]
  },
  "aws-resource-vpc_ipv4_cidr_block_association": {
    "description": "Defines vpc_ipv4_cidr_block_association",
    "prefix": "tf-aws-resource-vpc_ipv4_cidr_block_association",
    "body": [
      "resource \"aws_vpc\" \"main\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_vpc_ipv4_cidr_block_association\" \"secondary_cidr\" {",
      "  vpc_id     = aws_vpc.main.id",
      "  cidr_block = \"172.2.0.0/16\"",
      "}"
    ]
  },
  "aws-resource-vpc_peering_connection": {
    "description": "Defines vpc_peering_connection",
    "prefix": "tf-aws-resource-vpc_peering_connection",
    "body": [
      "resource \"aws_vpc_peering_connection\" \"foo\" {",
      "  peer_owner_id = var.peer_owner_id",
      "  peer_vpc_id   = aws_vpc.bar.id",
      "  vpc_id        = aws_vpc.foo.id",
      "}"
    ]
  },
  "aws-resource-vpc_peering_connection_accepter": {
    "description": "Defines vpc_peering_connection_accepter",
    "prefix": "tf-aws-resource-vpc_peering_connection_accepter",
    "body": [
      "provider \"aws\" {",
      "  region = \"us-east-1\"",
      "",
      "  # Requester's credentials.",
      "}",
      "",
      "provider \"aws\" {",
      "  alias  = \"peer\"",
      "  region = \"us-west-2\"",
      "",
      "  # Accepter's credentials.",
      "}",
      "",
      "resource \"aws_vpc\" \"main\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_vpc\" \"peer\" {",
      "  provider   = aws.peer",
      "  cidr_block = \"10.1.0.0/16\"",
      "}",
      "",
      "data \"aws_caller_identity\" \"peer\" {",
      "  provider = aws.peer",
      "}",
      "",
      "# Requester's side of the connection.",
      "resource \"aws_vpc_peering_connection\" \"peer\" {",
      "  vpc_id        = aws_vpc.main.id",
      "  peer_vpc_id   = aws_vpc.peer.id",
      "  peer_owner_id = data.aws_caller_identity.peer.account_id",
      "  peer_region   = \"us-west-2\"",
      "  auto_accept   = false",
      "",
      "  tags = {",
      "    Side = \"Requester\"",
      "  }",
      "}",
      "",
      "# Accepter's side of the connection.",
      "resource \"aws_vpc_peering_connection_accepter\" \"peer\" {",
      "  provider                  = aws.peer",
      "  vpc_peering_connection_id = aws_vpc_peering_connection.peer.id",
      "  auto_accept               = true",
      "",
      "  tags = {",
      "    Side = \"Accepter\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-vpc_peering_connection_options": {
    "description": "Defines vpc_peering_connection_options",
    "prefix": "tf-aws-resource-vpc_peering_connection_options",
    "body": [
      "resource \"aws_vpc\" \"foo\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_vpc\" \"bar\" {",
      "  cidr_block = \"10.1.0.0/16\"",
      "}",
      "",
      "resource \"aws_vpc_peering_connection\" \"foo\" {",
      "  vpc_id      = aws_vpc.foo.id",
      "  peer_vpc_id = aws_vpc.bar.id",
      "  auto_accept = true",
      "}",
      "",
      "resource \"aws_vpc_peering_connection_options\" \"foo\" {",
      "  vpc_peering_connection_id = aws_vpc_peering_connection.foo.id",
      "",
      "  accepter {",
      "    allow_remote_vpc_dns_resolution = true",
      "  }",
      "",
      "  requester {",
      "    allow_vpc_to_remote_classic_link = true",
      "    allow_classic_link_to_remote_vpc = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-vpn_connection": {
    "description": "Defines vpn_connection",
    "prefix": "tf-aws-resource-vpn_connection",
    "body": [
      "resource \"aws_ec2_transit_gateway\" \"example\" {}",
      "",
      "resource \"aws_customer_gateway\" \"example\" {",
      "  bgp_asn    = 65000",
      "  ip_address = \"172.0.0.1\"",
      "  type       = \"ipsec.1\"",
      "}",
      "",
      "resource \"aws_vpn_connection\" \"example\" {",
      "  customer_gateway_id = aws_customer_gateway.example.id",
      "  transit_gateway_id  = aws_ec2_transit_gateway.example.id",
      "  type                = aws_customer_gateway.example.type",
      "}"
    ]
  },
  "aws-resource-vpn_connection_route": {
    "description": "Defines vpn_connection_route",
    "prefix": "tf-aws-resource-vpn_connection_route",
    "body": [
      "resource \"aws_vpc\" \"vpc\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_vpn_gateway\" \"vpn_gateway\" {",
      "  vpc_id = aws_vpc.vpc.id",
      "}",
      "",
      "resource \"aws_customer_gateway\" \"customer_gateway\" {",
      "  bgp_asn    = 65000",
      "  ip_address = \"172.0.0.1\"",
      "  type       = \"ipsec.1\"",
      "}",
      "",
      "resource \"aws_vpn_connection\" \"main\" {",
      "  vpn_gateway_id      = aws_vpn_gateway.vpn_gateway.id",
      "  customer_gateway_id = aws_customer_gateway.customer_gateway.id",
      "  type                = \"ipsec.1\"",
      "  static_routes_only  = true",
      "}",
      "",
      "resource \"aws_vpn_connection_route\" \"office\" {",
      "  destination_cidr_block = \"192.168.10.0/24\"",
      "  vpn_connection_id      = aws_vpn_connection.main.id",
      "}"
    ]
  },
  "aws-resource-vpn_gateway": {
    "description": "Defines vpn_gateway",
    "prefix": "tf-aws-resource-vpn_gateway",
    "body": [
      "resource \"aws_vpn_gateway\" \"vpn_gw\" {",
      "  vpc_id = aws_vpc.main.id",
      "",
      "  tags = {",
      "    Name = \"main\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-vpn_gateway_attachment": {
    "description": "Defines vpn_gateway_attachment",
    "prefix": "tf-aws-resource-vpn_gateway_attachment",
    "body": [
      "resource \"aws_vpc\" \"network\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_vpn_gateway\" \"vpn\" {",
      "  tags = {",
      "    Name = \"example-vpn-gateway\"",
      "  }",
      "}",
      "",
      "resource \"aws_vpn_gateway_attachment\" \"vpn_attachment\" {",
      "  vpc_id         = aws_vpc.network.id",
      "  vpn_gateway_id = aws_vpn_gateway.vpn.id",
      "}"
    ]
  },
  "aws-resource-vpn_gateway_route_propagation": {
    "description": "Defines vpn_gateway_route_propagation",
    "prefix": "tf-aws-resource-vpn_gateway_route_propagation",
    "body": [
      "resource \"aws_vpn_gateway_route_propagation\" \"example\" {",
      "  vpn_gateway_id = aws_vpn_gateway.example.id",
      "  route_table_id = aws_route_table.example.id",
      "}"
    ]
  },
  "aws-resource-waf_byte_match_set": {
    "description": "Defines waf_byte_match_set",
    "prefix": "tf-aws-resource-waf_byte_match_set",
    "body": [
      "resource \"aws_waf_byte_match_set\" \"byte_set\" {",
      "  name = \"tf_waf_byte_match_set\"",
      "",
      "  byte_match_tuples {",
      "    text_transformation   = \"NONE\"",
      "    target_string         = \"badrefer1\"",
      "    positional_constraint = \"CONTAINS\"",
      "",
      "    field_to_match {",
      "      type = \"HEADER\"",
      "      data = \"referer\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_geo_match_set": {
    "description": "Defines waf_geo_match_set",
    "prefix": "tf-aws-resource-waf_geo_match_set",
    "body": [
      "resource \"aws_waf_geo_match_set\" \"geo_match_set\" {",
      "  name = \"geo_match_set\"",
      "",
      "  geo_match_constraint {",
      "    type  = \"Country\"",
      "    value = \"US\"",
      "  }",
      "",
      "  geo_match_constraint {",
      "    type  = \"Country\"",
      "    value = \"CA\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_ipset": {
    "description": "Defines waf_ipset",
    "prefix": "tf-aws-resource-waf_ipset",
    "body": [
      "resource \"aws_waf_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptors {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "",
      "  ip_set_descriptors {",
      "    type  = \"IPV4\"",
      "    value = \"10.16.16.0/16\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_rate_based_rule": {
    "description": "Defines waf_rate_based_rule",
    "prefix": "tf-aws-resource-waf_rate_based_rule",
    "body": [
      "resource \"aws_waf_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptors {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}",
      "",
      "resource \"aws_waf_rate_based_rule\" \"wafrule\" {",
      "  depends_on  = [aws_waf_ipset.ipset]",
      "  name        = \"tfWAFRule\"",
      "  metric_name = \"tfWAFRule\"",
      "",
      "  rate_key   = \"IP\"",
      "  rate_limit = 100",
      "",
      "  predicates {",
      "    data_id = aws_waf_ipset.ipset.id",
      "    negated = false",
      "    type    = \"IPMatch\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_regex_match_set": {
    "description": "Defines waf_regex_match_set",
    "prefix": "tf-aws-resource-waf_regex_match_set",
    "body": [
      "resource \"aws_waf_regex_match_set\" \"example\" {",
      "  name = \"example\"",
      "",
      "  regex_match_tuple {",
      "    field_to_match {",
      "      data = \"User-Agent\"",
      "      type = \"HEADER\"",
      "    }",
      "",
      "    regex_pattern_set_id = aws_waf_regex_pattern_set.example.id",
      "    text_transformation  = \"NONE\"",
      "  }",
      "}",
      "",
      "resource \"aws_waf_regex_pattern_set\" \"example\" {",
      "  name                  = \"example\"",
      "  regex_pattern_strings = [\"one\", \"two\"]",
      "}"
    ]
  },
  "aws-resource-waf_regex_pattern_set": {
    "description": "Defines waf_regex_pattern_set",
    "prefix": "tf-aws-resource-waf_regex_pattern_set",
    "body": [
      "resource \"aws_waf_regex_pattern_set\" \"example\" {",
      "  name                  = \"tf_waf_regex_pattern_set\"",
      "  regex_pattern_strings = [\"one\", \"two\"]",
      "}"
    ]
  },
  "aws-resource-waf_rule": {
    "description": "Defines waf_rule",
    "prefix": "tf-aws-resource-waf_rule",
    "body": [
      "resource \"aws_waf_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptors {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}",
      "",
      "resource \"aws_waf_rule\" \"wafrule\" {",
      "  depends_on  = [aws_waf_ipset.ipset]",
      "  name        = \"tfWAFRule\"",
      "  metric_name = \"tfWAFRule\"",
      "",
      "  predicates {",
      "    data_id = aws_waf_ipset.ipset.id",
      "    negated = false",
      "    type    = \"IPMatch\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_rule_group": {
    "description": "Defines waf_rule_group",
    "prefix": "tf-aws-resource-waf_rule_group",
    "body": [
      "resource \"aws_waf_rule\" \"example\" {",
      "  name        = \"example\"",
      "  metric_name = \"example\"",
      "}",
      "",
      "resource \"aws_waf_rule_group\" \"example\" {",
      "  name        = \"example\"",
      "  metric_name = \"example\"",
      "",
      "  activated_rule {",
      "    action {",
      "      type = \"COUNT\"",
      "    }",
      "",
      "    priority = 50",
      "    rule_id  = aws_waf_rule.example.id",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_size_constraint_set": {
    "description": "Defines waf_size_constraint_set",
    "prefix": "tf-aws-resource-waf_size_constraint_set",
    "body": [
      "resource \"aws_waf_size_constraint_set\" \"size_constraint_set\" {",
      "  name = \"tfsize_constraints\"",
      "",
      "  size_constraints {",
      "    text_transformation = \"NONE\"",
      "    comparison_operator = \"EQ\"",
      "    size                = \"4096\"",
      "",
      "    field_to_match {",
      "      type = \"BODY\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_sql_injection_match_set": {
    "description": "Defines waf_sql_injection_match_set",
    "prefix": "tf-aws-resource-waf_sql_injection_match_set",
    "body": [
      "resource \"aws_waf_sql_injection_match_set\" \"sql_injection_match_set\" {",
      "  name = \"tf-sql_injection_match_set\"",
      "",
      "  sql_injection_match_tuples {",
      "    text_transformation = \"URL_DECODE\"",
      "",
      "    field_to_match {",
      "      type = \"QUERY_STRING\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_web_acl": {
    "description": "Defines waf_web_acl",
    "prefix": "tf-aws-resource-waf_web_acl",
    "body": [
      "resource \"aws_waf_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptors {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}",
      "",
      "resource \"aws_waf_rule\" \"wafrule\" {",
      "  depends_on  = [aws_waf_ipset.ipset]",
      "  name        = \"tfWAFRule\"",
      "  metric_name = \"tfWAFRule\"",
      "",
      "  predicates {",
      "    data_id = aws_waf_ipset.ipset.id",
      "    negated = false",
      "    type    = \"IPMatch\"",
      "  }",
      "}",
      "",
      "resource \"aws_waf_web_acl\" \"waf_acl\" {",
      "  depends_on = [",
      "    aws_waf_ipset.ipset,",
      "    aws_waf_rule.wafrule,",
      "  ]",
      "  name        = \"tfWebACL\"",
      "  metric_name = \"tfWebACL\"",
      "",
      "  default_action {",
      "    type = \"ALLOW\"",
      "  }",
      "",
      "  rules {",
      "    action {",
      "      type = \"BLOCK\"",
      "    }",
      "",
      "    priority = 1",
      "    rule_id  = aws_waf_rule.wafrule.id",
      "    type     = \"REGULAR\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_xss_match_set": {
    "description": "Defines waf_xss_match_set",
    "prefix": "tf-aws-resource-waf_xss_match_set",
    "body": [
      "resource \"aws_waf_xss_match_set\" \"xss_match_set\" {",
      "  name = \"xss_match_set\"",
      "",
      "  xss_match_tuples {",
      "    text_transformation = \"NONE\"",
      "",
      "    field_to_match {",
      "      type = \"URI\"",
      "    }",
      "  }",
      "",
      "  xss_match_tuples {",
      "    text_transformation = \"NONE\"",
      "",
      "    field_to_match {",
      "      type = \"QUERY_STRING\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_byte_match_set": {
    "description": "Defines wafregional_byte_match_set",
    "prefix": "tf-aws-resource-wafregional_byte_match_set",
    "body": [
      "resource \"aws_wafregional_byte_match_set\" \"byte_set\" {",
      "  name = \"tf_waf_byte_match_set\"",
      "",
      "  byte_match_tuples {",
      "    text_transformation   = \"NONE\"",
      "    target_string         = \"badrefer1\"",
      "    positional_constraint = \"CONTAINS\"",
      "",
      "    field_to_match {",
      "      type = \"HEADER\"",
      "      data = \"referer\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_geo_match_set": {
    "description": "Defines wafregional_geo_match_set",
    "prefix": "tf-aws-resource-wafregional_geo_match_set",
    "body": [
      "resource \"aws_wafregional_geo_match_set\" \"geo_match_set\" {",
      "  name = \"geo_match_set\"",
      "",
      "  geo_match_constraint {",
      "    type  = \"Country\"",
      "    value = \"US\"",
      "  }",
      "",
      "  geo_match_constraint {",
      "    type  = \"Country\"",
      "    value = \"CA\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_ipset": {
    "description": "Defines wafregional_ipset",
    "prefix": "tf-aws-resource-wafregional_ipset",
    "body": [
      "resource \"aws_wafregional_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptor {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "",
      "  ip_set_descriptor {",
      "    type  = \"IPV4\"",
      "    value = \"10.16.16.0/16\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_rate_based_rule": {
    "description": "Defines wafregional_rate_based_rule",
    "prefix": "tf-aws-resource-wafregional_rate_based_rule",
    "body": [
      "resource \"aws_wafregional_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptor {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_rate_based_rule\" \"wafrule\" {",
      "  depends_on  = [aws_wafregional_ipset.ipset]",
      "  name        = \"tfWAFRule\"",
      "  metric_name = \"tfWAFRule\"",
      "",
      "  rate_key   = \"IP\"",
      "  rate_limit = 100",
      "",
      "  predicate {",
      "    data_id = aws_wafregional_ipset.ipset.id",
      "    negated = false",
      "    type    = \"IPMatch\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_regex_match_set": {
    "description": "Defines wafregional_regex_match_set",
    "prefix": "tf-aws-resource-wafregional_regex_match_set",
    "body": [
      "resource \"aws_wafregional_regex_match_set\" \"example\" {",
      "  name = \"example\"",
      "",
      "  regex_match_tuple {",
      "    field_to_match {",
      "      data = \"User-Agent\"",
      "      type = \"HEADER\"",
      "    }",
      "",
      "    regex_pattern_set_id = aws_wafregional_regex_pattern_set.example.id",
      "    text_transformation  = \"NONE\"",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_regex_pattern_set\" \"example\" {",
      "  name                  = \"example\"",
      "  regex_pattern_strings = [\"one\", \"two\"]",
      "}"
    ]
  },
  "aws-resource-wafregional_regex_pattern_set": {
    "description": "Defines wafregional_regex_pattern_set",
    "prefix": "tf-aws-resource-wafregional_regex_pattern_set",
    "body": [
      "resource \"aws_wafregional_regex_pattern_set\" \"example\" {",
      "  name                  = \"example\"",
      "  regex_pattern_strings = [\"one\", \"two\"]",
      "}"
    ]
  },
  "aws-resource-wafregional_rule": {
    "description": "Defines wafregional_rule",
    "prefix": "tf-aws-resource-wafregional_rule",
    "body": [
      "resource \"aws_wafregional_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptor {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_rule\" \"wafrule\" {",
      "  name        = \"tfWAFRule\"",
      "  metric_name = \"tfWAFRule\"",
      "",
      "  predicate {",
      "    type    = \"IPMatch\"",
      "    data_id = aws_wafregional_ipset.ipset.id",
      "    negated = false",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_rule_group": {
    "description": "Defines wafregional_rule_group",
    "prefix": "tf-aws-resource-wafregional_rule_group",
    "body": [
      "resource \"aws_wafregional_rule\" \"example\" {",
      "  name        = \"example\"",
      "  metric_name = \"example\"",
      "}",
      "",
      "resource \"aws_wafregional_rule_group\" \"example\" {",
      "  name        = \"example\"",
      "  metric_name = \"example\"",
      "",
      "  activated_rule {",
      "    action {",
      "      type = \"COUNT\"",
      "    }",
      "",
      "    priority = 50",
      "    rule_id  = aws_wafregional_rule.example.id",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_size_constraint_set": {
    "description": "Defines wafregional_size_constraint_set",
    "prefix": "tf-aws-resource-wafregional_size_constraint_set",
    "body": [
      "resource \"aws_wafregional_size_constraint_set\" \"size_constraint_set\" {",
      "  name = \"tfsize_constraints\"",
      "",
      "  size_constraints {",
      "    text_transformation = \"NONE\"",
      "    comparison_operator = \"EQ\"",
      "    size                = \"4096\"",
      "",
      "    field_to_match {",
      "      type = \"BODY\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_sql_injection_match_set": {
    "description": "Defines wafregional_sql_injection_match_set",
    "prefix": "tf-aws-resource-wafregional_sql_injection_match_set",
    "body": [
      "resource \"aws_wafregional_sql_injection_match_set\" \"sql_injection_match_set\" {",
      "  name = \"tf-sql_injection_match_set\"",
      "",
      "  sql_injection_match_tuple {",
      "    text_transformation = \"URL_DECODE\"",
      "",
      "    field_to_match {",
      "      type = \"QUERY_STRING\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_web_acl": {
    "description": "Defines wafregional_web_acl",
    "prefix": "tf-aws-resource-wafregional_web_acl",
    "body": [
      "resource \"aws_wafregional_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptor {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_rule\" \"wafrule\" {",
      "  name        = \"tfWAFRule\"",
      "  metric_name = \"tfWAFRule\"",
      "",
      "  predicate {",
      "    data_id = aws_wafregional_ipset.ipset.id",
      "    negated = false",
      "    type    = \"IPMatch\"",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_web_acl\" \"wafacl\" {",
      "  name        = \"tfWebACL\"",
      "  metric_name = \"tfWebACL\"",
      "",
      "  default_action {",
      "    type = \"ALLOW\"",
      "  }",
      "",
      "  rule {",
      "    action {",
      "      type = \"BLOCK\"",
      "    }",
      "",
      "    priority = 1",
      "    rule_id  = aws_wafregional_rule.wafrule.id",
      "    type     = \"REGULAR\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_web_acl_association": {
    "description": "Defines wafregional_web_acl_association",
    "prefix": "tf-aws-resource-wafregional_web_acl_association",
    "body": [
      "resource \"aws_wafregional_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptor {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_rule\" \"foo\" {",
      "  name        = \"tfWAFRule\"",
      "  metric_name = \"tfWAFRule\"",
      "",
      "  predicate {",
      "    data_id = aws_wafregional_ipset.ipset.id",
      "    negated = false",
      "    type    = \"IPMatch\"",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_web_acl\" \"foo\" {",
      "  name        = \"foo\"",
      "  metric_name = \"foo\"",
      "",
      "  default_action {",
      "    type = \"ALLOW\"",
      "  }",
      "",
      "  rule {",
      "    action {",
      "      type = \"BLOCK\"",
      "    }",
      "",
      "    priority = 1",
      "    rule_id  = aws_wafregional_rule.foo.id",
      "  }",
      "}",
      "",
      "resource \"aws_vpc\" \"foo\" {",
      "  cidr_block = \"10.1.0.0/16\"",
      "}",
      "",
      "data \"aws_availability_zones\" \"available\" {}",
      "",
      "resource \"aws_subnet\" \"foo\" {",
      "  vpc_id            = aws_vpc.foo.id",
      "  cidr_block        = \"10.1.1.0/24\"",
      "  availability_zone = data.aws_availability_zones.available.names[0]",
      "}",
      "",
      "resource \"aws_subnet\" \"bar\" {",
      "  vpc_id            = aws_vpc.foo.id",
      "  cidr_block        = \"10.1.2.0/24\"",
      "  availability_zone = data.aws_availability_zones.available.names[1]",
      "}",
      "",
      "resource \"aws_alb\" \"foo\" {",
      "  internal = true",
      "  subnets  = [aws_subnet.foo.id, aws_subnet.bar.id]",
      "}",
      "",
      "resource \"aws_wafregional_web_acl_association\" \"foo\" {",
      "  resource_arn = aws_alb.foo.arn",
      "  web_acl_id   = aws_wafregional_web_acl.foo.id",
      "}"
    ]
  },
  "aws-resource-wafregional_xss_match_set": {
    "description": "Defines wafregional_xss_match_set",
    "prefix": "tf-aws-resource-wafregional_xss_match_set",
    "body": [
      "resource \"aws_wafregional_xss_match_set\" \"xss_match_set\" {",
      "  name = \"xss_match_set\"",
      "",
      "  xss_match_tuple {",
      "    text_transformation = \"NONE\"",
      "",
      "    field_to_match {",
      "      type = \"URI\"",
      "    }",
      "  }",
      "",
      "  xss_match_tuple {",
      "    text_transformation = \"NONE\"",
      "",
      "    field_to_match {",
      "      type = \"QUERY_STRING\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafv2_ip_set": {
    "description": "Defines wafv2_ip_set",
    "prefix": "tf-aws-resource-wafv2_ip_set",
    "body": [
      "resource \"aws_wafv2_ip_set\" \"example\" {",
      "  name               = \"example\"",
      "  description        = \"Example IP set\"",
      "  scope              = \"REGIONAL\"",
      "  ip_address_version = \"IPV4\"",
      "  addresses          = [\"1.2.3.4/32\", \"5.6.7.8/32\"]",
      "",
      "  tags = {",
      "    Tag1 = \"Value1\"",
      "    Tag2 = \"Value2\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafv2_regex_pattern_set": {
    "description": "Defines wafv2_regex_pattern_set",
    "prefix": "tf-aws-resource-wafv2_regex_pattern_set",
    "body": [
      "resource \"aws_wafv2_regex_pattern_set\" \"example\" {",
      "  name        = \"example\"",
      "  description = \"Example regex pattern set\"",
      "  scope       = \"REGIONAL\"",
      "",
      "  regular_expression {",
      "    regex_string = \"one\"",
      "  }",
      "",
      "  regular_expression {",
      "    regex_string = \"two\"",
      "  }",
      "",
      "  tags = {",
      "    Tag1 = \"Value1\"",
      "    Tag2 = \"Value2\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafv2_rule_group": {
    "description": "Defines wafv2_rule_group",
    "prefix": "tf-aws-resource-wafv2_rule_group",
    "body": [
      "resource \"aws_wafv2_rule_group\" \"example\" {",
      "  name     = \"example-rule\"",
      "  scope    = \"REGIONAL\"",
      "  capacity = 2",
      "",
      "  rule {",
      "    name     = \"rule-1\"",
      "    priority = 1",
      "",
      "    action {",
      "      allow {}",
      "    }",
      "",
      "    statement {",
      "",
      "      geo_match_statement {",
      "        country_codes = [\"US\", \"NL\"]",
      "      }",
      "    }",
      "",
      "    visibility_config {",
      "      cloudwatch_metrics_enabled = false",
      "      metric_name                = \"friendly-rule-metric-name\"",
      "      sampled_requests_enabled   = false",
      "    }",
      "  }",
      "",
      "  visibility_config {",
      "    cloudwatch_metrics_enabled = false",
      "    metric_name                = \"friendly-metric-name\"",
      "    sampled_requests_enabled   = false",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafv2_web_acl": {
    "description": "Defines wafv2_web_acl",
    "prefix": "tf-aws-resource-wafv2_web_acl",
    "body": [
      "resource \"aws_wafv2_web_acl\" \"example\" {",
      "  name        = \"managed-rule-example\"",
      "  description = \"Example of a managed rule.\"",
      "  scope       = \"REGIONAL\"",
      "",
      "  default_action {",
      "    allow {}",
      "  }",
      "",
      "  rule {",
      "    name     = \"rule-1\"",
      "    priority = 1",
      "",
      "    override_action {",
      "      count {}",
      "    }",
      "",
      "    statement {",
      "      managed_rule_group_statement {",
      "        name        = \"AWSManagedRulesCommonRuleSet\"",
      "        vendor_name = \"AWS\"",
      "",
      "        excluded_rule {",
      "          name = \"SizeRestrictions_QUERYSTRING\"",
      "        }",
      "",
      "        excluded_rule {",
      "          name = \"NoUserAgent_HEADER\"",
      "        }",
      "      }",
      "    }",
      "",
      "    visibility_config {",
      "      cloudwatch_metrics_enabled = false",
      "      metric_name                = \"friendly-rule-metric-name\"",
      "      sampled_requests_enabled   = false",
      "    }",
      "  }",
      "",
      "  tags = {",
      "    Tag1 = \"Value1\"",
      "    Tag2 = \"Value2\"",
      "  }",
      "",
      "  visibility_config {",
      "    cloudwatch_metrics_enabled = false",
      "    metric_name                = \"friendly-metric-name\"",
      "    sampled_requests_enabled   = false",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafv2_web_acl_association": {
    "description": "Defines wafv2_web_acl_association",
    "prefix": "tf-aws-resource-wafv2_web_acl_association",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"example\" {",
      "  body = jsonencode({",
      "    openapi = \"3.0.1\"",
      "    info = {",
      "      title   = \"example\"",
      "      version = \"1.0\"",
      "    }",
      "    paths = {",
      "      \"/path1\" = {",
      "        get = {",
      "          x-amazon-apigateway-integration = {",
      "            httpMethod           = \"GET\"",
      "            payloadFormatVersion = \"1.0\"",
      "            type                 = \"HTTP_PROXY\"",
      "            uri                  = \"https://ip-ranges.amazonaws.com/ip-ranges.json\"",
      "          }",
      "        }",
      "      }",
      "    }",
      "  })",
      "",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_api_gateway_deployment\" \"example\" {",
      "  rest_api_id = aws_api_gateway_rest_api.example.id",
      "",
      "  triggers = {",
      "    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))",
      "  }",
      "",
      "  lifecycle {",
      "    create_before_destroy = true",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_stage\" \"example\" {",
      "  deployment_id = aws_api_gateway_deployment.example.id",
      "  rest_api_id   = aws_api_gateway_rest_api.example.id",
      "  stage_name    = \"example\"",
      "}",
      "",
      "resource \"aws_wafv2_web_acl\" \"example\" {",
      "  name  = \"web-acl-association-example\"",
      "  scope = \"REGIONAL\"",
      "",
      "  default_action {",
      "    allow {}",
      "  }",
      "",
      "  visibility_config {",
      "    cloudwatch_metrics_enabled = false",
      "    metric_name                = \"friendly-metric-name\"",
      "    sampled_requests_enabled   = false",
      "  }",
      "}",
      "",
      "resource \"aws_wafv2_web_acl_association\" \"example\" {",
      "  resource_arn = aws_api_gateway_stage.example.arn",
      "  web_acl_arn  = aws_wafv2_web_acl.example.arn",
      "}"
    ]
  },
  "aws-resource-wafv2_web_acl_logging_configuration": {
    "description": "Defines wafv2_web_acl_logging_configuration",
    "prefix": "tf-aws-resource-wafv2_web_acl_logging_configuration",
    "body": [
      "resource \"aws_wafv2_web_acl_logging_configuration\" \"example\" {",
      "  log_destination_configs = [aws_kinesis_firehose_delivery_stream.example.arn]",
      "  resource_arn            = aws_wafv2_web_acl.example.arn",
      "  redacted_fields {",
      "    single_header {",
      "      name = \"user-agent\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-worklink_fleet": {
    "description": "Defines worklink_fleet",
    "prefix": "tf-aws-resource-worklink_fleet",
    "body": [
      "resource \"aws_worklink_fleet\" \"example\" {",
      "  name = \"terraform-example\"",
      "}"
    ]
  },
  "aws-resource-worklink_website_certificate_authority_association": {
    "description": "Defines worklink_website_certificate_authority_association",
    "prefix": "tf-aws-resource-worklink_website_certificate_authority_association",
    "body": [
      "resource \"aws_worklink_fleet\" \"example\" {",
      "  name = \"terraform-example\"",
      "}",
      "",
      "resource \"aws_worklink_website_certificate_authority_association\" \"test\" {",
      "  fleet_arn   = aws_worklink_fleet.test.arn",
      "  certificate = file(\"certificate.pem\")",
      "}"
    ]
  },
  "aws-resource-workspaces_directory": {
    "description": "Defines workspaces_directory",
    "prefix": "tf-aws-resource-workspaces_directory",
    "body": [
      "resource \"aws_workspaces_directory\" \"example\" {",
      "  directory_id = aws_directory_service_directory.example.id",
      "  subnet_ids = [",
      "    aws_subnet.example_c.id,",
      "    aws_subnet.example_d.id",
      "  ]",
      "",
      "  tags = {",
      "    Example = true",
      "  }",
      "",
      "  self_service_permissions {",
      "    change_compute_type  = true",
      "    increase_volume_size = true",
      "    rebuild_workspace    = true",
      "    restart_workspace    = true",
      "    switch_running_mode  = true",
      "  }",
      "",
      "  workspace_access_properties {",
      "    device_type_android    = \"ALLOW\"",
      "    device_type_chromeos   = \"ALLOW\"",
      "    device_type_ios        = \"ALLOW\"",
      "    device_type_osx        = \"ALLOW\"",
      "    device_type_web        = \"DENY\"",
      "    device_type_windows    = \"DENY\"",
      "    device_type_zeroclient = \"DENY\"",
      "  }",
      "",
      "  workspace_creation_properties {",
      "    custom_security_group_id            = aws_security_group.example.id",
      "    default_ou                          = \"OU=AWS,DC=Workgroup,DC=Example,DC=com\"",
      "    enable_internet_access              = true",
      "    enable_maintenance_mode             = true",
      "    user_enabled_as_local_administrator = true",
      "  }",
      "",
      "  depends_on = [",
      "    aws_iam_role_policy_attachment.workspaces_default_service_access,",
      "    aws_iam_role_policy_attachment.workspaces_default_self_service_access",
      "  ]",
      "}",
      "",
      "resource \"aws_directory_service_directory\" \"example\" {",
      "  name     = \"corp.example.com\"",
      "  password = \"#S1ncerely\"",
      "  size     = \"Small\"",
      "",
      "  vpc_settings {",
      "    vpc_id = aws_vpc.example.id",
      "    subnet_ids = [",
      "      aws_subnet.example_a.id,",
      "      aws_subnet.example_b.id",
      "    ]",
      "  }",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"workspaces\" {",
      "  statement {",
      "    actions = [\"sts:AssumeRole\"]",
      "",
      "    principals {",
      "      type        = \"Service\"",
      "      identifiers = [\"workspaces.amazonaws.com\"]",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_iam_role\" \"workspaces_default\" {",
      "  name               = \"workspaces_DefaultRole\"",
      "  assume_role_policy = data.aws_iam_policy_document.workspaces.json",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"workspaces_default_service_access\" {",
      "  role       = aws_iam_role.workspaces_default.name",
      "  policy_arn = \"arn:aws:iam::aws:policy/AmazonWorkSpacesServiceAccess\"",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"workspaces_default_self_service_access\" {",
      "  role       = aws_iam_role.workspaces_default.name",
      "  policy_arn = \"arn:aws:iam::aws:policy/AmazonWorkSpacesSelfServiceAccess\"",
      "}",
      "",
      "resource \"aws_vpc\" \"example\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_subnet\" \"example_a\" {",
      "  vpc_id            = aws_vpc.example.id",
      "  availability_zone = \"us-east-1a\"",
      "  cidr_block        = \"10.0.0.0/24\"",
      "}",
      "",
      "resource \"aws_subnet\" \"example_b\" {",
      "  vpc_id            = aws_vpc.example.id",
      "  availability_zone = \"us-east-1b\"",
      "  cidr_block        = \"10.0.1.0/24\"",
      "}",
      "resource \"aws_subnet\" \"example_c\" {",
      "  vpc_id            = aws_vpc.example.id",
      "  availability_zone = \"us-east-1c\"",
      "  cidr_block        = \"10.0.2.0/24\"",
      "}",
      "",
      "resource \"aws_subnet\" \"example_d\" {",
      "  vpc_id            = aws_vpc.example.id",
      "  availability_zone = \"us-east-1d\"",
      "  cidr_block        = \"10.0.3.0/24\"",
      "}"
    ]
  },
  "aws-resource-workspaces_ip_group": {
    "description": "Defines workspaces_ip_group",
    "prefix": "tf-aws-resource-workspaces_ip_group",
    "body": [
      "resource \"aws_workspaces_ip_group\" \"contractors\" {",
      "  name        = \"Contractors\"",
      "  description = \"Contractors IP access control group\"",
      "}"
    ]
  },
  "aws-resource-workspaces_workspace": {
    "description": "Defines workspaces_workspace",
    "prefix": "tf-aws-resource-workspaces_workspace",
    "body": [
      "data \"aws_workspaces_bundle\" \"value_windows_10\" {",
      "  bundle_id = \"wsb-bh8rsxt14\" # Value with Windows 10 (English)",
      "}",
      "",
      "resource \"aws_workspaces_workspace\" \"example\" {",
      "  directory_id = aws_workspaces_directory.example.id",
      "  bundle_id    = data.aws_workspaces_bundle.value_windows_10.id",
      "  user_name    = \"john.doe\"",
      "",
      "  root_volume_encryption_enabled = true",
      "  user_volume_encryption_enabled = true",
      "  volume_encryption_key          = \"alias/aws/workspaces\"",
      "",
      "  workspace_properties {",
      "    compute_type_name                         = \"VALUE\"",
      "    user_volume_size_gib                      = 10",
      "    root_volume_size_gib                      = 80",
      "    running_mode                              = \"AUTO_STOP\"",
      "    running_mode_auto_stop_timeout_in_minutes = 60",
      "  }",
      "",
      "  tags = {",
      "    Department = \"IT\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-xray_encryption_config": {
    "description": "Defines xray_encryption_config",
    "prefix": "tf-aws-resource-xray_encryption_config",
    "body": [
      "resource \"aws_xray_encryption_config\" \"example\" {",
      "  type = \"NONE\"",
      "}"
    ]
  },
  "aws-resource-xray_group": {
    "description": "Defines xray_group",
    "prefix": "tf-aws-resource-xray_group",
    "body": [
      "resource \"aws_xray_group\" \"example\" {",
      "  group_name        = \"example\"",
      "  filter_expression = \"responsetime > 5\"",
      "}"
    ]
  },
  "aws-resource-xray_sampling_rule": {
    "description": "Defines xray_sampling_rule",
    "prefix": "tf-aws-resource-xray_sampling_rule",
    "body": [
      "resource \"aws_xray_sampling_rule\" \"example\" {",
      "  rule_name      = \"example\"",
      "  priority       = 10000",
      "  version        = 1",
      "  reservoir_size = 1",
      "  fixed_rate     = 0.05",
      "  url_path       = \"*\"",
      "  host           = \"*\"",
      "  http_method    = \"*\"",
      "  service_type   = \"*\"",
      "  service_name   = \"*\"",
      "  resource_arn   = \"*\"",
      "",
      "  attributes = {",
      "    Hello = \"Tris\"",
      "  }",
      "}"
    ]
  }
}
